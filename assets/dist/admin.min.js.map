{"version":3,"file":"admin.min.js","mappings":"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","sources":["webpack://ace-redis-cache/./assets/src/js/components/SaveBar.js","webpack://ace-redis-cache/./assets/src/js/admin.js"],"sourcesContent":["/**\n * SaveBar Component for Ace Redis Cache\n * \n * Inspired by GlossPress SaveBar - provides a fixed bottom save bar\n * with save status messages, unsaved changes tracking and immediate auto-save\n *\n * @package AceMedia\\RedisCache\n * @since 0.5.0\n */\n\nclass SaveBar {\n    constructor(options = {}) {\n        this.options = {\n            containerSelector: '#ace-redis-settings-form',\n            saveButtonSelector: '#ace-redis-save-btn',\n            messageContainerSelector: '#ace-redis-messages',\n            onSave: null,\n            ...options\n        };\n\n        this.isInitialized = false;\n        this.hasUnsavedChanges = false;\n        this.isSaving = false;\n        // Determine auto-save preference from localStorage; default to enabled on first run\n        try {\n            const stored = localStorage.getItem('ace_redis_auto_save_enabled');\n            if (stored === null) {\n                // Allow an explicit initial option to set the first-run default\n                if (typeof this.options.autoSaveEnabled === 'boolean') {\n                    this.isAutoSaveEnabled = this.options.autoSaveEnabled;\n                } else {\n                    this.isAutoSaveEnabled = true; // sensible default\n                }\n                // Persist the initial choice\n                localStorage.setItem('ace_redis_auto_save_enabled', this.isAutoSaveEnabled ? '1' : '0');\n            } else {\n                this.isAutoSaveEnabled = (stored === '1');\n            }\n        } catch (e) {\n            // Fallback if storage not available\n            this.isAutoSaveEnabled = true;\n        }\n        this.isSuccess = false;\n        this.message = '';\n        this.elapsedTime = 0;\n        this.intervalId = null;\n        this.originalFormData = null;\n\n        this.init();\n    }\n\n    init() {\n        if (this.isInitialized) return;\n        \n        this.createSaveBar();\n        this.setupEventListeners();\n        this.captureOriginalFormData();\n        this.updateSaveButtonState();\n        this.isInitialized = true;\n    }\n\n    createSaveBar() {\n        // Check if SaveBar already exists\n        if (document.querySelector('.ace-redis-save-bar')) {\n            return;\n        }\n\n    const autoSaveToggle = this.isAutoSaveEnabled ? 'checked' : '';\n\n        const saveBarHTML = `\n            <div class=\"ace-redis-save-bar\">\n                <div class=\"save-bar-content\">\n                    <div class=\"save-bar-left\">\n                        <span class=\"save-message\"></span>\n                    </div>\n                    <div class=\"save-bar-right\">\n                        <div class=\"auto-save-toggle-wrapper\">\n                            <label class=\"ace-switch\" for=\"auto-save-toggle\">\n                                <input type=\"checkbox\" id=\"auto-save-toggle\" ${autoSaveToggle}>\n                                <span class=\"ace-slider\"></span>\n                            </label>\n                            <span class=\"toggle-label\">Auto-save</span>\n                        </div>\n                        <button type=\"button\" id=\"save-bar-button\" class=\"button button-primary\" disabled>\n                            <span class=\"dashicons dashicons-admin-settings\"></span>\n                            <span class=\"button-text\">Saved</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Insert SaveBar into DOM\n        document.body.insertAdjacentHTML('beforeend', saveBarHTML);\n        this.updateFixedPosition();\n    }\n\n    setupEventListeners() {\n        // Watch for form changes\n        $(this.options.containerSelector).on('input change', 'input, select, textarea', () => {\n            setTimeout(() => this.checkForChanges(), 10);\n        });\n\n        // SaveBar button click\n        $(document).on('click', '#save-bar-button', (e) => {\n            e.preventDefault();\n            this.handleSave();\n        });\n\n        // Auto-save toggle click\n        $(document).on('change', '#auto-save-toggle', () => {\n            this.toggleAutoSave();\n        });\n\n        // Window events for positioning\n        $(window).on('resize scroll load', () => this.updateFixedPosition());\n\n        // Prevent unsaved changes from being lost\n        $(window).on('beforeunload', (e) => {\n            if (this.hasUnsavedChanges && !this.isSaving) {\n                const message = 'You have unsaved changes. Are you sure you want to leave?';\n                e.originalEvent.returnValue = message;\n                return message;\n            }\n        });\n\n        // WordPress admin menu resize handling\n        if (window.wp && wp.hooks) {\n            wp.hooks.addAction('wp-collapse-menu', 'ace-redis-cache', () => {\n                setTimeout(() => this.updateFixedPosition(), 300);\n            });\n        }\n    }\n\n    updateFixedPosition() {\n        const saveBar = document.querySelector('.ace-redis-save-bar');\n        if (!saveBar) return;\n\n        const adminMenuWrap = document.querySelector('#adminmenuwrap');\n        if (adminMenuWrap) {\n            const adminMenuWidth = adminMenuWrap.offsetWidth;\n            saveBar.style.left = `${adminMenuWidth}px`;\n        }\n    }\n\n    captureOriginalFormData() {\n        const $form = $(this.options.containerSelector);\n        this.originalFormData = this.getFormDataObject($form);\n    }\n\n    getFormDataObject($form) {\n        const formData = {};\n        \n        $form.serializeArray().forEach(field => {\n            if (field.name.startsWith('ace_redis_cache_settings[')) {\n                const key = field.name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                formData[key] = field.value;\n            }\n        });\n\n        // Add checkbox values (unchecked boxes don't get serialized)\n        $form.find('input[type=\"checkbox\"]').each(function() {\n            const name = $(this).attr('name');\n            if (name && name.startsWith('ace_redis_cache_settings[')) {\n                const key = name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                formData[key] = $(this).is(':checked') ? '1' : '0';\n            }\n        });\n        \n        return formData;\n    }\n\n    checkForChanges() {\n        if (!this.originalFormData) return;\n        \n        const $form = $(this.options.containerSelector);\n        const currentData = this.getFormDataObject($form);\n        const hasChanges = JSON.stringify(this.originalFormData) !== JSON.stringify(currentData);\n        \n        this.setUnsavedChanges(hasChanges);\n    }\n\n    setUnsavedChanges(hasChanges) {\n        if (this.hasUnsavedChanges !== hasChanges) {\n            this.hasUnsavedChanges = hasChanges;\n            this.updateSaveButtonState();\n            \n            if (hasChanges) {\n                this.startElapsedTimeTracking();\n                // Auto-save immediately when changes are detected (if enabled)\n                if (this.isAutoSaveEnabled) {\n                    setTimeout(() => this.handleAutoSave(), 500); // Small delay to avoid rapid saves\n                }\n            } else {\n                this.stopElapsedTimeTracking();\n            }\n        }\n    }\n\n    updateSaveButtonState() {\n        const $button = $('#save-bar-button');\n        const $buttonText = $button.find('.button-text');\n        const $icon = $button.find('.dashicons');\n\n        if (this.isSaving) {\n            $button.prop('disabled', true).removeClass('success');\n            $buttonText.text('Saving...');\n            $icon.removeClass('dashicons-admin-settings dashicons-yes-alt').addClass('dashicons-update');\n        } else if (this.isSuccess) {\n            $button.prop('disabled', true).addClass('success');\n            $buttonText.text('Saved!');\n            $icon.removeClass('dashicons-admin-settings dashicons-update').addClass('dashicons-yes-alt');\n        } else if (this.hasUnsavedChanges) {\n            $button.prop('disabled', false).removeClass('success');\n            $buttonText.text('Save Changes');\n            $icon.removeClass('dashicons-update dashicons-yes-alt').addClass('dashicons-admin-settings');\n        } else {\n            $button.prop('disabled', true).removeClass('success');\n            $buttonText.text('Saved');\n            $icon.removeClass('dashicons-update dashicons-yes-alt').addClass('dashicons-admin-settings');\n        }\n    }\n\n    async handleSave() {\n        if (!this.hasUnsavedChanges || this.isSaving) return;\n\n        this.setSaving(true);\n        \n        try {\n            let success = false;\n            \n            if (this.options.onSave && typeof this.options.onSave === 'function') {\n                success = await this.options.onSave();\n            } else {\n                // Default save logic - trigger the original form save\n                success = await this.defaultSave();\n            }\n\n            if (success) {\n                this.showMessage('Settings saved successfully!', 'success');\n                this.setSuccess(true);\n                this.captureOriginalFormData();\n                this.setUnsavedChanges(false);\n                \n                // Clear success state after 3 seconds\n                setTimeout(() => this.setSuccess(false), 3000);\n            } else {\n                this.showMessage('Save failed. Please try again.', 'error');\n            }\n        } catch (error) {\n            console.error('Save error:', error);\n            this.showMessage('An error occurred while saving.', 'error');\n        } finally {\n            this.setSaving(false);\n        }\n    }\n\n    async handleAutoSave() {\n        if (!this.hasUnsavedChanges || this.isSaving) return;\n\n        console.log('[SaveBar] Auto-saving changes...');\n        this.showMessage('Auto-saving...', 'info');\n\n        try {\n            let success = false;\n            \n            if (this.options.onSave && typeof this.options.onSave === 'function') {\n                success = await this.options.onSave();\n            } else {\n                success = await this.defaultSave();\n            }\n\n            if (success) {\n                this.showMessage('Changes auto-saved!', 'success');\n                this.captureOriginalFormData();\n                this.setUnsavedChanges(false);\n            } else {\n                this.showMessage('Auto-save failed', 'error');\n            }\n        } catch (error) {\n            console.error('[SaveBar] Auto-save error:', error);\n            this.showMessage('Auto-save error occurred', 'error');\n        }\n    }\n\n    async defaultSave() {\n        return new Promise((resolve) => {\n            const $form = $(this.options.containerSelector);\n            const formData = this.getFormDataObject($form);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    settings: formData,\n                    nonce: ace_redis_admin.nonce\n                },\n                success: (response) => {\n                    resolve(response.success === true);\n                },\n                error: () => {\n                    resolve(false);\n                }\n            });\n        });\n    }\n\n    setSaving(isSaving) {\n        this.isSaving = isSaving;\n        this.updateSaveButtonState();\n    }\n\n    setSuccess(isSuccess) {\n        this.isSuccess = isSuccess;\n        this.updateSaveButtonState();\n    }\n\n    showMessage(message, type = 'info') {\n        this.message = message;\n        this.updateMessageDisplay(type);\n\n        // Start elapsed time tracking for success messages\n        if (type === 'success') {\n            this.startElapsedTimeTracking();\n        }\n\n        // Auto-hide messages after different intervals based on type\n        const hideDelay = type === 'error' ? 8000 : (type === 'success' ? 5000 : 3000);\n        setTimeout(() => {\n            this.clearMessage();\n        }, hideDelay);\n    }\n\n    updateMessageDisplay(type = 'info') {\n        const $messageContainer = $('.save-message');\n        \n        if (this.message) {\n            $messageContainer\n                .text(this.message)\n                .addClass('visible')\n                .removeClass('error success info')\n                .addClass(type);\n        } else {\n            $messageContainer\n                .removeClass('visible error success info')\n                .text('');\n        }\n    }\n\n    clearMessage() {\n        this.message = '';\n        this.updateMessageDisplay();\n        this.stopElapsedTimeTracking();\n    }\n\n    startElapsedTimeTracking() {\n        this.stopElapsedTimeTracking();\n        this.elapsedTime = 0;\n        \n        this.intervalId = setInterval(() => {\n            this.elapsedTime++;\n            this.updateElapsedTimeDisplay();\n        }, 1000);\n    }\n\n    stopElapsedTimeTracking() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = null;\n        }\n    }\n\n    updateElapsedTimeDisplay() {\n        if (this.elapsedTime > 0) {\n            const timeText = this.formatElapsedTime(this.elapsedTime);\n            $('.save-message').text(timeText);\n        }\n    }\n\n    formatElapsedTime(seconds) {\n        if (seconds < 60) return `${seconds}s ago`;\n        if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;\n        return `${Math.floor(seconds / 3600)}h ago`;\n    }\n\n    toggleAutoSave() {\n        const $toggle = $('#auto-save-toggle');\n    this.isAutoSaveEnabled = $toggle.is(':checked');\n        \n        if (this.isAutoSaveEnabled) {\n            this.showMessage('Auto-save enabled - changes will be saved automatically', 'success');\n        } else {\n            this.showMessage('Auto-save disabled - manual save required', 'info');\n        }\n        \n        // Store the preference\n        try {\n            localStorage.setItem('ace_redis_auto_save_enabled', this.isAutoSaveEnabled ? '1' : '0');\n        } catch (e) { /* ignore */ }\n\n        // Also persist per-user server-side so it survives devices/browsers\n        if (typeof ace_redis_admin !== 'undefined' && ace_redis_admin.ajax_url) {\n            try {\n                jQuery.post(ace_redis_admin.ajax_url, {\n                    action: 'ace_redis_toggle_autosave',\n                    nonce: ace_redis_admin.nonce,\n                    enabled: this.isAutoSaveEnabled ? 1 : 0\n                });\n            } catch (e) { /* ignore */ }\n        }\n    }\n\n    destroy() {\n        this.stopElapsedTimeTracking();\n        \n        // Remove event listeners\n        $(this.options.containerSelector).off('input change');\n        $(document).off('click', '#save-bar-button');\n        $(document).off('change', '#auto-save-toggle');\n        $(window).off('resize scroll load');\n        $(window).off('beforeunload');\n\n        // Remove SaveBar from DOM\n        $('.ace-redis-save-bar').remove();\n        \n        this.isInitialized = false;\n    }\n}\n\n// Export the SaveBar class as default for ES6 modules\nexport default SaveBar;\n","/**\n * Ace Redis Cache Admin JavaScript\n *\n * Handles admin interface interactions, AJAX requests,\n * and dynamic UI updates.\n *\n * @package AceMedia\\RedisCache\n * @since 0.5.0\n */\n\n// Import SaveBar component\nimport SaveBar from './components/SaveBar.js';\n\n(function($) {\n    'use strict';\n\n    // Make SaveBar available globally for WordPress integration\n    window.AceRedisCacheSaveBar = SaveBar;\n\n    // Main admin class\n    class AceRedisCacheAdmin {\n        constructor() {\n            this.originalFormData = null;\n            this.init();\n        }\n\n        init() {\n            this.initTabs();\n            this.initToggleSwitch();\n            this.initCacheMode();\n            this.initConnectionTest();\n            this.initCacheManagement();\n            this.initDiagnostics();\n            this.initPerformanceMetrics();\n            this.initAjaxForm();\n            this.initFormValidation();\n            this.initChangeTracking();\n            this.initSaveBar(); // Initialize the SaveBar component\n        }\n\n        // Initialize SaveBar component\n        initSaveBar() {\n            // Wait for SaveBar component to be available\n            if (typeof window.AceRedisCacheSaveBar !== 'undefined') {\n                // Read any prior preference to seed the component correctly\n                let initialAuto = true;\n                if (typeof ace_redis_admin !== 'undefined' && ace_redis_admin.user_auto_save !== null) {\n                    initialAuto = !!ace_redis_admin.user_auto_save;\n                } else {\n                    try {\n                        const stored = localStorage.getItem('ace_redis_auto_save_enabled');\n                        if (stored !== null) initialAuto = (stored === '1');\n                    } catch (e) { /* ignore */ }\n                }\n\n                this.saveBar = new window.AceRedisCacheSaveBar({\n                    containerSelector: '#ace-redis-settings-form',\n                    saveButtonSelector: '#ace-redis-save-btn',\n                    messageContainerSelector: '#ace-redis-messages',\n                    onSave: () => this.saveSettingsViaSaveBar(),\n                    autoSaveEnabled: initialAuto,\n                    autoSaveInterval: 15000 // 15 seconds - shorter interval for better UX\n                });\n                console.log('SaveBar initialized successfully');\n            } else {\n                // Fallback if SaveBar component isn't loaded\n                console.warn('SaveBar component not loaded, falling back to standard save handling');\n            }\n        }\n\n        // Save settings specifically for SaveBar component\n        async saveSettingsViaSaveBar() {\n            try {\n                const success = await this.performSaveSettings();\n                \n                if (success) {\n                    // Refresh connection status after successful save\n                    setTimeout(() => {\n                        if (typeof this.testConnection === 'function') {\n                            this.testConnection();\n                        }\n                    }, 1000);\n                }\n                \n                return success;\n            } catch (error) {\n                console.error('SaveBar save error:', error);\n                return false;\n            }\n        }\n\n        // Extracted save logic that can be used by both SaveBar and regular form\n        async performSaveSettings() {\n            return new Promise((resolve) => {\n                const $form = $('#ace-redis-settings-form');\n                const formData = this.getFormDataObject();\n\n                $.ajax({\n                    url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                    type: 'POST',\n                    beforeSend: function(xhr) {\n                        xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                    },\n                    data: {\n                        settings: formData,\n                        nonce: ace_redis_admin.nonce\n                    },\n                    success: (response) => {\n                        if (response.success) {\n                            // Update the original form data for change tracking\n                            this.captureOriginalFormData();\n                            resolve(true);\n                        } else {\n                            resolve(false);\n                        }\n                    },\n                    error: () => {\n                        resolve(false);\n                    }\n                });\n            });\n        }\n\n        // Initialize tab navigation\n        initTabs() {\n            // Handle tab clicks\n            $('.nav-tab').on('click', (e) => {\n                e.preventDefault();\n                const target = $(e.target).attr('href');\n                this.switchToTab(target);\n                \n                // Update URL hash\n                if (target.startsWith('#')) {\n                    window.location.hash = target;\n                }\n            });\n            \n            // Handle browser back/forward navigation\n            $(window).on('hashchange', () => {\n                this.handleHashChange();\n            });\n            \n            // Initialize tab based on URL hash on page load\n            this.handleHashChange();\n        }\n        \n        // Switch to a specific tab\n        switchToTab(target) {\n            if (!target || !$(target).length) {\n                return;\n            }\n            \n            // Update tab states\n            $('.nav-tab').removeClass('nav-tab-active');\n            $(`.nav-tab[href=\"${target}\"]`).addClass('nav-tab-active');\n\n            // Update content visibility with fade effect\n            $('.tab-content.active').removeClass('active');\n            setTimeout(() => {\n                $(target).addClass('active');\n                \n                // Load metrics when diagnostics tab is opened\n                if (target === '#diagnostics') {\n                    setTimeout(() => {\n                        $('#refresh-metrics-btn').click();\n                    }, 100);\n                    // Resume timer countdown if auto-refresh is enabled\n                    this.resumeAutoRefreshTimer();\n                } else {\n                    // Pause timer countdown when leaving diagnostics tab\n                    this.pauseAutoRefreshTimer();\n                }\n            }, 50); // Small delay to allow previous content to fade out\n        }\n        \n        // Handle URL hash changes\n        handleHashChange() {\n            let hash = window.location.hash;\n            \n            // If no hash or invalid hash, default to first tab\n            if (!hash || !$(hash).length) {\n                const firstTab = $('.nav-tab').first().attr('href');\n                if (firstTab) {\n                    hash = firstTab;\n                    // Don't update URL if we're defaulting to first tab\n                }\n            }\n            \n            // Switch to the tab if it exists\n            if (hash && $(hash).length) {\n                this.switchToTab(hash);\n            }\n        }\n\n        // Initialize toggle switches\n        initToggleSwitch() {\n            $('.ace-switch input').on('change', function() {\n                const $switch = $(this);\n                const $slider = $switch.siblings('.ace-slider');\n\n                // Add visual feedback\n                if ($switch.is(':checked')) {\n                    $slider.addClass('checked');\n                } else {\n                    $slider.removeClass('checked');\n                }\n            });\n        }\n\n        // Initialize cache mode handling\n        initCacheMode() {\n            const toggleBlockCachingOption = () => {\n                const cacheMode = $('#cache-mode-select').val();\n                const $blockCachingRow = $('#block-caching-row');\n                const $blockCachingCheckbox = $('input[name=\"ace_redis_cache_settings[enable_block_caching]\"]');\n                const $transientRow = $('#transient-cache-row');\n                const $transientCheckbox = $('input[name=\"ace_redis_cache_settings[enable_transient_cache]\"]');\n\n                const show = cacheMode === 'object';\n                $blockCachingRow.toggle(show);\n                $transientRow.toggle(show);\n                // no query cache row\n                if (!show) {\n                    $blockCachingCheckbox.prop('checked', false);\n                    $transientCheckbox.prop('checked', false);\n                }\n            };\n\n            // Initialize on page load\n            toggleBlockCachingOption();\n\n            // Handle cache mode changes\n            $('#cache-mode-select').on('change', toggleBlockCachingOption);\n        }\n\n        // Initialize connection testing\n        initConnectionTest() {\n            $('#ace-redis-cache-test-btn').on('click', (e) => {\n                e.preventDefault();\n                this.testConnection();\n            });\n\n            $('#ace-redis-cache-test-write-btn').on('click', (e) => {\n                e.preventDefault();\n                this.testWriteRead();\n            });\n        }\n\n        // Test Redis connection\n        testConnection() {\n            const $btn = $('#ace-redis-cache-test-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Testing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/test-connection\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.updateConnectionStatus(response.data);\n                    } else {\n                        this.showConnectionError(response.data || 'Connection failed');\n                    }\n                })\n                .fail(() => {\n                    this.showConnectionError('REST API request failed');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Test write/read operations\n        testWriteRead() {\n            const $btn = $('#ace-redis-cache-test-write-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Testing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/test-write-read\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(\n                            '✅ Write/Read Test Successful\\n' +\n                        `Write: ${response.data.write}\\n` +\n                        `Read: ${response.data.read}\\n` +\n                        `Value: ${response.data.value}`,\n                            'success'\n                        );\n                    } else {\n                        this.showNotification(`❌ Test failed: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ REST API request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Update connection status display\n        updateConnectionStatus(data) {\n            const $status = $('#ace-redis-cache-connection');\n            const $size = $('#ace-redis-cache-size');\n            const $serverInfo = $('#redis-server-info');\n            const $serverType = $('#redis-server-type');\n            const $suggestions = $('#redis-suggestions');\n\n            $status.text(data.status)\n                .removeClass('status-unknown status-error')\n                .addClass('status-success');\n\n            let sizeText = `${data.size} keys (${data.size_kb} KB)`;\n            if (data.debug_info) {\n                sizeText += ` - ${data.debug_info}`;\n            }\n            $size.text(sizeText);\n            \n            // Show server information if available\n            if (data.server_type || data.suggestions) {\n                $serverType.text(data.server_type || 'Unknown');\n                \n                // Display suggestions\n                if (data.suggestions && data.suggestions.length > 0) {\n                    let suggestionsHtml = '<p><strong>Recommendations:</strong></p><ul>';\n                    data.suggestions.forEach(suggestion => {\n                        suggestionsHtml += `<li>${suggestion}</li>`;\n                    });\n                    suggestionsHtml += '</ul>';\n                    $suggestions.html(suggestionsHtml);\n                } else {\n                    $suggestions.html('<p><strong>Recommendations:</strong> Configuration looks good ✅</p>');\n                }\n                \n                $serverInfo.slideDown(300);\n            }\n        }\n\n        // Show connection error\n        showConnectionError(message) {\n            const $status = $('#ace-redis-cache-connection');\n            const $size = $('#ace-redis-cache-size');\n            const $serverInfo = $('#redis-server-info');\n\n            $status.text(message)\n                .removeClass('status-unknown status-success')\n                .addClass('status-error');\n\n            $size.text('0 keys (0 KB)');\n            $serverInfo.slideUp(300);\n        }\n\n        // Initialize cache management\n        initCacheManagement() {\n            $('#ace-redis-cache-flush-btn').on('click', (e) => {\n                e.preventDefault();\n                this.clearAllCache();\n            });\n        }\n\n        // Clear all cache\n        clearAllCache() {\n            if (!confirm('Are you sure you want to clear all cache? This action cannot be undone.')) {\n                return;\n            }\n\n            const $btn = $('#ace-redis-cache-flush-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Clearing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/flush-cache\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce,\n                    type: 'all'\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(`✅ ${response.data.message || 'Cache cleared successfully'}`, 'success');\n                        $('#ace-redis-cache-size').text('0 keys (0 KB)');\n                    } else {\n                        this.showNotification(`❌ Failed to clear cache: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ REST API request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n    // Note: clearBlockCache removed; single Clear All handles all plugin-managed keys.\n\n        // Initialize diagnostics\n        initDiagnostics() {\n            $('#ace-redis-cache-diagnostics-btn').on('click', (e) => {\n                e.preventDefault();\n                this.runDiagnostics();\n            });\n        }\n\n        // Run system diagnostics\n        runDiagnostics() {\n            const $btn = $('#ace-redis-cache-diagnostics-btn');\n            const $results = $('#diagnostics-results');\n            const originalText = $btn.text();\n\n            $btn.text('Running...').prop('disabled', true);\n            $results.html('<p>⏳ Running comprehensive diagnostics...</p>');\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/diagnostics\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success && response.data) {\n                        const diagnostics = Array.isArray(response.data)\n                            ? response.data.join('\\n')\n                            : response.data;\n                        $results.html(`<pre>${this.escapeHtml(diagnostics)}</pre>`);\n                    } else {\n                        $results.html(`<p class=\"error\">❌ Failed to load diagnostics: ${response.data || 'Unknown error'}</p>`);\n                    }\n                })\n                .fail(() => {\n                    $results.html('<p class=\"error\">❌ Diagnostics REST API request failed</p>');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Initialize form validation\n        initFormValidation() {\n            $('#ace-redis-save-btn').on('click', (e) => {\n                if (!this.validateForm()) {\n                    e.preventDefault();\n                    return false;\n                }\n            });\n\n            // Real-time validation\n            $('#redis_host').on('blur', this.validateHost);\n            $('#redis_port').on('blur', this.validatePort);\n            $('#cache_ttl').on('blur', this.validateTTL);\n        }\n\n        // Validate form inputs\n        validateForm() {\n            let isValid = true;\n            const errors = [];\n\n            // Validate host\n            const host = $('#redis_host').val().trim();\n            if (!host) {\n                errors.push('Redis host is required');\n                isValid = false;\n            }\n\n            // Validate port\n            const port = parseInt($('#redis_port').val());\n            if (!port || port < 1 || port > 65535) {\n                errors.push('Redis port must be between 1 and 65535');\n                isValid = false;\n            }\n\n            // Validate TTL\n            const ttl = parseInt($('#cache_ttl').val());\n            if (!ttl || ttl < 60) {\n                errors.push('Cache TTL must be at least 60 seconds');\n                isValid = false;\n            }\n\n            if (!isValid) {\n                this.showNotification(`❌ Validation errors:\\n${errors.join('\\n')}`, 'error');\n            }\n\n            return isValid;\n        }\n\n        // Individual field validators\n        validateHost() {\n            const $field = $(this);\n            const value = $field.val().trim();\n\n            if (!value) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        validatePort() {\n            const $field = $(this);\n            const value = parseInt($field.val());\n\n            if (!value || value < 1 || value > 65535) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        validateTTL() {\n            const $field = $(this);\n            const value = parseInt($field.val());\n\n            if (!value || value < 60) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        // Show notification\n        showNotification(message, type = 'info') {\n            // Use native alert for now - can be enhanced later\n            alert(message);\n\n            // Future: Create toast notifications\n            // this.createToast(message, type);\n        }\n\n        // Initialize AJAX form submission\n        initAjaxForm() {\n            console.log('Initializing AJAX form...');\n            \n            // Handle form submission\n            $('#ace-redis-settings-form').on('submit', (e) => {\n                console.log('Form submit intercepted');\n                e.preventDefault();\n                e.stopPropagation();\n                this.saveSettings();\n                return false;\n            });\n            \n            // Also handle direct button click as backup\n            $('#ace-redis-save-btn').on('click', (e) => {\n                console.log('Save button clicked');\n                e.preventDefault();\n                e.stopPropagation();\n                this.saveSettings();\n                return false;\n            });\n        }\n\n        // Initialize change tracking for form fields\n        initChangeTracking() {\n            // Store original form data\n            setTimeout(() => {\n                // Store original button text\n                const $button = $('#ace-redis-save-btn');\n                if (!$button.data('original-text')) {\n                    $button.data('original-text', $button.val());\n                }\n                \n                this.captureOriginalFormData();\n                this.updateSaveButtonState();\n                \n                // Watch for changes\n                $('#ace-redis-settings-form input, #ace-redis-settings-form select, #ace-redis-settings-form textarea').on('input change', () => {\n                    setTimeout(() => this.updateSaveButtonState(), 10);\n                });\n            }, 100);\n        }\n        \n        // Capture original form data\n        captureOriginalFormData() {\n            this.originalFormData = this.getFormDataObject();\n        }\n        \n        // Check if form has changes\n        hasFormChanges() {\n            if (!this.originalFormData) return false;\n            \n            const currentData = this.getFormDataObject();\n            return JSON.stringify(this.originalFormData) !== JSON.stringify(currentData);\n        }\n        \n        // Update save button state based on changes\n        updateSaveButtonState() {\n            const $button = $('#ace-redis-save-btn');\n            const hasChanges = this.hasFormChanges();\n            \n            $button.prop('disabled', !hasChanges);\n            \n            if (!hasChanges) {\n                $button.val($button.data('original-text') || 'Save Changes (No Changes)');\n            } else {\n                $button.val($button.data('original-text') || 'Save Changes');\n            }\n        }\n        \n        // Get form data as object\n        getFormDataObject() {\n            const $form = $('#ace-redis-settings-form');\n            const formData = {};\n            \n            $form.serializeArray().forEach(field => {\n                if (field.name.startsWith('ace_redis_cache_settings[')) {\n                    const key = field.name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                    formData[key] = field.value;\n                }\n            });\n\n            // Add checkbox values (unchecked boxes don't get serialized)\n            $form.find('input[type=\"checkbox\"]').each(function() {\n                const name = $(this).attr('name');\n                if (name && name.startsWith('ace_redis_cache_settings[')) {\n                    const key = name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                    formData[key] = $(this).is(':checked') ? '1' : '0';\n                }\n            });\n            \n            return formData;\n        }\n\n        // Save settings via REST API\n        saveSettings() {\n            // Check if SaveBar is handling saves\n            if (this.saveBar) {\n                // Let SaveBar handle the save\n                this.saveBar.handleSave();\n                return;\n            }\n            \n            // Fallback to original save logic\n            this.performOriginalSave();\n        }\n\n        // Original save method for backward compatibility\n        performOriginalSave() {\n            // Check for changes first\n            if (!this.hasFormChanges()) {\n                this.showMessage('Error: Failed to save settings. No changes detected or database error.', 'error');\n                return;\n            }\n            \n            const $form = $('#ace-redis-settings-form');\n            const $button = $('#ace-redis-save-btn');\n            const $messages = $('#ace-redis-messages');\n            \n            console.log('REST API Save triggered...');\n            \n            // Show loading state\n            const originalText = $button.val();\n            $button.val('Saving...').prop('disabled', true);\n            $messages.hide();\n\n            // Get form data\n            const formData = this.getFormDataObject();\n\n            console.log('Sending data:', formData);\n            console.log('REST URL:', ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings');\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                    console.log('Set REST nonce:', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    settings: formData,\n                    nonce: ace_redis_admin.nonce\n                },\n                success: (response) => {\n                    console.log('Success response:', response);\n                    if (response.success) {\n                        this.showMessage(response.message || 'Settings saved successfully!', 'success');\n                        \n                        // Update original form data and button state\n                        this.captureOriginalFormData();\n                        this.updateSaveButtonState();\n                        \n                        // Refresh connection status after save\n                        setTimeout(() => {\n                            if (typeof this.testConnection === 'function') {\n                                this.testConnection();\n                            }\n                        }, 1000);\n                    } else {\n                        this.showMessage(response.message || 'Failed to save settings', 'error');\n                    }\n                },\n                error: (xhr, status, error) => {\n                    console.error('Save error:', {\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                        responseText: xhr.responseText,\n                        error: error\n                    });\n                    \n                    let errorMessage = 'Network error occurred';\n                    \n                    if (xhr.responseJSON && xhr.responseJSON.message) {\n                        errorMessage = xhr.responseJSON.message;\n                    } else if (xhr.status === 504) {\n                        errorMessage = 'Gateway timeout - settings may still be saved. Please refresh the page.';\n                    } else if (xhr.status === 403) {\n                        errorMessage = 'Permission denied. Please refresh the page and try again.';\n                    } else if (xhr.status === 404) {\n                        errorMessage = 'REST API endpoint not found. The plugin may not be properly configured.';\n                    } else {\n                        errorMessage = `${error} (Status: ${xhr.status})`;\n                    }\n                    \n                    this.showMessage('Error: ' + errorMessage, 'error');\n                },\n                complete: () => {\n                    // Reset button state\n                    $button.val(originalText).prop('disabled', false);\n                }\n            });\n        }\n\n        // Show success/error message\n        showMessage(message, type = 'success') {\n            const $messages = $('#ace-redis-messages');\n            const cssClass = type === 'success' ? 'notice-success' : 'notice-error';\n            \n            $messages.html(`\n                <div class=\"notice ${cssClass} is-dismissible\">\n                    <p>${this.escapeHtml(message)}</p>\n                    <button type=\"button\" class=\"notice-dismiss\">\n                        <span class=\"screen-reader-text\">Dismiss this notice.</span>\n                    </button>\n                </div>\n            `).show();\n\n            // Auto-hide success messages after 5 seconds\n            if (type === 'success') {\n                setTimeout(() => {\n                    $messages.fadeOut();\n                }, 5000);\n            }\n\n            // Handle dismiss button\n            $messages.find('.notice-dismiss').on('click', function() {\n                $messages.fadeOut();\n            });\n        }\n\n        // Initialize performance metrics\n        initPerformanceMetrics() {\n            // Load metrics immediately if diagnostics tab is active\n            if ($('#diagnostics').hasClass('active')) {\n                setTimeout(() => {\n                    $('#refresh-metrics-btn').click();\n                }, 100);\n            }\n            \n            // Initialize auto-refresh functionality\n            this.initAutoRefresh();\n            \n            // Manual refresh button\n            $('#refresh-metrics-btn').on('click', () => {\n                this.loadPerformanceMetrics();\n                // Visual feedback for manual refresh\n                const $btn = $('#refresh-metrics-btn');\n                $btn.prop('disabled', true).html('⏳');\n                setTimeout(() => {\n                    $btn.prop('disabled', false).html('🔄');\n                }, 1000);\n            });\n        }\n        \n        // Initialize auto-refresh functionality\n        initAutoRefresh() {\n            // Store references at class level\n            this.autoRefreshInterval = null;\n            this.countdownInterval = null;\n            this.remainingSeconds = 0;\n            \n            const updateTimer = () => {\n                const $timer = $('#refresh-timer');\n                if (this.remainingSeconds > 0) {\n                    $timer.text(`Next refresh in ${this.remainingSeconds}s`);\n                    this.remainingSeconds--;\n                } else {\n                    $timer.text('');\n                }\n            };\n            \n            this.startAutoRefresh = (seconds) => {\n                // Clear existing intervals\n                if (this.autoRefreshInterval) {\n                    clearInterval(this.autoRefreshInterval);\n                }\n                if (this.countdownInterval) {\n                    clearInterval(this.countdownInterval);\n                }\n                \n                const $timer = $('#refresh-timer');\n                \n                if (seconds > 0) {\n                    this.remainingSeconds = seconds;\n                    \n                    // Start countdown timer\n                    this.countdownInterval = setInterval(updateTimer, 1000);\n                    \n                    // Start auto-refresh timer\n                    this.autoRefreshInterval = setInterval(() => {\n                        // Only refresh if diagnostics tab is active\n                        if ($('#diagnostics').hasClass('active')) {\n                            $('#refresh-metrics-btn').click();\n                            this.remainingSeconds = seconds; // Reset countdown\n                        }\n                    }, seconds * 1000);\n                    \n                    updateTimer(); // Show initial timer\n                } else {\n                    $timer.text('');\n                }\n            };\n            \n            // Handle dropdown change\n            $('#auto-refresh-select').on('change', () => {\n                const seconds = parseInt($('#auto-refresh-select').val());\n                this.startAutoRefresh(seconds);\n            });\n            \n            // Start with default value (30 seconds)\n            this.startAutoRefresh(30);\n        }\n        \n        // Pause auto-refresh timer (when leaving diagnostics tab)\n        pauseAutoRefreshTimer() {\n            if (this.countdownInterval) {\n                clearInterval(this.countdownInterval);\n            }\n            $('#refresh-timer').text('');\n        }\n        \n        // Resume auto-refresh timer (when entering diagnostics tab)\n        resumeAutoRefreshTimer() {\n            const selectedSeconds = parseInt($('#auto-refresh-select').val());\n            if (selectedSeconds > 0) {\n                // Restart the timer to show countdown immediately\n                this.startAutoRefresh(selectedSeconds);\n            }\n        }\n\n        // Load performance metrics via REST API\n        loadPerformanceMetrics() {\n            // Safety check - only load if diagnostics tab is active\n            if (!$('#diagnostics').hasClass('active')) {\n                return;\n            }\n            \n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/metrics',\n                type: 'GET',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                success: (response) => {\n                    // Double-check we're still on the diagnostics tab when response comes back\n                    if (!$('#diagnostics').hasClass('active')) {\n                        return;\n                    }\n                    \n                    if (response.success && response.data) {\n                        this.updateMetricsDisplay(response.data);\n                    } else if (response.data) {\n                        // Even on error, use the fallback data provided\n                        this.updateMetricsDisplay(response.data);\n                    }\n                },\n                error: () => {\n                    // Use fallback metrics on error\n                    this.updateMetricsDisplay({\n                        cache_hit_rate: '--',\n                        total_keys: '--',\n                        memory_usage: '--',\n                        response_time: '--',\n                        uptime: '--',\n                        connected_clients: '--',\n                        ops_per_sec: '--'\n                    });\n                }\n            });\n        }\n\n        // Update metrics display\n        updateMetricsDisplay(metrics) {\n            // Add debug logging for keyspace stats\n            console.log('Debug keyspace stats:', {\n                hits: metrics.debug_keyspace_hits,\n                misses: metrics.debug_keyspace_misses,\n                hit_rate: metrics.cache_hit_rate\n            });\n            \n            $('#performance-metrics .metric-card').each(function() {\n                const $card = $(this);\n                const $value = $card.find('.metric-value');\n                const title = $card.find('h4').text();\n                let newValue = '--';\n                \n                switch (title) {\n                    case 'Cache Hit Rate':\n                        newValue = metrics.cache_hit_rate || '--';\n                        break;\n                    case 'Total Keys':\n                        newValue = metrics.total_keys || '--';\n                        break;\n                    case 'Memory Usage':\n                        newValue = metrics.memory_usage || '--';\n                        break;\n                    case 'Plugin Memory':\n                        newValue = metrics.plugin_memory_total || '--';\n                        // Also update description with breakdown if available\n                        const $desc = $card.find('.metric-description');\n                        const parts = [];\n                        if (metrics.plugin_memory_page) parts.push(`Page ${metrics.plugin_memory_page}`);\n                        if (metrics.plugin_memory_minified) parts.push(`Minified ${metrics.plugin_memory_minified}`);\n                        if (metrics.plugin_memory_blocks) parts.push(`Blocks ${metrics.plugin_memory_blocks}`);\n                        if (metrics.plugin_memory_transients) parts.push(`Transients ${metrics.plugin_memory_transients}`);\n                        if (parts.length) {\n                            $desc.text(parts.join(' | '));\n                        }\n                        break;\n                    case 'Response Time':\n                        newValue = metrics.response_time || '--';\n                        break;\n                    case 'Uptime':\n                        newValue = metrics.uptime || '--';\n                        break;\n                    case 'Connected Clients':\n                        newValue = metrics.connected_clients || '--';\n                        break;\n                    case 'Operations/sec':\n                    case 'Ops/sec':\n                        newValue = metrics.ops_per_sec || '--';\n                        break;\n                    case 'Connection Time':\n                        newValue = metrics.connection_time || '--';\n                        break;\n                }\n                \n                // Add visual feedback when value changes\n                const oldValue = $value.text();\n                if (oldValue !== newValue) {\n                    $value.fadeOut(100, function() {\n                        $(this).text(newValue).fadeIn(100);\n                    });\n                } else {\n                    $value.text(newValue);\n                }\n            });\n            \n            // Update last updated timestamp\n            const now = new Date().toLocaleTimeString();\n            $('.metrics-last-updated').text(`Last updated: ${now}`);\n        }\n\n        // Escape HTML for safe display\n        escapeHtml(text) {\n            const div = document.createElement('div');\n            div.textContent = text;\n            return div.innerHTML;\n        }\n    }\n\n    // Initialize when document is ready\n    $(document).ready(() => {\n        // eslint-disable-next-line no-new\n        new AceRedisCacheAdmin();\n    });\n})(jQuery);\n"],"names":["constructor","options","this","containerSelector","saveButtonSelector","messageContainerSelector","onSave","isInitialized","hasUnsavedChanges","isSaving","stored","localStorage","getItem","autoSaveEnabled","isAutoSaveEnabled","setItem","e","isSuccess","message","elapsedTime","intervalId","originalFormData","init","createSaveBar","setupEventListeners","captureOriginalFormData","updateSaveButtonState","document","querySelector","saveBarHTML","body","insertAdjacentHTML","updateFixedPosition","$","on","setTimeout","checkForChanges","preventDefault","handleSave","toggleAutoSave","window","originalEvent","returnValue","wp","hooks","addAction","saveBar","adminMenuWrap","adminMenuWidth","offsetWidth","style","left","$form","getFormDataObject","formData","serializeArray","forEach","field","name","startsWith","key","replace","value","find","each","attr","is","currentData","hasChanges","JSON","stringify","setUnsavedChanges","startElapsedTimeTracking","handleAutoSave","stopElapsedTimeTracking","$button","$buttonText","$icon","prop","removeClass","text","addClass","setSaving","success","defaultSave","showMessage","setSuccess","error","console","log","Promise","resolve","ajax","url","ace_redis_admin","rest_url","type","beforeSend","xhr","setRequestHeader","rest_nonce","data","settings","nonce","response","updateMessageDisplay","clearMessage","$messageContainer","setInterval","updateElapsedTimeDisplay","clearInterval","timeText","formatElapsedTime","seconds","Math","floor","$toggle","ajax_url","jQuery","post","action","enabled","destroy","off","remove","AceRedisCacheSaveBar","SaveBar","AceRedisCacheAdmin","initTabs","initToggleSwitch","initCacheMode","initConnectionTest","initCacheManagement","initDiagnostics","initPerformanceMetrics","initAjaxForm","initFormValidation","initChangeTracking","initSaveBar","initialAuto","user_auto_save","saveSettingsViaSaveBar","autoSaveInterval","warn","performSaveSettings","testConnection","target","switchToTab","location","hash","handleHashChange","length","click","resumeAutoRefreshTimer","pauseAutoRefreshTimer","firstTab","first","$switch","$slider","siblings","toggleBlockCachingOption","cacheMode","val","$blockCachingRow","$blockCachingCheckbox","$transientRow","$transientCheckbox","show","toggle","testWriteRead","$btn","originalText","done","updateConnectionStatus","showConnectionError","fail","always","showNotification","write","read","$status","$size","$serverInfo","$serverType","$suggestions","status","sizeText","size","size_kb","debug_info","server_type","suggestions","suggestionsHtml","suggestion","html","slideDown","slideUp","clearAllCache","confirm","runDiagnostics","$results","diagnostics","Array","isArray","join","escapeHtml","validateForm","validateHost","validatePort","validateTTL","isValid","errors","trim","push","port","parseInt","ttl","$field","alert","stopPropagation","saveSettings","hasFormChanges","performOriginalSave","$messages","hide","statusText","responseText","errorMessage","responseJSON","complete","cssClass","fadeOut","hasClass","initAutoRefresh","loadPerformanceMetrics","autoRefreshInterval","countdownInterval","remainingSeconds","updateTimer","$timer","startAutoRefresh","selectedSeconds","updateMetricsDisplay","cache_hit_rate","total_keys","memory_usage","response_time","uptime","connected_clients","ops_per_sec","metrics","hits","debug_keyspace_hits","misses","debug_keyspace_misses","hit_rate","$card","$value","title","newValue","plugin_memory_total","$desc","parts","plugin_memory_page","plugin_memory_minified","plugin_memory_blocks","plugin_memory_transients","connection_time","fadeIn","now","Date","toLocaleTimeString","div","createElement","textContent","innerHTML","ready"],"sourceRoot":""}