{"version":3,"file":"admin.min.js","mappings":"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","sources":["webpack://ace-redis-cache/./assets/src/js/components/SaveBar.js","webpack://ace-redis-cache/./assets/src/js/admin.js"],"sourcesContent":["/**\n * SaveBar Component for Ace Redis Cache\n * \n * Inspired by GlossPress SaveBar - provides a fixed bottom save bar\n * with save status messages, unsaved changes tracking and immediate auto-save\n *\n * @package AceMedia\\RedisCache\n * @since 0.5.0\n */\n\n// Ensure `$` refers to jQuery even when WordPress runs in noConflict mode\n// eslint-disable-next-line no-undef\nconst $ = window.jQuery;\n\nclass SaveBar {\n    constructor(options = {}) {\n        this.options = {\n            containerSelector: '#ace-redis-settings-form',\n            saveButtonSelector: '#ace-redis-save-btn',\n            messageContainerSelector: '#ace-redis-messages',\n            onSave: null,\n            ...options\n        };\n\n        this.isInitialized = false;\n        this.hasUnsavedChanges = false;\n        this.isSaving = false;\n        // Determine auto-save preference from localStorage; default to enabled on first run\n        try {\n            const stored = localStorage.getItem('ace_redis_auto_save_enabled');\n            if (stored === null) {\n                // Allow an explicit initial option to set the first-run default\n                if (typeof this.options.autoSaveEnabled === 'boolean') {\n                    this.isAutoSaveEnabled = this.options.autoSaveEnabled;\n                } else {\n                    this.isAutoSaveEnabled = true; // sensible default\n                }\n                // Persist the initial choice\n                localStorage.setItem('ace_redis_auto_save_enabled', this.isAutoSaveEnabled ? '1' : '0');\n            } else {\n                this.isAutoSaveEnabled = (stored === '1');\n            }\n        } catch (e) {\n            // Fallback if storage not available\n            this.isAutoSaveEnabled = true;\n        }\n        this.isSuccess = false;\n        this.message = '';\n        this.elapsedTime = 0;\n        this.intervalId = null;\n        this.originalFormData = null;\n\n        this.init();\n    }\n\n    init() {\n        if (this.isInitialized) return;\n        \n        this.createSaveBar();\n        this.setupEventListeners();\n        this.captureOriginalFormData();\n        this.updateSaveButtonState();\n        this.isInitialized = true;\n    }\n\n    createSaveBar() {\n        // Check if SaveBar already exists\n        if (document.querySelector('.ace-redis-save-bar')) {\n            return;\n        }\n\n    const autoSaveToggle = this.isAutoSaveEnabled ? 'checked' : '';\n\n        const saveBarHTML = `\n            <div class=\"ace-redis-save-bar\">\n                <div class=\"save-bar-content\">\n                    <div class=\"save-bar-left\">\n                        <span class=\"save-message\"></span>\n                    </div>\n                    <div class=\"save-bar-right\">\n                        <div class=\"auto-save-toggle-wrapper\">\n                            <label class=\"ace-switch\" for=\"auto-save-toggle\">\n                                <input type=\"checkbox\" id=\"auto-save-toggle\" ${autoSaveToggle}>\n                                <span class=\"ace-slider\"></span>\n                            </label>\n                            <span class=\"toggle-label\">Auto-save</span>\n                        </div>\n                        <button type=\"button\" id=\"save-bar-button\" class=\"button button-primary\" disabled>\n                            <span class=\"dashicons dashicons-admin-settings\"></span>\n                            <span class=\"button-text\">Saved</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Insert SaveBar into DOM\n        document.body.insertAdjacentHTML('beforeend', saveBarHTML);\n        this.updateFixedPosition();\n    }\n\n    setupEventListeners() {\n        // Watch for form changes\n        $(this.options.containerSelector).on('input change', 'input, select, textarea', () => {\n            setTimeout(() => this.checkForChanges(), 10);\n        });\n\n        // SaveBar button click\n        $(document).on('click', '#save-bar-button', (e) => {\n            e.preventDefault();\n            this.handleSave();\n        });\n\n        // Auto-save toggle click\n        $(document).on('change', '#auto-save-toggle', () => {\n            this.toggleAutoSave();\n        });\n\n        // Window events for positioning\n        $(window).on('resize scroll load', () => this.updateFixedPosition());\n\n        // Prevent unsaved changes from being lost\n        $(window).on('beforeunload', (e) => {\n            if (this.hasUnsavedChanges && !this.isSaving) {\n                const message = 'You have unsaved changes. Are you sure you want to leave?';\n                e.originalEvent.returnValue = message;\n                return message;\n            }\n        });\n\n        // WordPress admin menu resize handling\n        if (window.wp && wp.hooks) {\n            wp.hooks.addAction('wp-collapse-menu', 'ace-redis-cache', () => {\n                setTimeout(() => this.updateFixedPosition(), 300);\n            });\n        }\n    }\n\n    updateFixedPosition() {\n        const saveBar = document.querySelector('.ace-redis-save-bar');\n        if (!saveBar) return;\n\n        const adminMenuWrap = document.querySelector('#adminmenuwrap');\n        if (adminMenuWrap) {\n            const adminMenuWidth = adminMenuWrap.offsetWidth;\n            saveBar.style.left = `${adminMenuWidth}px`;\n        }\n    }\n\n    captureOriginalFormData() {\n        const $form = $(this.options.containerSelector);\n        this.originalFormData = this.getFormDataObject($form);\n    }\n\n    getFormDataObject($form) {\n        const formData = {};\n        \n        $form.serializeArray().forEach(field => {\n            if (field.name.startsWith('ace_redis_cache_settings[')) {\n                const key = field.name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                formData[key] = field.value;\n            }\n        });\n\n        // Add checkbox values (unchecked boxes don't get serialized)\n        $form.find('input[type=\"checkbox\"]').each(function() {\n            const name = $(this).attr('name');\n            if (name && name.startsWith('ace_redis_cache_settings[')) {\n                const key = name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                formData[key] = $(this).is(':checked') ? '1' : '0';\n            }\n        });\n        \n        return formData;\n    }\n\n    checkForChanges() {\n        if (!this.originalFormData) return;\n        \n        const $form = $(this.options.containerSelector);\n        const currentData = this.getFormDataObject($form);\n        const hasChanges = JSON.stringify(this.originalFormData) !== JSON.stringify(currentData);\n        \n        this.setUnsavedChanges(hasChanges);\n    }\n\n    setUnsavedChanges(hasChanges) {\n        if (this.hasUnsavedChanges !== hasChanges) {\n            this.hasUnsavedChanges = hasChanges;\n            this.updateSaveButtonState();\n            \n            if (hasChanges) {\n                this.startElapsedTimeTracking();\n                // Auto-save immediately when changes are detected (if enabled)\n                if (this.isAutoSaveEnabled) {\n                    setTimeout(() => this.handleAutoSave(), 500); // Small delay to avoid rapid saves\n                }\n            } else {\n                this.stopElapsedTimeTracking();\n            }\n        }\n    }\n\n    updateSaveButtonState() {\n        const $button = $('#save-bar-button');\n        const $buttonText = $button.find('.button-text');\n        const $icon = $button.find('.dashicons');\n\n        if (this.isSaving) {\n            $button.prop('disabled', true).removeClass('success');\n            $buttonText.text('Saving...');\n            $icon.removeClass('dashicons-admin-settings dashicons-yes-alt').addClass('dashicons-update');\n        } else if (this.isSuccess) {\n            $button.prop('disabled', true).addClass('success');\n            $buttonText.text('Saved!');\n            $icon.removeClass('dashicons-admin-settings dashicons-update').addClass('dashicons-yes-alt');\n        } else if (this.hasUnsavedChanges) {\n            $button.prop('disabled', false).removeClass('success');\n            $buttonText.text('Save Changes');\n            $icon.removeClass('dashicons-update dashicons-yes-alt').addClass('dashicons-admin-settings');\n        } else {\n            $button.prop('disabled', true).removeClass('success');\n            $buttonText.text('Saved');\n            $icon.removeClass('dashicons-update dashicons-yes-alt').addClass('dashicons-admin-settings');\n        }\n    }\n\n    async handleSave() {\n        if (!this.hasUnsavedChanges || this.isSaving) return;\n\n        this.setSaving(true);\n        \n        try {\n            let success = false;\n            \n            if (this.options.onSave && typeof this.options.onSave === 'function') {\n                success = await this.options.onSave();\n            } else {\n                // Default save logic - trigger the original form save\n                success = await this.defaultSave();\n            }\n\n            if (success) {\n                this.showMessage('Settings saved successfully!', 'success');\n                this.setSuccess(true);\n                this.captureOriginalFormData();\n                this.setUnsavedChanges(false);\n                \n                // Clear success state after 3 seconds\n                setTimeout(() => this.setSuccess(false), 3000);\n            } else {\n                this.showMessage('Save failed. Please try again.', 'error');\n            }\n        } catch (error) {\n            console.error('Save error:', error);\n            this.showMessage('An error occurred while saving.', 'error');\n        } finally {\n            this.setSaving(false);\n        }\n    }\n\n    async handleAutoSave() {\n        if (!this.hasUnsavedChanges || this.isSaving) return;\n\n        console.log('[SaveBar] Auto-saving changes...');\n        this.showMessage('Auto-saving...', 'info');\n\n        try {\n            let success = false;\n            \n            if (this.options.onSave && typeof this.options.onSave === 'function') {\n                success = await this.options.onSave();\n            } else {\n                success = await this.defaultSave();\n            }\n\n            if (success) {\n                this.showMessage('Changes auto-saved!', 'success');\n                this.captureOriginalFormData();\n                this.setUnsavedChanges(false);\n            } else {\n                this.showMessage('Auto-save failed', 'error');\n            }\n        } catch (error) {\n            console.error('[SaveBar] Auto-save error:', error);\n            this.showMessage('Auto-save error occurred', 'error');\n        }\n    }\n\n    async defaultSave() {\n        return new Promise((resolve) => {\n            const $form = $(this.options.containerSelector);\n            const formData = this.getFormDataObject($form);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    settings: formData,\n                    nonce: ace_redis_admin.nonce\n                },\n                success: (response) => {\n                    resolve(response.success === true);\n                },\n                error: () => {\n                    resolve(false);\n                }\n            });\n        });\n    }\n\n    setSaving(isSaving) {\n        this.isSaving = isSaving;\n        this.updateSaveButtonState();\n    }\n\n    setSuccess(isSuccess) {\n        this.isSuccess = isSuccess;\n        this.updateSaveButtonState();\n    }\n\n    showMessage(message, type = 'info') {\n        this.message = message;\n        this.updateMessageDisplay(type);\n\n        // Start elapsed time tracking for success messages\n        if (type === 'success') {\n            this.startElapsedTimeTracking();\n        }\n\n        // Auto-hide messages after different intervals based on type\n        const hideDelay = type === 'error' ? 8000 : (type === 'success' ? 5000 : 3000);\n        setTimeout(() => {\n            this.clearMessage();\n        }, hideDelay);\n    }\n\n    updateMessageDisplay(type = 'info') {\n        const $messageContainer = $('.save-message');\n        \n        if (this.message) {\n            $messageContainer\n                .text(this.message)\n                .addClass('visible')\n                .removeClass('error success info')\n                .addClass(type);\n        } else {\n            $messageContainer\n                .removeClass('visible error success info')\n                .text('');\n        }\n    }\n\n    clearMessage() {\n        this.message = '';\n        this.updateMessageDisplay();\n        this.stopElapsedTimeTracking();\n    }\n\n    startElapsedTimeTracking() {\n        this.stopElapsedTimeTracking();\n        this.elapsedTime = 0;\n        \n        this.intervalId = setInterval(() => {\n            this.elapsedTime++;\n            this.updateElapsedTimeDisplay();\n        }, 1000);\n    }\n\n    stopElapsedTimeTracking() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = null;\n        }\n    }\n\n    updateElapsedTimeDisplay() {\n        if (this.elapsedTime > 0) {\n            const timeText = this.formatElapsedTime(this.elapsedTime);\n            $('.save-message').text(timeText);\n        }\n    }\n\n    formatElapsedTime(seconds) {\n        if (seconds < 60) return `${seconds}s ago`;\n        if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;\n        return `${Math.floor(seconds / 3600)}h ago`;\n    }\n\n    toggleAutoSave() {\n        const $toggle = $('#auto-save-toggle');\n    this.isAutoSaveEnabled = $toggle.is(':checked');\n        \n        if (this.isAutoSaveEnabled) {\n            this.showMessage('Auto-save enabled - changes will be saved automatically', 'success');\n        } else {\n            this.showMessage('Auto-save disabled - manual save required', 'info');\n        }\n        \n        // Store the preference\n        try {\n            localStorage.setItem('ace_redis_auto_save_enabled', this.isAutoSaveEnabled ? '1' : '0');\n        } catch (e) { /* ignore */ }\n\n        // Also persist per-user server-side so it survives devices/browsers\n        if (typeof ace_redis_admin !== 'undefined' && ace_redis_admin.ajax_url) {\n            try {\n                jQuery.post(ace_redis_admin.ajax_url, {\n                    action: 'ace_redis_toggle_autosave',\n                    nonce: ace_redis_admin.nonce,\n                    enabled: this.isAutoSaveEnabled ? 1 : 0\n                });\n            } catch (e) { /* ignore */ }\n        }\n    }\n\n    destroy() {\n        this.stopElapsedTimeTracking();\n        \n        // Remove event listeners\n        $(this.options.containerSelector).off('input change');\n        $(document).off('click', '#save-bar-button');\n        $(document).off('change', '#auto-save-toggle');\n        $(window).off('resize scroll load');\n        $(window).off('beforeunload');\n\n        // Remove SaveBar from DOM\n        $('.ace-redis-save-bar').remove();\n        \n        this.isInitialized = false;\n    }\n}\n\n// Export the SaveBar class as default for ES6 modules\nexport default SaveBar;\n","/**\n * Ace Redis Cache Admin JavaScript\n *\n * Handles admin interface interactions, AJAX requests,\n * and dynamic UI updates.\n *\n * @package AceMedia\\RedisCache\n * @since 0.5.0\n */\n\n// Import SaveBar component\nimport SaveBar from './components/SaveBar.js';\n\n(function($) {\n    'use strict';\n\n    // Make SaveBar available globally for WordPress integration\n    window.AceRedisCacheSaveBar = SaveBar;\n\n    // Main admin class\n    class AceRedisCacheAdmin {\n        constructor() {\n            this.originalFormData = null;\n            // State for Plugin Memory auto-fetch toggle and fetch in-flight guard\n            this.pluginMemoryAuto = false;\n            this.pluginMemoryFetching = false;\n            // Timestamp when transient cache was (re)enabled to allow warm-up grace\n            this.transientEnableTs = null;\n            this.init();\n        }\n\n        init() {\n            this.initTabs();\n            this.initToggleSwitch();\n            this.initEnableCacheUi();\n            this.initCacheMode();\n            this.initConnectionTest();\n            this.initCacheManagement();\n            this.initDiagnostics();\n            this.initPerformanceMetrics();\n            this.initAjaxForm();\n            this.initFormValidation();\n            this.initChangeTracking();\n            this.initSaveBar(); // Initialize the SaveBar component\n            this.initCompressionToggle();\n            this.initOpcacheHelpers();\n            this.initManagedPlugins();\n            this.initTransientHealth();\n            this.initHealthActions();\n        }\n\n        // Toggle UI based on Enable Cache switch\n        initEnableCacheUi() {\n            const update = () => {\n                const enabled = $('#enable_cache').is(':checked');\n                // Show/hide cache action buttons panel\n                const $actions = $('.cache-actions-panel .cache-action-buttons');\n                if ($actions.length) {\n                    $actions.toggle(!!enabled);\n                }\n                // Disable/enable diagnostics test buttons\n                $('#ace-redis-cache-test-btn').prop('disabled', !enabled);\n                $('#ace-redis-cache-test-write-btn').prop('disabled', !enabled);\n            };\n\n            // Initial state on load\n            update();\n            // React to changes\n            $(document).on('change', '#enable_cache', update);\n        }\n\n        // Initialize SaveBar component\n        initSaveBar() {\n            // Wait for SaveBar component to be available\n            if (typeof window.AceRedisCacheSaveBar !== 'undefined') {\n                // Read any prior preference to seed the component correctly\n                // Default: auto-save OFF unless user explicitly enabled before\n                let initialAuto = false;\n                if (typeof ace_redis_admin !== 'undefined' && ace_redis_admin.user_auto_save !== null) {\n                    initialAuto = !!ace_redis_admin.user_auto_save;\n                } else {\n                    try {\n                        const stored = localStorage.getItem('ace_redis_auto_save_enabled');\n                        if (stored !== null) initialAuto = (stored === '1');\n                    } catch (e) { /* ignore */ }\n                }\n\n                this.saveBar = new window.AceRedisCacheSaveBar({\n                    containerSelector: '#ace-redis-settings-form',\n                    saveButtonSelector: '#ace-redis-save-btn',\n                    messageContainerSelector: '#ace-redis-messages',\n                    onSave: () => this.saveSettingsViaSaveBar(),\n                    autoSaveEnabled: initialAuto,\n                    autoSaveInterval: 15000 // 15 seconds - shorter interval for better UX\n                });\n                console.log('SaveBar initialized successfully');\n            } else {\n                // Fallback if SaveBar component isn't loaded\n                console.warn('SaveBar component not loaded, falling back to standard save handling');\n            }\n        }\n\n        // Save settings specifically for SaveBar component\n        async saveSettingsViaSaveBar() {\n            try {\n                const success = await this.performSaveSettings();\n                \n                if (success) {\n                    // Refresh connection status after successful save\n                    setTimeout(() => {\n                        if (typeof this.testConnection === 'function') {\n                            this.testConnection();\n                        }\n                    }, 1000);\n                }\n                \n                return success;\n            } catch (error) {\n                console.error('SaveBar save error:', error);\n                return false;\n            }\n        }\n\n        // Extracted save logic that can be used by both SaveBar and regular form\n        async performSaveSettings() {\n            return new Promise((resolve) => {\n                const $form = $('#ace-redis-settings-form');\n                const formData = this.getFormDataObject();\n                // Inject managed plugins payload\n                formData.__managed_plugins = this.collectManagedPlugins();\n\n                $.ajax({\n                    url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                    type: 'POST',\n                    beforeSend: function(xhr) {\n                        xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                    },\n                    data: {\n                        settings: formData,\n                        nonce: ace_redis_admin.nonce\n                    },\n                    success: (response) => {\n                        if (response.success) {\n                            // Update the original form data for change tracking\n                            this.captureOriginalFormData();\n                            // Refresh transient cache health after save\n                            if ($('#enable_transient_cache').is(':checked')) {\n                                this.transientEnableTs = Date.now();\n                            } else {\n                                this.transientEnableTs = null;\n                            }\n                            setTimeout(() => this.refreshTransientHealth && this.refreshTransientHealth(), 300);\n                            resolve(true);\n                        } else {\n                            resolve(false);\n                        }\n                    },\n                    error: () => {\n                        resolve(false);\n                    }\n                });\n            });\n        }\n\n        // Collect managed plugin selections into compact object\n        collectManagedPlugins() {\n            const selections = {};\n            $('.ace-mp-enable').each(function(){\n                if ($(this).is(':checked')) {\n                    selections[$(this).data('plugin-file')] = { enabled_on_init: 1 };\n                }\n            });\n            return selections;\n        }\n\n        initManagedPlugins() {\n            // Nothing heavy needed; saving handled in performSaveSettings\n        }\n\n        // --- Transient Cache Health ---\n        initTransientHealth() {\n            const $toggle = $('#enable_transient_cache');\n            if (!$toggle.length) return;\n            // Initial fetch only (no toggle-triggered re-ping per request)\n            setTimeout(() => this.refreshTransientHealth(), 500);\n            // Keep a reference for polling interval\n            this.transientInitPoll = null;\n        }\n\n        refreshTransientHealth() {\n            const $badge = $('#ace-rc-transient-status');\n            const $tips = $('#ace-rc-transient-tips');\n            if (!$badge.length) return;\n            const enabled = $('#enable_transient_cache').is(':checked');\n            if (!enabled) {\n                this.setTransientStatus('Off','pending');\n                if ($tips.length) { $tips.html('<em>Transient cache disabled.</em>').data('populated', true); }\n                if (this.transientInitPoll) { clearInterval(this.transientInitPoll); this.transientInitPoll = null; }\n                return; // Skip network call when disabled\n            }\n            $badge.text('checking').css({background:'#ddd', color:'#333'});\n            if ($tips.length && !$tips.data('populated')) { $tips.html('Loading cache health…'); }\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/health',\n                type: 'GET',\n                beforeSend: (xhr) => xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce)\n            }).done((resp) => {\n                if (!resp || !resp.success || !resp.data) {\n                    this.setTransientStatus('error', 'error');\n                    if ($tips.length) { $tips.html('<span style=\"color:#c00;\">Unable to load cache health.</span>'); }\n                    return;\n                }\n                const d = resp.data;\n                let state = 'ok'; let label = 'OK';\n                if (!d.using_dropin) { state='warn'; label='Missing'; }\n                else if (!d.dropin_connected) { state='error'; label='Down'; }\n                else if (d.bypass) { state='warn'; label='Bypassed'; }\n                // Grace period: if recently enabled and not yet fully connected treat as initializing\n                const now = Date.now();\n                if (this.transientEnableTs && (now - this.transientEnableTs) < 15000) {\n                    if (state !== 'ok') { state = 'init'; label = 'Init'; }\n                }\n                this.setTransientStatus(label, state);\n                // Manage polling: if in init start interval, else clear\n                if (label === 'Init') {\n                    if (!this.transientInitPoll) {\n                        this.transientInitPoll = setInterval(() => {\n                            // Only poll if still enabled and badge shows Init\n                            if (!$('#enable_transient_cache').is(':checked')) { clearInterval(this.transientInitPoll); this.transientInitPoll = null; return; }\n                            const currentLabel = $('#ace-rc-transient-status').text();\n                            if (currentLabel !== 'Init') { clearInterval(this.transientInitPoll); this.transientInitPoll = null; return; }\n                            this.refreshTransientHealth();\n                        }, 10000); // 10s polling while initializing\n                    }\n                } else if (this.transientInitPoll) {\n                    clearInterval(this.transientInitPoll); this.transientInitPoll = null;\n                }\n                if ($tips.length) {\n                    const parts = [];\n                    parts.push('<strong>Drop-in:</strong> ' + (d.using_dropin ? (d.dropin_connected ? '<span style=\"color:green;\">connected</span>' : '<span style=\"color:#c00;\">not connected</span>') : '<span style=\"color:#c00;\">missing</span>'));\n                    if (d.bypass) parts.push('<span style=\"color:#c00;\">bypass active</span>');\n                    parts.push('Autoload ' + this.humanApproxBytes(d.autoload_size));\n                    if (d.slow_ops) parts.push(d.slow_ops + ' slow ops');\n                    if (d.error) parts.push('Error: <code>' + this.escapeHtml(d.error) + '</code>');\n                    let html = parts.join(' | ');\n                    if (Array.isArray(d.tips) && d.tips.length) {\n                        html += '<ul style=\"margin:6px 0 0 18px; list-style:disc;\">' + d.tips.map(t => '<li>' + this.escapeHtml(t) + '</li>').join('') + '</ul>';\n                    }\n                    if (state === 'init') {\n                        html = '<strong>Initializing:</strong> Deploying drop-in / establishing Redis connection. This can take a few seconds on first enable.<br>' + html;\n                    }\n                    $tips.html(html).data('populated', true);\n                }\n            }).fail(() => {\n                this.setTransientStatus('error', 'error');\n                if ($tips.length) { $tips.html('<span style=\"color:#c00;\">Health request failed.</span>'); }\n            });\n        }\n\n        setTransientStatus(text, state) {\n            const $badge = $('#ace-rc-transient-status'); if (!$badge.length) return;\n            const colors = { ok:{bg:'#46b450',fg:'#fff'}, warn:{bg:'#dba617',fg:'#1d2327'}, error:{bg:'#d63638',fg:'#fff'}, pending:{bg:'#888',fg:'#fff'}, init:{bg:'#2271b1',fg:'#fff'} };\n            const c = colors[state] || colors.pending;\n            $badge.text(text).css({background:c.bg, color:c.fg});\n        }\n\n        humanApproxBytes(bytes){ if(!bytes) return '0B'; const u=['B','KB','MB','GB','TB']; let i=0,v=bytes; while(v>=1024 && i<u.length-1){v/=1024;i++;} return (v>=10?Math.round(v):v.toFixed(1))+u[i]; }\n\n        initHealthActions() {\n            const $reset = $('#ace-rc-reset-slow-ops');\n            if ($reset.length) {\n                $reset.on('click', () => {\n                    // Simple REST shim via existing settings endpoint: send flag to reset\n                    $.ajax({\n                        url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                        type: 'POST',\n                        beforeSend: (xhr) => xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce),\n                        data: { reset_slow_ops: 1, nonce: ace_redis_admin.nonce },\n                        success: () => {\n                            $('#ace-rc-slow-ops-val').text('0');\n                        }\n                    });\n                });\n            }\n        }\n\n        // Initialize tab navigation\n        initTabs() {\n            // Handle tab clicks\n            $('.nav-tab').on('click', (e) => {\n                e.preventDefault();\n                const target = $(e.target).attr('href');\n                this.switchToTab(target);\n                \n                // Update URL hash\n                if (target.startsWith('#')) {\n                    window.location.hash = target;\n                }\n            });\n            \n            // Handle browser back/forward navigation\n            $(window).on('hashchange', () => {\n                this.handleHashChange();\n            });\n            \n            // Initialize tab based on URL hash on page load\n            this.handleHashChange();\n        }\n        \n        // Switch to a specific tab\n        switchToTab(target) {\n            if (!target || !$(target).length) {\n                return;\n            }\n            \n            // Update tab states\n            $('.nav-tab').removeClass('nav-tab-active');\n            $(`.nav-tab[href=\"${target}\"]`).addClass('nav-tab-active');\n\n            // Update content visibility with fade effect\n            $('.tab-content.active').removeClass('active');\n            setTimeout(() => {\n                $(target).addClass('active');\n                \n                // Load lightweight metrics when diagnostics tab is opened\n                if (target === '#diagnostics') {\n                    setTimeout(() => {\n                        this.loadPerformanceMetrics({ scope: 'basic' });\n                    }, 100);\n                    // Resume timer countdown if auto-refresh is enabled\n                    this.resumeAutoRefreshTimer();\n                } else {\n                    // Pause timer countdown when leaving diagnostics tab\n                    this.pauseAutoRefreshTimer();\n                }\n            }, 50); // Small delay to allow previous content to fade out\n        }\n        \n        // Handle URL hash changes\n        handleHashChange() {\n            let hash = window.location.hash;\n            \n            // If no hash or invalid hash, default to first tab\n            if (!hash || !$(hash).length) {\n                const firstTab = $('.nav-tab').first().attr('href');\n                if (firstTab) {\n                    hash = firstTab;\n                    // Don't update URL if we're defaulting to first tab\n                }\n            }\n            \n            // Switch to the tab if it exists\n            if (hash && $(hash).length) {\n                this.switchToTab(hash);\n            }\n        }\n\n        // Initialize toggle switches\n        initToggleSwitch() {\n            $('.ace-switch input').on('change', function() {\n                const $switch = $(this);\n                const $slider = $switch.siblings('.ace-slider');\n\n                // Add visual feedback\n                if ($switch.is(':checked')) {\n                    $slider.addClass('checked');\n                } else {\n                    $slider.removeClass('checked');\n                }\n            });\n        }\n\n        // Initialize cache controls (dual toggles)\n        initCacheMode() {\n            const toggleObjectRelatedOptions = () => {\n                const enabled = $('#enable_object_cache').is(':checked');\n                const $blockCachingRow = $('#block-caching-row');\n                const $transientRow = $('#transient-cache-row');\n                $blockCachingRow.toggle(!!enabled);\n                $transientRow.toggle(!!enabled);\n            };\n\n            const toggleTTLVisibility = () => {\n                const pageOn = $('#enable_page_cache').is(':checked');\n                const objOn = $('#enable_object_cache').is(':checked');\n                const $ttlPageWrap = $('#ttl_page').closest('.cache-type-options');\n                const $ttlObjWrap = $('#ttl_object').closest('.cache-type-options');\n                if ($ttlPageWrap.length) { $ttlPageWrap.toggle(!!pageOn); }\n                if ($ttlObjWrap.length) { $ttlObjWrap.toggle(!!objOn); }\n            };\n\n            // Initialize\n            toggleObjectRelatedOptions();\n            toggleTTLVisibility();\n\n            $('#enable_object_cache').on('change', function(){\n                toggleObjectRelatedOptions();\n                toggleTTLVisibility();\n            });\n            $('#enable_page_cache').on('change', function(){\n                toggleTTLVisibility();\n            });\n        }\n\n        // Hide/show compression sub-options when compression is disabled/enabled\n        initCompressionToggle() {\n            const updateCompressionUI = () => {\n                const enabled = $('#enable_compression').is(':checked');\n                const $field = $('#enable_compression').closest('.setting-field');\n                if ($field.length) {\n                    // Show/hide available methods\n                    $field.find('.compression-methods').toggle(!!enabled);\n                    // Show/hide the description immediately following the methods block\n                    $field.find('.compression-methods').next('p.description').toggle(!!enabled);\n                }\n            };\n            // Initial state\n            updateCompressionUI();\n            // React to changes\n            $(document).on('change', '#enable_compression', updateCompressionUI);\n        }\n\n        // OPcache helper buttons (reset / prime + status)\n        initOpcacheHelpers() {\n            if (!$('#enable_opcache_helpers').length) return; // feature not present\n            const $wrapper = $('#opcache-helper-buttons');\n            const $checkbox = $('#enable_opcache_helpers');\n            const updateVisibility = () => {\n                const on = $checkbox.is(':checked');\n                $wrapper.toggle(on);\n                if (on) {\n                    this.fetchOpcacheStatus();\n                }\n            };\n            $checkbox.on('change', updateVisibility);\n            updateVisibility();\n\n            $('#ace-redis-opcache-reset').on('click', (e) => {\n                e.preventDefault();\n                this.callOpcacheEndpoint('opcache-reset', e.currentTarget);\n            });\n            $('#ace-redis-opcache-prime').on('click', (e) => {\n                e.preventDefault();\n                this.callOpcacheEndpoint('opcache-prime', e.currentTarget);\n            });\n        }\n\n        callOpcacheEndpoint(endpoint, btn) {\n            const $btn = $(btn);\n            const original = $btn.text();\n            $btn.prop('disabled', true).text('Working...');\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/' + endpoint,\n                method: 'POST',\n                beforeSend: (xhr) => xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce),\n                data: { nonce: ace_redis_admin.nonce }\n            }).done((resp) => {\n                if (resp && resp.success) {\n                    let message = '✅ ' + (resp.message || 'Success');\n                    if (resp.files && resp.files.length) {\n                        message += '\\nFiles: ' + resp.files.join(', ');\n                    }\n                    alert(message);\n                    this.fetchOpcacheStatus();\n                } else {\n                    alert('❌ ' + (resp && resp.message ? resp.message : 'Failed'));\n                }\n            }).fail(() => {\n                alert('❌ Request failed');\n            }).always(() => {\n                $btn.prop('disabled', false).text(original);\n            });\n        }\n\n        fetchOpcacheStatus() {\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/opcache-status',\n                method: 'GET',\n                beforeSend: (xhr) => xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce)\n            }).done((resp) => {\n                if (resp && resp.success && resp.data) {\n                    const d = resp.data;\n                    let text = 'OPcache: ' + (d.enabled ? 'Enabled' : 'Disabled');\n                    if (d.cached_scripts !== null) {\n                        text += ' | Scripts: ' + d.cached_scripts;\n                    }\n                    if (d.hit_rate !== null) {\n                        const hr = parseFloat(d.hit_rate);\n                        if (!isNaN(hr)) text += ' | HitRate: ' + hr.toFixed(1) + '%';\n                    }\n                    let $inline = $('.opcache-status-inline');\n                    if (!$inline.length) {\n                        $inline = $('<span class=\"opcache-status-inline\" style=\"margin-left:8px; font-size:11px; opacity:0.8;\"></span>');\n                        $('#opcache-helper-buttons').append($inline);\n                    }\n                    $inline.text(text);\n                }\n            });\n        }\n\n        // Initialize connection testing\n        initConnectionTest() {\n            $('#ace-redis-cache-test-btn').on('click', (e) => {\n                e.preventDefault();\n                this.testConnection();\n            });\n\n            $('#ace-redis-cache-test-write-btn').on('click', (e) => {\n                e.preventDefault();\n                this.testWriteRead();\n            });\n        }\n\n        // Test Redis connection\n        testConnection() {\n            const $btn = $('#ace-redis-cache-test-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Testing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/test-connection\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.updateConnectionStatus(response.data);\n                    } else {\n                        this.showConnectionError(response.data || 'Connection failed');\n                    }\n                })\n                .fail(() => {\n                    this.showConnectionError('REST API request failed');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Test write/read operations\n        testWriteRead() {\n            const $btn = $('#ace-redis-cache-test-write-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Testing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/test-write-read\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(\n                            '✅ Write/Read Test Successful\\n' +\n                        `Write: ${response.data.write}\\n` +\n                        `Read: ${response.data.read}\\n` +\n                        `Value: ${response.data.value}`,\n                            'success'\n                        );\n                    } else {\n                        this.showNotification(`❌ Test failed: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ REST API request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Update connection status display\n        updateConnectionStatus(data) {\n            const $status = $('#ace-redis-cache-connection');\n            const $size = $('#ace-redis-cache-size');\n            const $serverInfo = $('#redis-server-info');\n            const $serverType = $('#redis-server-type');\n            const $suggestions = $('#redis-suggestions');\n\n            $status.text(data.status)\n                .removeClass('status-unknown status-error')\n                .addClass('status-success');\n\n            let sizeText = `${data.size} keys (${data.size_kb} KB)`;\n            if (data.debug_info) {\n                sizeText += ` - ${data.debug_info}`;\n            }\n            $size.text(sizeText);\n            \n            // Show server information if available\n            if (data.server_type || data.suggestions) {\n                $serverType.text(data.server_type || 'Unknown');\n                \n                // Display suggestions\n                if (data.suggestions && data.suggestions.length > 0) {\n                    let suggestionsHtml = '<p><strong>Recommendations:</strong></p><ul>';\n                    data.suggestions.forEach(suggestion => {\n                        suggestionsHtml += `<li>${suggestion}</li>`;\n                    });\n                    suggestionsHtml += '</ul>';\n                    $suggestions.html(suggestionsHtml);\n                } else {\n                    $suggestions.html('<p><strong>Recommendations:</strong> Configuration looks good ✅</p>');\n                }\n                \n                $serverInfo.slideDown(300);\n            }\n        }\n\n        // Show connection error\n        showConnectionError(message) {\n            const $status = $('#ace-redis-cache-connection');\n            const $size = $('#ace-redis-cache-size');\n            const $serverInfo = $('#redis-server-info');\n\n            $status.text(message)\n                .removeClass('status-unknown status-success')\n                .addClass('status-error');\n\n            $size.text('0 keys (0 KB)');\n            $serverInfo.slideUp(300);\n        }\n\n        // Initialize cache management\n        initCacheManagement() {\n            $('#ace-redis-cache-flush-btn').on('click', (e) => {\n                e.preventDefault();\n                this.clearAllCache();\n            });\n        }\n\n        // Clear all cache\n        clearAllCache() {\n            if (!confirm('Are you sure you want to clear all cache? This action cannot be undone.')) {\n                return;\n            }\n\n            const $btn = $('#ace-redis-cache-flush-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Clearing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/flush-cache\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce,\n                    type: 'all'\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(`✅ ${response.data.message || 'Cache cleared successfully'}`, 'success');\n                        $('#ace-redis-cache-size').text('0 keys (0 KB)');\n                    } else {\n                        this.showNotification(`❌ Failed to clear cache: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ REST API request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n    // Note: clearBlockCache removed; single Clear All handles all plugin-managed keys.\n\n        // Initialize diagnostics\n        initDiagnostics() {\n            $('#ace-redis-cache-diagnostics-btn').on('click', (e) => {\n                e.preventDefault();\n                this.runDiagnostics();\n            });\n        }\n\n        // Run system diagnostics\n        runDiagnostics() {\n            const $btn = $('#ace-redis-cache-diagnostics-btn');\n            const $results = $('#diagnostics-results');\n            const originalText = $btn.text();\n\n            $btn.text('Running...').prop('disabled', true);\n            $results.html('<p>⏳ Running comprehensive diagnostics...</p>');\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/diagnostics\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success && response.data) {\n                        const diagnostics = Array.isArray(response.data)\n                            ? response.data.join('\\n')\n                            : response.data;\n                        $results.html(`<pre>${this.escapeHtml(diagnostics)}</pre>`);\n                    } else {\n                        $results.html(`<p class=\"error\">❌ Failed to load diagnostics: ${response.data || 'Unknown error'}</p>`);\n                    }\n                })\n                .fail(() => {\n                    $results.html('<p class=\"error\">❌ Diagnostics REST API request failed</p>');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Initialize form validation\n        initFormValidation() {\n            $('#ace-redis-save-btn').on('click', (e) => {\n                if (!this.validateForm()) {\n                    e.preventDefault();\n                    return false;\n                }\n            });\n\n            // Real-time validation\n            $('#redis_host').on('blur', this.validateHost);\n            $('#redis_port').on('blur', this.validatePort);\n            $('#ttl_page, #ttl_object').on('blur', this.validateTTL);\n        }\n\n        // Validate form inputs\n        validateForm() {\n            let isValid = true;\n            const errors = [];\n\n            // Validate host\n            const host = $('#redis_host').val().trim();\n            if (!host) {\n                errors.push('Redis host is required');\n                isValid = false;\n            }\n\n            // Validate port\n            const port = parseInt($('#redis_port').val());\n            if (!port || port < 1 || port > 65535) {\n                errors.push('Redis port must be between 1 and 65535');\n                isValid = false;\n            }\n\n            // Validate TTL\n            const ttlPage = parseInt($('#ttl_page').val());\n            const ttlObj = parseInt($('#ttl_object').val());\n            if (!ttlPage || ttlPage < 60) {\n                errors.push('Page Cache TTL must be at least 60 seconds');\n                isValid = false;\n            }\n            if (!ttlObj || ttlObj < 60) {\n                errors.push('Object Cache TTL must be at least 60 seconds');\n                isValid = false;\n            }\n\n            if (!isValid) {\n                this.showNotification(`❌ Validation errors:\\n${errors.join('\\n')}`, 'error');\n            }\n\n            return isValid;\n        }\n\n        // Individual field validators\n        validateHost() {\n            const $field = $(this);\n            const value = $field.val().trim();\n\n            if (!value) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        validatePort() {\n            const $field = $(this);\n            const value = parseInt($field.val());\n\n            if (!value || value < 1 || value > 65535) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        validateTTL() {\n            const $field = $(this);\n            const value = parseInt($field.val());\n            if (!value || value < 60) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        // Show notification\n        showNotification(message, type = 'info') {\n            // Use native alert for now - can be enhanced later\n            alert(message);\n\n            // Future: Create toast notifications\n            // this.createToast(message, type);\n        }\n\n        // Initialize AJAX form submission\n        initAjaxForm() {\n            console.log('Initializing AJAX form...');\n            \n            // Handle form submission\n            $('#ace-redis-settings-form').on('submit', (e) => {\n                console.log('Form submit intercepted');\n                e.preventDefault();\n                e.stopPropagation();\n                this.saveSettings();\n                return false;\n            });\n            \n            // Also handle direct button click as backup\n            $('#ace-redis-save-btn').on('click', (e) => {\n                console.log('Save button clicked');\n                e.preventDefault();\n                e.stopPropagation();\n                this.saveSettings();\n                return false;\n            });\n        }\n\n        // Initialize change tracking for form fields\n        initChangeTracking() {\n            // Store original form data\n            setTimeout(() => {\n                // Store original button text\n                const $button = $('#ace-redis-save-btn');\n                if (!$button.data('original-text')) {\n                    $button.data('original-text', $button.val());\n                }\n                \n                this.captureOriginalFormData();\n                this.updateSaveButtonState();\n                \n                // Watch for changes\n                $('#ace-redis-settings-form input, #ace-redis-settings-form select, #ace-redis-settings-form textarea').on('input change', () => {\n                    setTimeout(() => this.updateSaveButtonState(), 10);\n                });\n            }, 100);\n        }\n        \n        // Capture original form data\n        captureOriginalFormData() {\n            this.originalFormData = this.getFormDataObject();\n        }\n        \n        // Check if form has changes\n        hasFormChanges() {\n            if (!this.originalFormData) return false;\n            \n            const currentData = this.getFormDataObject();\n            return JSON.stringify(this.originalFormData) !== JSON.stringify(currentData);\n        }\n        \n        // Update save button state based on changes\n        updateSaveButtonState() {\n            const $button = $('#ace-redis-save-btn');\n            const hasChanges = this.hasFormChanges();\n            \n            $button.prop('disabled', !hasChanges);\n            \n            if (!hasChanges) {\n                $button.val($button.data('original-text') || 'Save Changes (No Changes)');\n            } else {\n                $button.val($button.data('original-text') || 'Save Changes');\n            }\n        }\n        \n        // Get form data as object\n        getFormDataObject() {\n            const $form = $('#ace-redis-settings-form');\n            const formData = {};\n            \n            $form.serializeArray().forEach(field => {\n                if (field.name.startsWith('ace_redis_cache_settings[')) {\n                    const key = field.name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                    formData[key] = field.value;\n                }\n            });\n\n            // Add checkbox values (unchecked boxes don't get serialized)\n            $form.find('input[type=\"checkbox\"]').each(function() {\n                const name = $(this).attr('name');\n                if (name && name.startsWith('ace_redis_cache_settings[')) {\n                    const key = name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                    formData[key] = $(this).is(':checked') ? '1' : '0';\n                }\n            });\n            \n            return formData;\n        }\n\n        // Save settings via REST API\n        saveSettings() {\n            // Check if SaveBar is handling saves\n            if (this.saveBar) {\n                // Let SaveBar handle the save\n                this.saveBar.handleSave();\n                return;\n            }\n            \n            // Fallback to original save logic\n            this.performOriginalSave();\n        }\n\n        // Original save method for backward compatibility\n        performOriginalSave() {\n            // Check for changes first\n            if (!this.hasFormChanges()) {\n                this.showMessage('Error: Failed to save settings. No changes detected or database error.', 'error');\n                return;\n            }\n            \n            const $form = $('#ace-redis-settings-form');\n            const $button = $('#ace-redis-save-btn');\n            const $messages = $('#ace-redis-messages');\n            \n            console.log('REST API Save triggered...');\n            \n            // Show loading state\n            const originalText = $button.val();\n            $button.val('Saving...').prop('disabled', true);\n            $messages.hide();\n\n            // Get form data\n            const formData = this.getFormDataObject();\n\n            console.log('Sending data:', formData);\n            console.log('REST URL:', ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings');\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                    console.log('Set REST nonce:', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    settings: formData,\n                    nonce: ace_redis_admin.nonce\n                },\n                success: (response) => {\n                    console.log('Success response:', response);\n                    if (response.success) {\n                        this.showMessage(response.message || 'Settings saved successfully!', 'success');\n                        \n                        // Update original form data and button state\n                        this.captureOriginalFormData();\n                        this.updateSaveButtonState();\n                        \n                        // Refresh connection status after save\n                        setTimeout(() => {\n                            if (typeof this.testConnection === 'function') {\n                                this.testConnection();\n                            }\n                        }, 1000);\n                    } else {\n                        this.showMessage(response.message || 'Failed to save settings', 'error');\n                    }\n                },\n                error: (xhr, status, error) => {\n                    console.error('Save error:', {\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                        responseText: xhr.responseText,\n                        error: error\n                    });\n                    \n                    let errorMessage = 'Network error occurred';\n                    \n                    if (xhr.responseJSON && xhr.responseJSON.message) {\n                        errorMessage = xhr.responseJSON.message;\n                    } else if (xhr.status === 504) {\n                        errorMessage = 'Gateway timeout - settings may still be saved. Please refresh the page.';\n                    } else if (xhr.status === 403) {\n                        errorMessage = 'Permission denied. Please refresh the page and try again.';\n                    } else if (xhr.status === 404) {\n                        errorMessage = 'REST API endpoint not found. The plugin may not be properly configured.';\n                    } else {\n                        errorMessage = `${error} (Status: ${xhr.status})`;\n                    }\n                    \n                    this.showMessage('Error: ' + errorMessage, 'error');\n                },\n                complete: () => {\n                    // Reset button state\n                    $button.val(originalText).prop('disabled', false);\n                }\n            });\n        }\n\n        // Show success/error message\n        showMessage(message, type = 'success') {\n            const $messages = $('#ace-redis-messages');\n            const cssClass = type === 'success' ? 'notice-success' : 'notice-error';\n            \n            $messages.html(`\n                <div class=\"notice ${cssClass} is-dismissible\">\n                    <p>${this.escapeHtml(message)}</p>\n                    <button type=\"button\" class=\"notice-dismiss\">\n                        <span class=\"screen-reader-text\">Dismiss this notice.</span>\n                    </button>\n                </div>\n            `).show();\n\n            // Auto-hide success messages after 5 seconds\n            if (type === 'success') {\n                setTimeout(() => {\n                    $messages.fadeOut();\n                }, 5000);\n            }\n\n            // Handle dismiss button\n            $messages.find('.notice-dismiss').on('click', function() {\n                $messages.fadeOut();\n            });\n        }\n\n        // Initialize performance metrics\n        initPerformanceMetrics() {\n            // Load lightweight metrics immediately if diagnostics tab is active\n            if ($('#diagnostics').hasClass('active')) {\n                setTimeout(() => {\n                    this.loadPerformanceMetrics({ scope: 'basic' });\n                }, 100);\n            }\n            \n            // Initialize auto-refresh functionality\n            this.initAutoRefresh();\n            \n            // Manual refresh button (light metrics only)\n            $('#refresh-metrics-btn').on('click', () => {\n                this.loadPerformanceMetrics({ scope: 'basic' });\n                // Visual feedback for manual refresh\n                const $btn = $('#refresh-metrics-btn');\n                $btn.prop('disabled', true).html('⏳');\n                setTimeout(() => {\n                    $btn.prop('disabled', false).html('🔄');\n                }, 1000);\n            });\n\n            // Make Plugin Memory button a toggle for auto-fetch\n            $('#performance-metrics').on('click', '.fetch-plugin-memory', (e) => {\n                e.preventDefault();\n                // If cache disabled, ignore (annotateCacheDisabled handles disabling UI)\n                const isDisabled = $(e.currentTarget).is(':disabled');\n                if (isDisabled) return;\n\n                this.pluginMemoryAuto = !this.pluginMemoryAuto;\n                this.updatePluginMemoryToggleUI();\n\n                // On enable, immediately compute once\n                if (this.pluginMemoryAuto) {\n                    this.fetchPluginMemory(true);\n                }\n            });\n        }\n        \n        // Initialize auto-refresh functionality\n        initAutoRefresh() {\n            // Store references at class level\n            this.autoRefreshInterval = null;\n            this.countdownInterval = null;\n            this.remainingSeconds = 0;\n            \n            const updateTimer = () => {\n                const $timer = $('#refresh-timer');\n                if (this.remainingSeconds > 0) {\n                    $timer.text(`Next refresh in ${this.remainingSeconds}s`);\n                    this.remainingSeconds--;\n                } else {\n                    $timer.text('');\n                }\n            };\n            \n            this.startAutoRefresh = (seconds) => {\n                // Clear existing intervals\n                if (this.autoRefreshInterval) {\n                    clearInterval(this.autoRefreshInterval);\n                }\n                if (this.countdownInterval) {\n                    clearInterval(this.countdownInterval);\n                }\n                \n                const $timer = $('#refresh-timer');\n                \n                if (seconds > 0) {\n                    this.remainingSeconds = seconds;\n                    \n                    // Start countdown timer\n                    this.countdownInterval = setInterval(updateTimer, 1000);\n                    \n                    // Start auto-refresh timer\n                    this.autoRefreshInterval = setInterval(() => {\n                        // Only refresh if diagnostics tab is active\n                        if ($('#diagnostics').hasClass('active')) {\n                            // Use lightweight metrics for auto-refresh\n                            this.loadPerformanceMetrics({ scope: 'basic' });\n                            this.remainingSeconds = seconds; // Reset countdown\n                        }\n                    }, seconds * 1000);\n                    \n                    updateTimer(); // Show initial timer\n                } else {\n                    $timer.text('');\n                }\n            };\n            \n            // Handle dropdown change\n            $('#auto-refresh-select').on('change', () => {\n                const seconds = parseInt($('#auto-refresh-select').val());\n                this.startAutoRefresh(seconds);\n            });\n            \n            // Start with default value (30 seconds)\n            this.startAutoRefresh(30);\n        }\n        \n        // Pause auto-refresh timer (when leaving diagnostics tab)\n        pauseAutoRefreshTimer() {\n            if (this.countdownInterval) {\n                clearInterval(this.countdownInterval);\n            }\n            $('#refresh-timer').text('');\n        }\n        \n        // Resume auto-refresh timer (when entering diagnostics tab)\n        resumeAutoRefreshTimer() {\n            const selectedSeconds = parseInt($('#auto-refresh-select').val());\n            if (selectedSeconds > 0) {\n                // Restart the timer to show countdown immediately\n                this.startAutoRefresh(selectedSeconds);\n            }\n        }\n\n        // Load performance metrics via REST API\n        loadPerformanceMetrics(options = {}) {\n            // Safety check - only load if diagnostics tab is active\n            if (!$('#diagnostics').hasClass('active')) {\n                return;\n            }\n            const scope = options.scope || 'basic';\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/metrics',\n                type: 'GET',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: { scope },\n                success: (response) => {\n                    // Double-check we're still on the diagnostics tab when response comes back\n                    if (!$('#diagnostics').hasClass('active')) {\n                        return;\n                    }\n                    \n                    if (response && response.data) {\n                        const data = response.data;\n                        this.updateMetricsDisplay(data, scope);\n                        // If cache is disabled, annotate notes and disable per-card fetch\n                        if (data.cache_enabled === false || response.message === 'Cache is disabled') {\n                            this.annotateCacheDisabled();\n                        } else {\n                            // If auto mode is on, also fetch plugin memory without wiping existing values\n                            if (this.pluginMemoryAuto) {\n                                this.fetchPluginMemory(false);\n                            }\n                        }\n                    } else if (response.data) {\n                        // Even on error, use the fallback data provided\n                        this.updateMetricsDisplay(response.data, scope);\n                        if (this.pluginMemoryAuto) {\n                            this.fetchPluginMemory(false);\n                        }\n                    }\n                },\n                error: () => {\n                    // Use fallback metrics on error\n                    this.updateMetricsDisplay({\n                        cache_hit_rate: '--',\n                        total_keys: '--',\n                        memory_usage: '--',\n                        response_time: '--',\n                        uptime: '--',\n                        connected_clients: '--',\n                        ops_per_sec: '--'\n                    }, scope);\n                    if (this.pluginMemoryAuto) {\n                        this.fetchPluginMemory(false);\n                    }\n                }\n            });\n        }\n\n    // Update metrics display\n        updateMetricsDisplay(metrics, scope = 'basic') {\n            // Add debug logging for keyspace stats\n            console.log('Debug keyspace stats:', {\n                hits: metrics.debug_keyspace_hits,\n                misses: metrics.debug_keyspace_misses,\n                hit_rate: metrics.cache_hit_rate\n            });\n            // Show scope label (light/basic vs full)\n            const $scopeLabel = $('#metrics-scope-label');\n            if ($scopeLabel.length) {\n                $scopeLabel.text(`(${scope === 'full' ? 'full' : 'light'})`);\n            }\n            \n            $('#performance-metrics .metric-card').each(function() {\n                const $card = $(this);\n                const $value = $card.find('.metric-value');\n                const title = $card.find('h4').text();\n                const metricKey = $card.data('metric');\n                let newValue = '--';\n                \n                switch (title) {\n                    case 'Cache Hit Rate':\n                        newValue = metrics.cache_hit_rate || '--';\n                        break;\n                    case 'Total Keys':\n                        newValue = metrics.total_keys || '--';\n                        break;\n                    case 'Memory Usage':\n                        newValue = metrics.memory_usage || '--';\n                        break;\n                    case 'Plugin Memory':\n                        // Do not overwrite existing value if the payload doesn't include plugin memory data\n                        if (typeof metrics.plugin_memory_total !== 'undefined' && metrics.plugin_memory_total !== null && metrics.plugin_memory_total !== '') {\n                            newValue = metrics.plugin_memory_total;\n                        } else {\n                            newValue = $value.text() || '--';\n                        }\n                        // Also update breakdown if available, without overwriting the base description\n                        const $breakdown = $card.find('.metric-breakdown');\n                        if (typeof metrics.plugin_memory_total !== 'undefined') {\n                            const parts = [];\n                            if (metrics.plugin_memory_page) parts.push(`Page ${metrics.plugin_memory_page}`);\n                            if (metrics.plugin_memory_minified) parts.push(`Minified ${metrics.plugin_memory_minified}`);\n                            if (metrics.plugin_memory_blocks) parts.push(`Blocks ${metrics.plugin_memory_blocks}`);\n                            if (metrics.plugin_memory_transients) parts.push(`Transients ${metrics.plugin_memory_transients}`);\n                            if ($breakdown.length) {\n                                $breakdown.text(parts.length ? ` | ${parts.join(' | ')}` : '');\n                            }\n                        }\n                        break;\n                    case 'Response Time':\n                        newValue = metrics.response_time || '--';\n                        break;\n                    case 'Uptime':\n                        newValue = metrics.uptime || '--';\n                        break;\n                    case 'Connected Clients':\n                        newValue = metrics.connected_clients || '--';\n                        break;\n                    case 'Operations/sec':\n                    case 'Ops/sec':\n                        newValue = (metrics.ops_per_sec === 0) ? '0' : (metrics.ops_per_sec != null ? metrics.ops_per_sec : '--');\n                        break;\n                    case 'Connection Time':\n                        newValue = metrics.connection_time || '--';\n                        break;\n                }\n                \n                // Add visual feedback when value changes\n                const oldValue = $value.text();\n                if (oldValue !== newValue) {\n                    $value.fadeOut(100, function() {\n                        $(this).text(newValue).fadeIn(100);\n                    });\n                } else {\n                    $value.text(newValue);\n                }\n\n                // Annotate missing values with reasons where possible\n                const $note = $card.find('.metric-note');\n                if ($note.length) {\n                    if (newValue === '--') {\n                        let reason = '';\n                        // Always light mode now\n                            reason = 'light mode';\n                        // Special instruction for plugin memory card\n                        if (metricKey === 'plugin_memory') {\n                            // If auto mode is enabled, annotate accordingly; otherwise prompt for fetch\n                            if (this.pluginMemoryAuto) {\n                                $note.text('auto mode (updated periodically)').show();\n                            } else {\n                                $note.text('Click Fetch to compute plugin memory').show();\n                            }\n                            return; // Skip generic reason\n                        }\n                        // For known restricted providers, indicate a possible restriction\n                        // We can heuristically show this if memory/uptime/clients are missing\n                        if (metricKey === 'memory_usage' || metricKey === 'uptime' || metricKey === 'connected_clients') {\n                            reason = reason ? `${reason}; provider restrictions` : 'provider restrictions';\n                        }\n                        $note.text(reason).show();\n                    } else {\n                        $note.text('').hide();\n                    }\n                }\n            });\n            \n            // Update last updated timestamp\n            const now = new Date().toLocaleTimeString();\n            $('.metrics-last-updated').text(`Last updated: ${now}`);\n        }\n\n        // When cache is disabled, reflect that in the UI and prevent heavy fetch actions\n        annotateCacheDisabled() {\n            // Note on all metric cards\n            $('#performance-metrics .metric-card').each(function() {\n                const $card = $(this);\n                const $note = $card.find('.metric-note');\n                if ($note.length) {\n                    $note.text('cache disabled').show();\n                }\n            });\n            // Disable per-card plugin memory fetch\n            const $fetchBtn = $('#performance-metrics .fetch-plugin-memory');\n            if ($fetchBtn.length) {\n                $fetchBtn.prop('disabled', true).attr('title', 'Enable cache to compute plugin memory');\n            }\n            // Turn off auto mode since cache is off\n            this.pluginMemoryAuto = false;\n            this.updatePluginMemoryToggleUI();\n        }\n\n        // Update the Plugin Memory toggle button UI to reflect auto mode\n        updatePluginMemoryToggleUI() {\n            const $btn = $('#performance-metrics .fetch-plugin-memory');\n            if (!$btn.length) return;\n            if ($btn.is(':disabled')) return;\n            if (this.pluginMemoryAuto) {\n                $btn.text('Auto: On').addClass('is-on').attr('title', 'Disable auto plugin memory refresh');\n            } else {\n                $btn.text('Fetch').removeClass('is-on').attr('title', 'Fetch plugin memory and enable auto refresh');\n            }\n        }\n\n        // Fetch plugin memory metrics (manual or auto), without wiping existing values\n        fetchPluginMemory(showSpinner = true) {\n            if (this.pluginMemoryFetching) return;\n            const $card = $('#performance-metrics .metric-card[data-metric=\"plugin_memory\"]');\n            if (!$card.length) return;\n            const $spinner = $card.find('.plugin-memory-spinner');\n            const $value = $card.find('[data-field=\"plugin_memory_total\"]');\n            const $breakdown = $card.find('.metric-breakdown');\n            const $note = $card.find('.metric-note');\n\n            if (showSpinner) {\n                $spinner.css('visibility', 'visible');\n                $note.text(this.pluginMemoryAuto ? 'Auto computing…' : 'Computing…').show();\n            }\n            // Do not clear existing value/breakdown; we will update in place\n\n            this.pluginMemoryFetching = true;\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/plugin-memory',\n                type: 'GET',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                }\n            })\n            .done((resp) => {\n                if (resp && resp.success) {\n                    const d = resp.data || {};\n                    if (d.plugin_memory_total) {\n                        $value.text(d.plugin_memory_total);\n                    }\n                    const keyParts = [];\n                    if (d.plugin_page_keys != null) keyParts.push(`pages: ${d.plugin_page_keys}`);\n                    if (d.plugin_block_keys != null) keyParts.push(`blocks: ${d.plugin_block_keys}`);\n                    if (d.plugin_total_keys != null) keyParts.push(`total keys: ${d.plugin_total_keys}`);\n\n                    const memParts = [];\n                    if (d.plugin_memory_page) memParts.push(`pages ${d.plugin_memory_page}`);\n                    if (d.plugin_memory_minified) memParts.push(`minified ${d.plugin_memory_minified}`);\n                    if (d.plugin_memory_blocks) memParts.push(`blocks ${d.plugin_memory_blocks}`);\n                    if (d.plugin_memory_transients) memParts.push(`transients ${d.plugin_memory_transients}`);\n\n                    const text = [keyParts.join(', '), memParts.join(', ')].filter(Boolean).join(' | ');\n                    if (text) $breakdown.text(text);\n                    const now = new Date().toLocaleTimeString();\n                    $note.text(this.pluginMemoryAuto ? `auto updated ${now}` : 'Computed just now').show();\n                } else {\n                    $note.text((resp && resp.message) ? resp.message : 'Failed to fetch').show();\n                }\n            })\n            .fail(() => {\n                $note.text('Failed to fetch').show();\n            })\n            .always(() => {\n                this.pluginMemoryFetching = false;\n                if (showSpinner) $spinner.css('visibility', 'hidden');\n            });\n        }\n\n        // Escape HTML for safe display\n        escapeHtml(text) {\n            const div = document.createElement('div');\n            div.textContent = text;\n            return div.innerHTML;\n        }\n    }\n\n    // Initialize when document is ready\n    $(document).ready(() => {\n        // eslint-disable-next-line no-new\n        new AceRedisCacheAdmin();\n    });\n})(jQuery);\n"],"names":["$","window","jQuery","constructor","options","this","containerSelector","saveButtonSelector","messageContainerSelector","onSave","isInitialized","hasUnsavedChanges","isSaving","stored","localStorage","getItem","autoSaveEnabled","isAutoSaveEnabled","setItem","e","isSuccess","message","elapsedTime","intervalId","originalFormData","init","createSaveBar","setupEventListeners","captureOriginalFormData","updateSaveButtonState","document","querySelector","saveBarHTML","body","insertAdjacentHTML","updateFixedPosition","on","setTimeout","checkForChanges","preventDefault","handleSave","toggleAutoSave","originalEvent","returnValue","wp","hooks","addAction","saveBar","adminMenuWrap","adminMenuWidth","offsetWidth","style","left","$form","getFormDataObject","formData","serializeArray","forEach","field","name","startsWith","key","replace","value","find","each","attr","is","currentData","hasChanges","JSON","stringify","setUnsavedChanges","startElapsedTimeTracking","handleAutoSave","stopElapsedTimeTracking","$button","$buttonText","$icon","prop","removeClass","text","addClass","setSaving","success","defaultSave","showMessage","setSuccess","error","console","log","Promise","resolve","ajax","url","ace_redis_admin","rest_url","type","beforeSend","xhr","setRequestHeader","rest_nonce","data","settings","nonce","response","updateMessageDisplay","clearMessage","$messageContainer","setInterval","updateElapsedTimeDisplay","clearInterval","timeText","formatElapsedTime","seconds","Math","floor","$toggle","ajax_url","post","action","enabled","destroy","off","remove","AceRedisCacheSaveBar","SaveBar","AceRedisCacheAdmin","pluginMemoryAuto","pluginMemoryFetching","transientEnableTs","initTabs","initToggleSwitch","initEnableCacheUi","initCacheMode","initConnectionTest","initCacheManagement","initDiagnostics","initPerformanceMetrics","initAjaxForm","initFormValidation","initChangeTracking","initSaveBar","initCompressionToggle","initOpcacheHelpers","initManagedPlugins","initTransientHealth","initHealthActions","update","$actions","length","toggle","initialAuto","user_auto_save","saveSettingsViaSaveBar","autoSaveInterval","warn","performSaveSettings","testConnection","__managed_plugins","collectManagedPlugins","Date","now","refreshTransientHealth","selections","enabled_on_init","transientInitPoll","$badge","$tips","setTransientStatus","html","css","background","color","done","resp","d","state","label","using_dropin","dropin_connected","bypass","parts","push","humanApproxBytes","autoload_size","slow_ops","escapeHtml","join","Array","isArray","tips","map","t","fail","colors","ok","bg","fg","pending","c","bytes","u","i","v","round","toFixed","$reset","reset_slow_ops","target","switchToTab","location","hash","handleHashChange","loadPerformanceMetrics","scope","resumeAutoRefreshTimer","pauseAutoRefreshTimer","firstTab","first","$switch","$slider","siblings","toggleObjectRelatedOptions","$blockCachingRow","$transientRow","toggleTTLVisibility","pageOn","objOn","$ttlPageWrap","closest","$ttlObjWrap","updateCompressionUI","$field","next","$wrapper","$checkbox","updateVisibility","fetchOpcacheStatus","callOpcacheEndpoint","currentTarget","endpoint","btn","$btn","original","method","files","alert","always","cached_scripts","hit_rate","hr","parseFloat","isNaN","$inline","append","testWriteRead","originalText","updateConnectionStatus","showConnectionError","showNotification","write","read","$status","$size","$serverInfo","$serverType","$suggestions","status","sizeText","size","size_kb","debug_info","server_type","suggestions","suggestionsHtml","suggestion","slideDown","slideUp","clearAllCache","confirm","runDiagnostics","$results","diagnostics","validateForm","validateHost","validatePort","validateTTL","isValid","errors","val","trim","port","parseInt","ttlPage","ttlObj","stopPropagation","saveSettings","hasFormChanges","performOriginalSave","$messages","hide","statusText","responseText","errorMessage","responseJSON","complete","cssClass","show","fadeOut","hasClass","initAutoRefresh","updatePluginMemoryToggleUI","fetchPluginMemory","autoRefreshInterval","countdownInterval","remainingSeconds","updateTimer","$timer","startAutoRefresh","selectedSeconds","updateMetricsDisplay","cache_enabled","annotateCacheDisabled","cache_hit_rate","total_keys","memory_usage","response_time","uptime","connected_clients","ops_per_sec","metrics","hits","debug_keyspace_hits","misses","debug_keyspace_misses","$scopeLabel","$card","$value","title","metricKey","newValue","plugin_memory_total","$breakdown","plugin_memory_page","plugin_memory_minified","plugin_memory_blocks","plugin_memory_transients","connection_time","fadeIn","$note","reason","toLocaleTimeString","$fetchBtn","showSpinner","$spinner","keyParts","plugin_page_keys","plugin_block_keys","plugin_total_keys","memParts","filter","Boolean","div","createElement","textContent","innerHTML","ready"],"sourceRoot":""}