{"version":3,"file":"admin.min.js","mappings":"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","sources":["webpack://ace-redis-cache/./assets/src/js/components/SaveBar.js","webpack://ace-redis-cache/./assets/src/js/admin.js"],"sourcesContent":["/**\n * SaveBar Component for Ace Redis Cache\n * \n * Inspired by GlossPress SaveBar - provides a fixed bottom save bar\n * with save status messages, auto-save toggle, and unsaved changes tracking\n *\n * @package AceMedia\\RedisCache\n * @since 0.5.0\n */\n\nclass SaveBar {\n    constructor(options = {}) {\n        this.options = {\n            containerSelector: '#ace-redis-settings-form',\n            saveButtonSelector: '#ace-redis-save-btn',\n            messageContainerSelector: '#ace-redis-messages',\n            onSave: null,\n            autoSaveEnabled: false,\n            autoSaveInterval: 30000, // 30 seconds\n            ...options\n        };\n\n        this.isInitialized = false;\n        this.hasUnsavedChanges = false;\n        this.isSaving = false;\n        this.isSuccess = false;\n        this.message = '';\n        this.elapsedTime = 0;\n        this.intervalId = null;\n        this.autoSaveIntervalId = null;\n        this.originalFormData = null;\n\n        this.init();\n    }\n\n    init() {\n        if (this.isInitialized) return;\n        \n        this.createSaveBar();\n        this.setupEventListeners();\n        this.captureOriginalFormData();\n        this.updateSaveButtonState();\n        this.isInitialized = true;\n    }\n\n    createSaveBar() {\n        // Check if SaveBar already exists\n        if (document.querySelector('.ace-redis-save-bar')) {\n            return;\n        }\n\n        // Load auto-save preference from localStorage\n        const savedAutoSave = localStorage.getItem('ace_redis_cache_auto_save_enabled');\n        if (savedAutoSave !== null) {\n            this.options.autoSaveEnabled = savedAutoSave === '1';\n        }\n\n        const saveBarHTML = `\n            <div class=\"ace-redis-save-bar\">\n                <div class=\"save-bar-content\">\n                    <div class=\"save-bar-left\">\n                        <span class=\"save-message\"></span>\n                    </div>\n                    <div class=\"save-bar-right\">\n                        <div class=\"auto-save-toggle\">\n                            <label>\n                                <input type=\"checkbox\" id=\"auto-save-toggle\" ${this.options.autoSaveEnabled ? 'checked' : ''}>\n                                <span class=\"toggle-slider\"></span>\n                                Auto Save (${this.options.autoSaveInterval / 1000}s)\n                            </label>\n                        </div>\n                        <button type=\"button\" id=\"save-bar-button\" class=\"button button-primary\" disabled>\n                            <span class=\"dashicons dashicons-admin-settings\"></span>\n                            <span class=\"button-text\">Saved</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Insert SaveBar into DOM\n        document.body.insertAdjacentHTML('beforeend', saveBarHTML);\n        this.updateFixedPosition();\n        \n        // Initialize auto-save if enabled\n        if (this.options.autoSaveEnabled) {\n            this.startAutoSave();\n        }\n    }\n\n    setupEventListeners() {\n        // Watch for form changes\n        $(this.options.containerSelector).on('input change', 'input, select, textarea', () => {\n            setTimeout(() => this.checkForChanges(), 10);\n        });\n\n        // SaveBar button click\n        $(document).on('click', '#save-bar-button', (e) => {\n            e.preventDefault();\n            this.handleSave();\n        });\n\n        // Auto-save toggle\n        $(document).on('change', '#auto-save-toggle', (e) => {\n            this.options.autoSaveEnabled = e.target.checked;\n            this.toggleAutoSave();\n            \n            // Save auto-save preference to localStorage\n            localStorage.setItem('ace_redis_cache_auto_save_enabled', this.options.autoSaveEnabled ? '1' : '0');\n            \n            // Show feedback message\n            if (this.options.autoSaveEnabled) {\n                this.showMessage(`Auto-save enabled! Changes will be saved every ${this.options.autoSaveInterval / 1000} seconds.`, 'info');\n            } else {\n                this.showMessage('Auto-save disabled.', 'info');\n            }\n        });\n\n        // Window events for positioning\n        $(window).on('resize scroll load', () => this.updateFixedPosition());\n\n        // Prevent unsaved changes from being lost\n        $(window).on('beforeunload', (e) => {\n            if (this.hasUnsavedChanges && !this.isSaving) {\n                const message = 'You have unsaved changes. Are you sure you want to leave?';\n                e.originalEvent.returnValue = message;\n                return message;\n            }\n        });\n\n        // WordPress admin menu resize handling\n        if (window.wp && wp.hooks) {\n            wp.hooks.addAction('wp-collapse-menu', 'ace-redis-cache', () => {\n                setTimeout(() => this.updateFixedPosition(), 300);\n            });\n        }\n    }\n\n    updateFixedPosition() {\n        const saveBar = document.querySelector('.ace-redis-save-bar');\n        if (!saveBar) return;\n\n        const adminMenuWrap = document.querySelector('#adminmenuwrap');\n        if (adminMenuWrap) {\n            const adminMenuWidth = adminMenuWrap.offsetWidth;\n            saveBar.style.left = `${adminMenuWidth}px`;\n        }\n    }\n\n    captureOriginalFormData() {\n        const $form = $(this.options.containerSelector);\n        this.originalFormData = this.getFormDataObject($form);\n    }\n\n    getFormDataObject($form) {\n        const formData = {};\n        \n        $form.serializeArray().forEach(field => {\n            if (field.name.startsWith('ace_redis_cache_settings[')) {\n                const key = field.name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                formData[key] = field.value;\n            }\n        });\n\n        // Add checkbox values (unchecked boxes don't get serialized)\n        $form.find('input[type=\"checkbox\"]').each(function() {\n            const name = $(this).attr('name');\n            if (name && name.startsWith('ace_redis_cache_settings[')) {\n                const key = name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                formData[key] = $(this).is(':checked') ? '1' : '0';\n            }\n        });\n        \n        return formData;\n    }\n\n    checkForChanges() {\n        if (!this.originalFormData) return;\n        \n        const $form = $(this.options.containerSelector);\n        const currentData = this.getFormDataObject($form);\n        const hasChanges = JSON.stringify(this.originalFormData) !== JSON.stringify(currentData);\n        \n        this.setUnsavedChanges(hasChanges);\n    }\n\n    setUnsavedChanges(hasChanges) {\n        this.hasUnsavedChanges = hasChanges;\n        this.updateSaveButtonState();\n    }\n\n    updateSaveButtonState() {\n        const $button = $('#save-bar-button');\n        const $buttonText = $button.find('.button-text');\n        const $icon = $button.find('.dashicons');\n\n        if (this.isSaving) {\n            $button.prop('disabled', true).removeClass('success');\n            $buttonText.text('Saving...');\n            $icon.removeClass('dashicons-admin-settings dashicons-yes-alt').addClass('dashicons-update');\n        } else if (this.isSuccess) {\n            $button.prop('disabled', true).addClass('success');\n            $buttonText.text('Saved!');\n            $icon.removeClass('dashicons-admin-settings dashicons-update').addClass('dashicons-yes-alt');\n        } else if (this.hasUnsavedChanges) {\n            $button.prop('disabled', this.options.autoSaveEnabled).removeClass('success'); // Disable if auto-save is on\n            $buttonText.text(this.options.autoSaveEnabled ? 'Auto-saving...' : 'Save Changes');\n            $icon.removeClass('dashicons-update dashicons-yes-alt').addClass('dashicons-admin-settings');\n            \n            // Add auto-saving visual indicator\n            if (this.options.autoSaveEnabled) {\n                $button.addClass('auto-saving');\n            } else {\n                $button.removeClass('auto-saving');\n            }\n        } else {\n            $button.prop('disabled', true).removeClass('success');\n            $buttonText.text('Saved');\n            $icon.removeClass('dashicons-update dashicons-yes-alt').addClass('dashicons-admin-settings');\n        }\n    }\n\n    async handleSave(isAutoSave = false) {\n        if (!this.hasUnsavedChanges || this.isSaving) return;\n\n        this.setSaving(true);\n        \n        try {\n            let success = false;\n            \n            if (this.options.onSave && typeof this.options.onSave === 'function') {\n                success = await this.options.onSave();\n            } else {\n                // Default save logic - trigger the original form save\n                success = await this.defaultSave();\n            }\n\n            if (success) {\n                const message = isAutoSave ? \n                    `Auto-saved successfully! (${new Date().toLocaleTimeString()})` : \n                    'Settings saved successfully!';\n                    \n                this.showMessage(message, 'success');\n                this.setSuccess(true);\n                this.captureOriginalFormData();\n                this.setUnsavedChanges(false);\n                \n                // Clear success state after 3 seconds for manual saves, 2 seconds for auto-save\n                setTimeout(() => this.setSuccess(false), isAutoSave ? 2000 : 3000);\n            } else {\n                const message = isAutoSave ? \n                    'Auto-save failed. Please save manually.' : \n                    'Failed to save settings. Please try again.';\n                this.showMessage(message, 'error');\n                \n                // If auto-save fails, disable it temporarily\n                if (isAutoSave) {\n                    this.options.autoSaveEnabled = false;\n                    $('#auto-save-toggle').prop('checked', false);\n                    this.stopAutoSave();\n                    localStorage.setItem('ace_redis_cache_auto_save_enabled', '0');\n                }\n            }\n        } catch (error) {\n            console.error('Save error:', error);\n            const message = isAutoSave ? \n                'Auto-save error occurred. Auto-save disabled.' : \n                'An error occurred while saving. Please try again.';\n            this.showMessage(message, 'error');\n            \n            // Disable auto-save on error\n            if (isAutoSave) {\n                this.options.autoSaveEnabled = false;\n                $('#auto-save-toggle').prop('checked', false);\n                this.stopAutoSave();\n                localStorage.setItem('ace_redis_cache_auto_save_enabled', '0');\n            }\n        } finally {\n            this.setSaving(false);\n        }\n    }\n\n    async defaultSave() {\n        return new Promise((resolve) => {\n            const $form = $(this.options.containerSelector);\n            const formData = this.getFormDataObject($form);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    settings: formData,\n                    nonce: ace_redis_admin.nonce\n                },\n                success: (response) => {\n                    resolve(response.success === true);\n                },\n                error: () => {\n                    resolve(false);\n                }\n            });\n        });\n    }\n\n    setSaving(isSaving) {\n        this.isSaving = isSaving;\n        this.updateSaveButtonState();\n    }\n\n    setSuccess(isSuccess) {\n        this.isSuccess = isSuccess;\n        this.updateSaveButtonState();\n    }\n\n    showMessage(message, type = 'info') {\n        this.message = message;\n        this.updateMessageDisplay(type);\n\n        // Start elapsed time tracking for success messages\n        if (type === 'success') {\n            this.startElapsedTimeTracking();\n        }\n\n        // Auto-hide messages after different intervals based on type\n        const hideDelay = type === 'error' ? 8000 : (type === 'success' ? 5000 : 3000);\n        setTimeout(() => {\n            this.clearMessage();\n        }, hideDelay);\n    }\n\n    updateMessageDisplay(type = 'info') {\n        const $messageContainer = $('.save-message');\n        \n        if (this.message) {\n            $messageContainer\n                .text(this.message)\n                .addClass('visible')\n                .removeClass('error success info')\n                .addClass(type);\n        } else {\n            $messageContainer\n                .removeClass('visible error success info')\n                .text('');\n        }\n    }\n\n    clearMessage() {\n        this.message = '';\n        this.updateMessageDisplay();\n        this.stopElapsedTimeTracking();\n    }\n\n    startElapsedTimeTracking() {\n        this.stopElapsedTimeTracking();\n        this.elapsedTime = 0;\n        \n        this.intervalId = setInterval(() => {\n            this.elapsedTime++;\n            this.updateElapsedTimeDisplay();\n        }, 1000);\n    }\n\n    stopElapsedTimeTracking() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = null;\n        }\n    }\n\n    updateElapsedTimeDisplay() {\n        if (this.elapsedTime > 0) {\n            const timeText = this.formatElapsedTime(this.elapsedTime);\n            $('.save-message').text(timeText);\n        }\n    }\n\n    formatElapsedTime(seconds) {\n        if (seconds < 60) return `Saved ${seconds} seconds ago`;\n        if (seconds < 3600) return `Saved ${Math.floor(seconds / 60)} minutes ago`;\n        return `Saved ${Math.floor(seconds / 3600)} hours ago`;\n    }\n\n    toggleAutoSave() {\n        if (this.options.autoSaveEnabled) {\n            this.startAutoSave();\n        } else {\n            this.stopAutoSave();\n        }\n    }\n\n    startAutoSave() {\n        this.stopAutoSave();\n        \n        console.log(`Starting auto-save with ${this.options.autoSaveInterval / 1000}s interval`);\n        \n        this.autoSaveIntervalId = setInterval(() => {\n            if (this.hasUnsavedChanges && !this.isSaving) {\n                console.log('Auto-save triggered - saving changes...');\n                this.showMessage(`Auto-saving changes...`, 'info');\n                this.handleSave(true); // Pass true to indicate auto-save\n            }\n        }, this.options.autoSaveInterval);\n        \n        // Show confirmation message\n        this.showMessage(`Auto-save started! Changes will be saved every ${this.options.autoSaveInterval / 1000} seconds.`, 'success');\n    }\n\n    stopAutoSave() {\n        if (this.autoSaveIntervalId) {\n            console.log('Stopping auto-save');\n            clearInterval(this.autoSaveIntervalId);\n            this.autoSaveIntervalId = null;\n        }\n    }\n\n    destroy() {\n        this.stopElapsedTimeTracking();\n        this.stopAutoSave();\n        \n        // Remove event listeners\n        $(this.options.containerSelector).off('input change');\n        $(document).off('click', '#save-bar-button');\n        $(document).off('change', '#auto-save-toggle');\n        $(window).off('resize scroll load');\n        $(window).off('beforeunload');\n\n        // Remove SaveBar from DOM\n        $('.ace-redis-save-bar').remove();\n        \n        this.isInitialized = false;\n    }\n}\n\n// Export the SaveBar class as default for ES6 modules\nexport default SaveBar;\n","/**\n * Ace Redis Cache Admin JavaScript\n *\n * Handles admin interface interactions, AJAX requests,\n * and dynamic UI updates.\n *\n * @package AceMedia\\RedisCache\n * @since 0.5.0\n */\n\n// Import SaveBar component\nimport SaveBar from './components/SaveBar.js';\n\n(function($) {\n    'use strict';\n\n    // Make SaveBar available globally for WordPress integration\n    window.AceRedisCacheSaveBar = SaveBar;\n\n    // Main admin class\n    class AceRedisCacheAdmin {\n        constructor() {\n            this.originalFormData = null;\n            this.init();\n        }\n\n        init() {\n            this.initTabs();\n            this.initToggleSwitch();\n            this.initCacheMode();\n            this.initConnectionTest();\n            this.initCacheManagement();\n            this.initDiagnostics();\n            this.initPerformanceMetrics();\n            this.initAjaxForm();\n            this.initFormValidation();\n            this.initChangeTracking();\n            this.initSaveBar(); // Initialize the SaveBar component\n        }\n\n        // Initialize SaveBar component\n        initSaveBar() {\n            // Wait for SaveBar component to be available\n            if (typeof window.AceRedisCacheSaveBar !== 'undefined') {\n                this.saveBar = new window.AceRedisCacheSaveBar({\n                    containerSelector: '#ace-redis-settings-form',\n                    saveButtonSelector: '#ace-redis-save-btn',\n                    messageContainerSelector: '#ace-redis-messages',\n                    onSave: () => this.saveSettingsViaSaveBar(),\n                    autoSaveEnabled: false,\n                    autoSaveInterval: 15000 // 15 seconds - shorter interval for better UX\n                });\n                console.log('SaveBar initialized successfully');\n            } else {\n                // Fallback if SaveBar component isn't loaded\n                console.warn('SaveBar component not loaded, falling back to standard save handling');\n            }\n        }\n\n        // Save settings specifically for SaveBar component\n        async saveSettingsViaSaveBar() {\n            try {\n                const success = await this.performSaveSettings();\n                \n                if (success) {\n                    // Refresh connection status after successful save\n                    setTimeout(() => {\n                        if (typeof this.testConnection === 'function') {\n                            this.testConnection();\n                        }\n                    }, 1000);\n                }\n                \n                return success;\n            } catch (error) {\n                console.error('SaveBar save error:', error);\n                return false;\n            }\n        }\n\n        // Extracted save logic that can be used by both SaveBar and regular form\n        async performSaveSettings() {\n            return new Promise((resolve) => {\n                const $form = $('#ace-redis-settings-form');\n                const formData = this.getFormDataObject();\n\n                $.ajax({\n                    url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                    type: 'POST',\n                    beforeSend: function(xhr) {\n                        xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                    },\n                    data: {\n                        settings: formData,\n                        nonce: ace_redis_admin.nonce\n                    },\n                    success: (response) => {\n                        if (response.success) {\n                            // Update the original form data for change tracking\n                            this.captureOriginalFormData();\n                            resolve(true);\n                        } else {\n                            resolve(false);\n                        }\n                    },\n                    error: () => {\n                        resolve(false);\n                    }\n                });\n            });\n        }\n\n        // Initialize tab navigation\n        initTabs() {\n            // Handle tab clicks\n            $('.nav-tab').on('click', (e) => {\n                e.preventDefault();\n                const target = $(e.target).attr('href');\n                this.switchToTab(target);\n                \n                // Update URL hash\n                if (target.startsWith('#')) {\n                    window.location.hash = target;\n                }\n            });\n            \n            // Handle browser back/forward navigation\n            $(window).on('hashchange', () => {\n                this.handleHashChange();\n            });\n            \n            // Initialize tab based on URL hash on page load\n            this.handleHashChange();\n        }\n        \n        // Switch to a specific tab\n        switchToTab(target) {\n            if (!target || !$(target).length) {\n                return;\n            }\n            \n            // Update tab states\n            $('.nav-tab').removeClass('nav-tab-active');\n            $(`.nav-tab[href=\"${target}\"]`).addClass('nav-tab-active');\n\n            // Update content visibility with fade effect\n            $('.tab-content.active').removeClass('active');\n            setTimeout(() => {\n                $(target).addClass('active');\n                \n                // Load metrics when diagnostics tab is opened\n                if (target === '#diagnostics') {\n                    setTimeout(() => {\n                        $('#refresh-metrics-btn').click();\n                    }, 100);\n                    // Resume timer countdown if auto-refresh is enabled\n                    this.resumeAutoRefreshTimer();\n                } else {\n                    // Pause timer countdown when leaving diagnostics tab\n                    this.pauseAutoRefreshTimer();\n                }\n            }, 50); // Small delay to allow previous content to fade out\n        }\n        \n        // Handle URL hash changes\n        handleHashChange() {\n            let hash = window.location.hash;\n            \n            // If no hash or invalid hash, default to first tab\n            if (!hash || !$(hash).length) {\n                const firstTab = $('.nav-tab').first().attr('href');\n                if (firstTab) {\n                    hash = firstTab;\n                    // Don't update URL if we're defaulting to first tab\n                }\n            }\n            \n            // Switch to the tab if it exists\n            if (hash && $(hash).length) {\n                this.switchToTab(hash);\n            }\n        }\n\n        // Initialize toggle switches\n        initToggleSwitch() {\n            $('.ace-switch input').on('change', function() {\n                const $switch = $(this);\n                const $slider = $switch.siblings('.ace-slider');\n\n                // Add visual feedback\n                if ($switch.is(':checked')) {\n                    $slider.addClass('checked');\n                } else {\n                    $slider.removeClass('checked');\n                }\n            });\n        }\n\n        // Initialize cache mode handling\n        initCacheMode() {\n            const toggleBlockCachingOption = () => {\n                const cacheMode = $('#cache-mode-select').val();\n                const $blockCachingRow = $('#block-caching-row');\n                const $blockCachingCheckbox = $('input[name=\"ace_redis_cache_settings[enable_block_caching]\"]');\n\n                if (cacheMode === 'object') {\n                    $blockCachingRow.show();\n                } else {\n                    $blockCachingRow.hide();\n                    $blockCachingCheckbox.prop('checked', false);\n                }\n            };\n\n            // Initialize on page load\n            toggleBlockCachingOption();\n\n            // Handle cache mode changes\n            $('#cache-mode-select').on('change', toggleBlockCachingOption);\n        }\n\n        // Initialize connection testing\n        initConnectionTest() {\n            $('#ace-redis-cache-test-btn').on('click', (e) => {\n                e.preventDefault();\n                this.testConnection();\n            });\n\n            $('#ace-redis-cache-test-write-btn').on('click', (e) => {\n                e.preventDefault();\n                this.testWriteRead();\n            });\n        }\n\n        // Test Redis connection\n        testConnection() {\n            const $btn = $('#ace-redis-cache-test-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Testing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/test-connection\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.updateConnectionStatus(response.data);\n                    } else {\n                        this.showConnectionError(response.data || 'Connection failed');\n                    }\n                })\n                .fail(() => {\n                    this.showConnectionError('REST API request failed');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Test write/read operations\n        testWriteRead() {\n            const $btn = $('#ace-redis-cache-test-write-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Testing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/test-write-read\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(\n                            '✅ Write/Read Test Successful\\n' +\n                        `Write: ${response.data.write}\\n` +\n                        `Read: ${response.data.read}\\n` +\n                        `Value: ${response.data.value}`,\n                            'success'\n                        );\n                    } else {\n                        this.showNotification(`❌ Test failed: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ REST API request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Update connection status display\n        updateConnectionStatus(data) {\n            const $status = $('#ace-redis-cache-connection');\n            const $size = $('#ace-redis-cache-size');\n            const $serverInfo = $('#redis-server-info');\n            const $serverType = $('#redis-server-type');\n            const $suggestions = $('#redis-suggestions');\n\n            $status.text(data.status)\n                .removeClass('status-unknown status-error')\n                .addClass('status-success');\n\n            let sizeText = `${data.size} keys (${data.size_kb} KB)`;\n            if (data.debug_info) {\n                sizeText += ` - ${data.debug_info}`;\n            }\n            $size.text(sizeText);\n            \n            // Show server information if available\n            if (data.server_type || data.suggestions) {\n                $serverType.text(data.server_type || 'Unknown');\n                \n                // Display suggestions\n                if (data.suggestions && data.suggestions.length > 0) {\n                    let suggestionsHtml = '<p><strong>Recommendations:</strong></p><ul>';\n                    data.suggestions.forEach(suggestion => {\n                        suggestionsHtml += `<li>${suggestion}</li>`;\n                    });\n                    suggestionsHtml += '</ul>';\n                    $suggestions.html(suggestionsHtml);\n                } else {\n                    $suggestions.html('<p><strong>Recommendations:</strong> Configuration looks good ✅</p>');\n                }\n                \n                $serverInfo.slideDown(300);\n            }\n        }\n\n        // Show connection error\n        showConnectionError(message) {\n            const $status = $('#ace-redis-cache-connection');\n            const $size = $('#ace-redis-cache-size');\n            const $serverInfo = $('#redis-server-info');\n\n            $status.text(message)\n                .removeClass('status-unknown status-success')\n                .addClass('status-error');\n\n            $size.text('0 keys (0 KB)');\n            $serverInfo.slideUp(300);\n        }\n\n        // Initialize cache management\n        initCacheManagement() {\n            $('#ace-redis-cache-flush-btn').on('click', (e) => {\n                e.preventDefault();\n                this.clearAllCache();\n            });\n\n            $('#ace-redis-cache-flush-blocks-btn').on('click', (e) => {\n                e.preventDefault();\n                this.clearBlockCache();\n            });\n        }\n\n        // Clear all cache\n        clearAllCache() {\n            if (!confirm('Are you sure you want to clear all cache? This action cannot be undone.')) {\n                return;\n            }\n\n            const $btn = $('#ace-redis-cache-flush-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Clearing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/flush-cache\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce,\n                    type: 'all'\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(`✅ ${response.data.message || 'Cache cleared successfully'}`, 'success');\n                        $('#ace-redis-cache-size').text('0 keys (0 KB)');\n                    } else {\n                        this.showNotification(`❌ Failed to clear cache: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ REST API request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Clear block cache\n        clearBlockCache() {\n            if (!confirm('Clear all block cache? This will remove cached Gutenberg blocks.')) {\n                return;\n            }\n\n            const $btn = $('#ace-redis-cache-flush-blocks-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Clearing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/flush-cache\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce,\n                    type: 'blocks'\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(`✅ ${response.data.message || 'Block cache cleared'}`, 'success');\n                        // Refresh status\n                        setTimeout(() => this.testConnection(), 500);\n                    } else {\n                        this.showNotification(`❌ Failed to clear block cache: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ REST API request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Initialize diagnostics\n        initDiagnostics() {\n            $('#ace-redis-cache-diagnostics-btn').on('click', (e) => {\n                e.preventDefault();\n                this.runDiagnostics();\n            });\n        }\n\n        // Run system diagnostics\n        runDiagnostics() {\n            const $btn = $('#ace-redis-cache-diagnostics-btn');\n            const $results = $('#diagnostics-results');\n            const originalText = $btn.text();\n\n            $btn.text('Running...').prop('disabled', true);\n            $results.html('<p>⏳ Running comprehensive diagnostics...</p>');\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/diagnostics\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success && response.data) {\n                        const diagnostics = Array.isArray(response.data)\n                            ? response.data.join('\\n')\n                            : response.data;\n                        $results.html(`<pre>${this.escapeHtml(diagnostics)}</pre>`);\n                    } else {\n                        $results.html(`<p class=\"error\">❌ Failed to load diagnostics: ${response.data || 'Unknown error'}</p>`);\n                    }\n                })\n                .fail(() => {\n                    $results.html('<p class=\"error\">❌ Diagnostics REST API request failed</p>');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Initialize form validation\n        initFormValidation() {\n            $('#ace-redis-save-btn').on('click', (e) => {\n                if (!this.validateForm()) {\n                    e.preventDefault();\n                    return false;\n                }\n            });\n\n            // Real-time validation\n            $('#redis_host').on('blur', this.validateHost);\n            $('#redis_port').on('blur', this.validatePort);\n            $('#cache_ttl').on('blur', this.validateTTL);\n        }\n\n        // Validate form inputs\n        validateForm() {\n            let isValid = true;\n            const errors = [];\n\n            // Validate host\n            const host = $('#redis_host').val().trim();\n            if (!host) {\n                errors.push('Redis host is required');\n                isValid = false;\n            }\n\n            // Validate port\n            const port = parseInt($('#redis_port').val());\n            if (!port || port < 1 || port > 65535) {\n                errors.push('Redis port must be between 1 and 65535');\n                isValid = false;\n            }\n\n            // Validate TTL\n            const ttl = parseInt($('#cache_ttl').val());\n            if (!ttl || ttl < 60) {\n                errors.push('Cache TTL must be at least 60 seconds');\n                isValid = false;\n            }\n\n            if (!isValid) {\n                this.showNotification(`❌ Validation errors:\\n${errors.join('\\n')}`, 'error');\n            }\n\n            return isValid;\n        }\n\n        // Individual field validators\n        validateHost() {\n            const $field = $(this);\n            const value = $field.val().trim();\n\n            if (!value) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        validatePort() {\n            const $field = $(this);\n            const value = parseInt($field.val());\n\n            if (!value || value < 1 || value > 65535) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        validateTTL() {\n            const $field = $(this);\n            const value = parseInt($field.val());\n\n            if (!value || value < 60) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        // Show notification\n        showNotification(message, type = 'info') {\n            // Use native alert for now - can be enhanced later\n            alert(message);\n\n            // Future: Create toast notifications\n            // this.createToast(message, type);\n        }\n\n        // Initialize AJAX form submission\n        initAjaxForm() {\n            console.log('Initializing AJAX form...');\n            \n            // Handle form submission\n            $('#ace-redis-settings-form').on('submit', (e) => {\n                console.log('Form submit intercepted');\n                e.preventDefault();\n                e.stopPropagation();\n                this.saveSettings();\n                return false;\n            });\n            \n            // Also handle direct button click as backup\n            $('#ace-redis-save-btn').on('click', (e) => {\n                console.log('Save button clicked');\n                e.preventDefault();\n                e.stopPropagation();\n                this.saveSettings();\n                return false;\n            });\n        }\n\n        // Initialize change tracking for form fields\n        initChangeTracking() {\n            // Store original form data\n            setTimeout(() => {\n                // Store original button text\n                const $button = $('#ace-redis-save-btn');\n                if (!$button.data('original-text')) {\n                    $button.data('original-text', $button.val());\n                }\n                \n                this.captureOriginalFormData();\n                this.updateSaveButtonState();\n                \n                // Watch for changes\n                $('#ace-redis-settings-form input, #ace-redis-settings-form select, #ace-redis-settings-form textarea').on('input change', () => {\n                    setTimeout(() => this.updateSaveButtonState(), 10);\n                });\n            }, 100);\n        }\n        \n        // Capture original form data\n        captureOriginalFormData() {\n            this.originalFormData = this.getFormDataObject();\n        }\n        \n        // Check if form has changes\n        hasFormChanges() {\n            if (!this.originalFormData) return false;\n            \n            const currentData = this.getFormDataObject();\n            return JSON.stringify(this.originalFormData) !== JSON.stringify(currentData);\n        }\n        \n        // Update save button state based on changes\n        updateSaveButtonState() {\n            const $button = $('#ace-redis-save-btn');\n            const hasChanges = this.hasFormChanges();\n            \n            $button.prop('disabled', !hasChanges);\n            \n            if (!hasChanges) {\n                $button.val($button.data('original-text') || 'Save Changes (No Changes)');\n            } else {\n                $button.val($button.data('original-text') || 'Save Changes');\n            }\n        }\n        \n        // Get form data as object\n        getFormDataObject() {\n            const $form = $('#ace-redis-settings-form');\n            const formData = {};\n            \n            $form.serializeArray().forEach(field => {\n                if (field.name.startsWith('ace_redis_cache_settings[')) {\n                    const key = field.name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                    formData[key] = field.value;\n                }\n            });\n\n            // Add checkbox values (unchecked boxes don't get serialized)\n            $form.find('input[type=\"checkbox\"]').each(function() {\n                const name = $(this).attr('name');\n                if (name && name.startsWith('ace_redis_cache_settings[')) {\n                    const key = name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                    formData[key] = $(this).is(':checked') ? '1' : '0';\n                }\n            });\n            \n            return formData;\n        }\n\n        // Save settings via REST API\n        saveSettings() {\n            // Check if SaveBar is handling saves\n            if (this.saveBar) {\n                // Let SaveBar handle the save\n                this.saveBar.handleSave();\n                return;\n            }\n            \n            // Fallback to original save logic\n            this.performOriginalSave();\n        }\n\n        // Original save method for backward compatibility\n        performOriginalSave() {\n            // Check for changes first\n            if (!this.hasFormChanges()) {\n                this.showMessage('Error: Failed to save settings. No changes detected or database error.', 'error');\n                return;\n            }\n            \n            const $form = $('#ace-redis-settings-form');\n            const $button = $('#ace-redis-save-btn');\n            const $messages = $('#ace-redis-messages');\n            \n            console.log('REST API Save triggered...');\n            \n            // Show loading state\n            const originalText = $button.val();\n            $button.val('Saving...').prop('disabled', true);\n            $messages.hide();\n\n            // Get form data\n            const formData = this.getFormDataObject();\n\n            console.log('Sending data:', formData);\n            console.log('REST URL:', ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings');\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                    console.log('Set REST nonce:', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    settings: formData,\n                    nonce: ace_redis_admin.nonce\n                },\n                success: (response) => {\n                    console.log('Success response:', response);\n                    if (response.success) {\n                        this.showMessage(response.message || 'Settings saved successfully!', 'success');\n                        \n                        // Update original form data and button state\n                        this.captureOriginalFormData();\n                        this.updateSaveButtonState();\n                        \n                        // Refresh connection status after save\n                        setTimeout(() => {\n                            if (typeof this.testConnection === 'function') {\n                                this.testConnection();\n                            }\n                        }, 1000);\n                    } else {\n                        this.showMessage(response.message || 'Failed to save settings', 'error');\n                    }\n                },\n                error: (xhr, status, error) => {\n                    console.error('Save error:', {\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                        responseText: xhr.responseText,\n                        error: error\n                    });\n                    \n                    let errorMessage = 'Network error occurred';\n                    \n                    if (xhr.responseJSON && xhr.responseJSON.message) {\n                        errorMessage = xhr.responseJSON.message;\n                    } else if (xhr.status === 504) {\n                        errorMessage = 'Gateway timeout - settings may still be saved. Please refresh the page.';\n                    } else if (xhr.status === 403) {\n                        errorMessage = 'Permission denied. Please refresh the page and try again.';\n                    } else if (xhr.status === 404) {\n                        errorMessage = 'REST API endpoint not found. The plugin may not be properly configured.';\n                    } else {\n                        errorMessage = `${error} (Status: ${xhr.status})`;\n                    }\n                    \n                    this.showMessage('Error: ' + errorMessage, 'error');\n                },\n                complete: () => {\n                    // Reset button state\n                    $button.val(originalText).prop('disabled', false);\n                }\n            });\n        }\n\n        // Show success/error message\n        showMessage(message, type = 'success') {\n            const $messages = $('#ace-redis-messages');\n            const cssClass = type === 'success' ? 'notice-success' : 'notice-error';\n            \n            $messages.html(`\n                <div class=\"notice ${cssClass} is-dismissible\">\n                    <p>${this.escapeHtml(message)}</p>\n                    <button type=\"button\" class=\"notice-dismiss\">\n                        <span class=\"screen-reader-text\">Dismiss this notice.</span>\n                    </button>\n                </div>\n            `).show();\n\n            // Auto-hide success messages after 5 seconds\n            if (type === 'success') {\n                setTimeout(() => {\n                    $messages.fadeOut();\n                }, 5000);\n            }\n\n            // Handle dismiss button\n            $messages.find('.notice-dismiss').on('click', function() {\n                $messages.fadeOut();\n            });\n        }\n\n        // Initialize performance metrics\n        initPerformanceMetrics() {\n            // Load metrics immediately if diagnostics tab is active\n            if ($('#diagnostics').hasClass('active')) {\n                setTimeout(() => {\n                    $('#refresh-metrics-btn').click();\n                }, 100);\n            }\n            \n            // Initialize auto-refresh functionality\n            this.initAutoRefresh();\n            \n            // Manual refresh button\n            $('#refresh-metrics-btn').on('click', () => {\n                this.loadPerformanceMetrics();\n                // Visual feedback for manual refresh\n                const $btn = $('#refresh-metrics-btn');\n                $btn.prop('disabled', true).html('⏳');\n                setTimeout(() => {\n                    $btn.prop('disabled', false).html('🔄');\n                }, 1000);\n            });\n        }\n        \n        // Initialize auto-refresh functionality\n        initAutoRefresh() {\n            // Store references at class level\n            this.autoRefreshInterval = null;\n            this.countdownInterval = null;\n            this.remainingSeconds = 0;\n            \n            const updateTimer = () => {\n                const $timer = $('#refresh-timer');\n                if (this.remainingSeconds > 0) {\n                    $timer.text(`Next refresh in ${this.remainingSeconds}s`);\n                    this.remainingSeconds--;\n                } else {\n                    $timer.text('');\n                }\n            };\n            \n            this.startAutoRefresh = (seconds) => {\n                // Clear existing intervals\n                if (this.autoRefreshInterval) {\n                    clearInterval(this.autoRefreshInterval);\n                }\n                if (this.countdownInterval) {\n                    clearInterval(this.countdownInterval);\n                }\n                \n                const $timer = $('#refresh-timer');\n                \n                if (seconds > 0) {\n                    this.remainingSeconds = seconds;\n                    \n                    // Start countdown timer\n                    this.countdownInterval = setInterval(updateTimer, 1000);\n                    \n                    // Start auto-refresh timer\n                    this.autoRefreshInterval = setInterval(() => {\n                        // Only refresh if diagnostics tab is active\n                        if ($('#diagnostics').hasClass('active')) {\n                            $('#refresh-metrics-btn').click();\n                            this.remainingSeconds = seconds; // Reset countdown\n                        }\n                    }, seconds * 1000);\n                    \n                    updateTimer(); // Show initial timer\n                } else {\n                    $timer.text('');\n                }\n            };\n            \n            // Handle dropdown change\n            $('#auto-refresh-select').on('change', () => {\n                const seconds = parseInt($('#auto-refresh-select').val());\n                this.startAutoRefresh(seconds);\n            });\n            \n            // Start with default value (30 seconds)\n            this.startAutoRefresh(30);\n        }\n        \n        // Pause auto-refresh timer (when leaving diagnostics tab)\n        pauseAutoRefreshTimer() {\n            if (this.countdownInterval) {\n                clearInterval(this.countdownInterval);\n            }\n            $('#refresh-timer').text('');\n        }\n        \n        // Resume auto-refresh timer (when entering diagnostics tab)\n        resumeAutoRefreshTimer() {\n            const selectedSeconds = parseInt($('#auto-refresh-select').val());\n            if (selectedSeconds > 0) {\n                // Restart the timer to show countdown immediately\n                this.startAutoRefresh(selectedSeconds);\n            }\n        }\n\n        // Load performance metrics via REST API\n        loadPerformanceMetrics() {\n            // Safety check - only load if diagnostics tab is active\n            if (!$('#diagnostics').hasClass('active')) {\n                return;\n            }\n            \n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/metrics',\n                type: 'GET',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                success: (response) => {\n                    // Double-check we're still on the diagnostics tab when response comes back\n                    if (!$('#diagnostics').hasClass('active')) {\n                        return;\n                    }\n                    \n                    if (response.success && response.data) {\n                        this.updateMetricsDisplay(response.data);\n                    } else if (response.data) {\n                        // Even on error, use the fallback data provided\n                        this.updateMetricsDisplay(response.data);\n                    }\n                },\n                error: () => {\n                    // Use fallback metrics on error\n                    this.updateMetricsDisplay({\n                        cache_hit_rate: '--',\n                        total_keys: '--',\n                        memory_usage: '--',\n                        response_time: '--',\n                        uptime: '--',\n                        connected_clients: '--',\n                        ops_per_sec: '--'\n                    });\n                }\n            });\n        }\n\n        // Update metrics display\n        updateMetricsDisplay(metrics) {\n            $('#performance-metrics .metric-card').each(function() {\n                const $card = $(this);\n                const $value = $card.find('.metric-value');\n                const title = $card.find('h4').text();\n                let newValue = '--';\n                \n                switch (title) {\n                    case 'Cache Hit Rate':\n                        newValue = metrics.cache_hit_rate || '--';\n                        break;\n                    case 'Total Keys':\n                        newValue = metrics.total_keys || '--';\n                        break;\n                    case 'Memory Usage':\n                        newValue = metrics.memory_usage || '--';\n                        break;\n                    case 'Response Time':\n                        newValue = metrics.response_time || '--';\n                        break;\n                    case 'Uptime':\n                        newValue = metrics.uptime || '--';\n                        break;\n                    case 'Connected Clients':\n                        newValue = metrics.connected_clients || '--';\n                        break;\n                    case 'Operations/sec':\n                    case 'Ops/sec':\n                        newValue = metrics.ops_per_sec || '--';\n                        break;\n                    case 'Connection Time':\n                        newValue = metrics.connection_time || '--';\n                        break;\n                }\n                \n                // Add visual feedback when value changes\n                const oldValue = $value.text();\n                if (oldValue !== newValue) {\n                    $value.fadeOut(100, function() {\n                        $(this).text(newValue).fadeIn(100);\n                    });\n                } else {\n                    $value.text(newValue);\n                }\n            });\n            \n            // Update last updated timestamp\n            const now = new Date().toLocaleTimeString();\n            $('.metrics-last-updated').text(`Last updated: ${now}`);\n        }\n\n        // Escape HTML for safe display\n        escapeHtml(text) {\n            const div = document.createElement('div');\n            div.textContent = text;\n            return div.innerHTML;\n        }\n    }\n\n    // Initialize when document is ready\n    $(document).ready(() => {\n        // eslint-disable-next-line no-new\n        new AceRedisCacheAdmin();\n    });\n})(jQuery);\n"],"names":["constructor","options","this","containerSelector","saveButtonSelector","messageContainerSelector","onSave","autoSaveEnabled","autoSaveInterval","isInitialized","hasUnsavedChanges","isSaving","isSuccess","message","elapsedTime","intervalId","autoSaveIntervalId","originalFormData","init","createSaveBar","setupEventListeners","captureOriginalFormData","updateSaveButtonState","document","querySelector","savedAutoSave","localStorage","getItem","saveBarHTML","body","insertAdjacentHTML","updateFixedPosition","startAutoSave","$","on","setTimeout","checkForChanges","e","preventDefault","handleSave","target","checked","toggleAutoSave","setItem","showMessage","window","originalEvent","returnValue","wp","hooks","addAction","saveBar","adminMenuWrap","adminMenuWidth","offsetWidth","style","left","$form","getFormDataObject","formData","serializeArray","forEach","field","name","startsWith","key","replace","value","find","each","attr","is","currentData","hasChanges","JSON","stringify","setUnsavedChanges","$button","$buttonText","$icon","prop","removeClass","text","addClass","isAutoSave","setSaving","success","defaultSave","Date","toLocaleTimeString","setSuccess","stopAutoSave","error","console","Promise","resolve","ajax","url","ace_redis_admin","rest_url","type","beforeSend","xhr","setRequestHeader","rest_nonce","data","settings","nonce","response","updateMessageDisplay","startElapsedTimeTracking","clearMessage","$messageContainer","stopElapsedTimeTracking","setInterval","updateElapsedTimeDisplay","clearInterval","timeText","formatElapsedTime","seconds","Math","floor","log","destroy","off","remove","AceRedisCacheSaveBar","SaveBar","AceRedisCacheAdmin","initTabs","initToggleSwitch","initCacheMode","initConnectionTest","initCacheManagement","initDiagnostics","initPerformanceMetrics","initAjaxForm","initFormValidation","initChangeTracking","initSaveBar","saveSettingsViaSaveBar","warn","performSaveSettings","testConnection","switchToTab","location","hash","handleHashChange","length","click","resumeAutoRefreshTimer","pauseAutoRefreshTimer","firstTab","first","$switch","$slider","siblings","toggleBlockCachingOption","cacheMode","val","$blockCachingRow","$blockCachingCheckbox","show","hide","testWriteRead","$btn","originalText","done","updateConnectionStatus","showConnectionError","fail","always","showNotification","write","read","$status","$size","$serverInfo","$serverType","$suggestions","status","sizeText","size","size_kb","debug_info","server_type","suggestions","suggestionsHtml","suggestion","html","slideDown","slideUp","clearAllCache","clearBlockCache","confirm","runDiagnostics","$results","diagnostics","Array","isArray","join","escapeHtml","validateForm","validateHost","validatePort","validateTTL","isValid","errors","trim","push","port","parseInt","ttl","$field","alert","stopPropagation","saveSettings","hasFormChanges","performOriginalSave","$messages","statusText","responseText","errorMessage","responseJSON","complete","cssClass","fadeOut","hasClass","initAutoRefresh","loadPerformanceMetrics","autoRefreshInterval","countdownInterval","remainingSeconds","updateTimer","$timer","startAutoRefresh","selectedSeconds","updateMetricsDisplay","cache_hit_rate","total_keys","memory_usage","response_time","uptime","connected_clients","ops_per_sec","metrics","$card","$value","title","newValue","connection_time","fadeIn","now","div","createElement","textContent","innerHTML","ready","jQuery"],"sourceRoot":""}