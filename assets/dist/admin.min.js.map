{"version":3,"file":"admin.min.js","mappings":"yBAkZA,MAxYA,MACIA,WAAAA,CAAYC,EAAU,CAAC,GACnBC,KAAKD,QAAU,CACXE,kBAAmB,2BACnBC,mBAAoB,sBACpBC,yBAA0B,sBAC1BC,OAAQ,QACLL,GAGPC,KAAKK,eAAgB,EACrBL,KAAKM,mBAAoB,EACzBN,KAAKO,UAAW,EAChBP,KAAKQ,kBAA4E,MAAxDC,aAAaC,QAAQ,+BAC9CV,KAAKW,WAAY,EACjBX,KAAKY,QAAU,GACfZ,KAAKa,YAAc,EACnBb,KAAKc,WAAa,KAClBd,KAAKe,iBAAmB,KAExBf,KAAKgB,MACT,CAEAA,IAAAA,GACQhB,KAAKK,gBAETL,KAAKiB,gBACLjB,KAAKkB,sBACLlB,KAAKmB,0BACLnB,KAAKoB,wBACLpB,KAAKK,eAAgB,EACzB,CAEAY,aAAAA,GAEI,GAAII,SAASC,cAAc,uBACvB,OAGJ,MAEMC,EAAc,0fAFGvB,KAAKQ,kBAAoB,UAAY,klBA0B5Da,SAASG,KAAKC,mBAAmB,YAAaF,GAC9CvB,KAAK0B,qBACT,CAEAR,mBAAAA,GAEIS,EAAE3B,KAAKD,QAAQE,mBAAmB2B,GAAG,eAAgB,0BAA2B,KAC5EC,WAAW,IAAM7B,KAAK8B,kBAAmB,MAI7CH,EAAEN,UAAUO,GAAG,QAAS,mBAAqBG,IACzCA,EAAEC,iBACFhC,KAAKiC,eAITN,EAAEN,UAAUO,GAAG,SAAU,oBAAqB,KAC1C5B,KAAKkC,mBAITP,EAAEQ,QAAQP,GAAG,qBAAsB,IAAM5B,KAAK0B,uBAG9CC,EAAEQ,QAAQP,GAAG,eAAiBG,IAC1B,GAAI/B,KAAKM,oBAAsBN,KAAKO,SAAU,CAC1C,MAAMK,EAAU,4DAEhB,OADAmB,EAAEK,cAAcC,YAAczB,EACvBA,CACX,IAIAuB,OAAOG,IAAMA,GAAGC,OAChBD,GAAGC,MAAMC,UAAU,mBAAoB,kBAAmB,KACtDX,WAAW,IAAM7B,KAAK0B,sBAAuB,MAGzD,CAEAA,mBAAAA,GACI,MAAMe,EAAUpB,SAASC,cAAc,uBACvC,IAAKmB,EAAS,OAEd,MAAMC,EAAgBrB,SAASC,cAAc,kBAC7C,GAAIoB,EAAe,CACf,MAAMC,EAAiBD,EAAcE,YACrCH,EAAQI,MAAMC,KAAO,GAAGH,KAC5B,CACJ,CAEAxB,uBAAAA,GACI,MAAM4B,EAAQpB,EAAE3B,KAAKD,QAAQE,mBAC7BD,KAAKe,iBAAmBf,KAAKgD,kBAAkBD,EACnD,CAEAC,iBAAAA,CAAkBD,GACd,MAAME,EAAW,CAAC,EAkBlB,OAhBAF,EAAMG,iBAAiBC,QAAQC,IAC3B,GAAIA,EAAMC,KAAKC,WAAW,6BAA8B,CACpD,MAAMC,EAAMH,EAAMC,KAAKG,QAAQ,4BAA6B,IAAIA,QAAQ,IAAK,IAC7EP,EAASM,GAAOH,EAAMK,KAC1B,IAIJV,EAAMW,KAAK,0BAA0BC,KAAK,WACtC,MAAMN,EAAO1B,EAAE3B,MAAM4D,KAAK,QAC1B,GAAIP,GAAQA,EAAKC,WAAW,6BAA8B,CACtD,MAAMC,EAAMF,EAAKG,QAAQ,4BAA6B,IAAIA,QAAQ,IAAK,IACvEP,EAASM,GAAO5B,EAAE3B,MAAM6D,GAAG,YAAc,IAAM,GACnD,CACJ,GAEOZ,CACX,CAEAnB,eAAAA,GACI,IAAK9B,KAAKe,iBAAkB,OAE5B,MAAMgC,EAAQpB,EAAE3B,KAAKD,QAAQE,mBACvB6D,EAAc9D,KAAKgD,kBAAkBD,GACrCgB,EAAaC,KAAKC,UAAUjE,KAAKe,oBAAsBiD,KAAKC,UAAUH,GAE5E9D,KAAKkE,kBAAkBH,EAC3B,CAEAG,iBAAAA,CAAkBH,GACV/D,KAAKM,oBAAsByD,IAC3B/D,KAAKM,kBAAoByD,EACzB/D,KAAKoB,wBAED2C,GACA/D,KAAKmE,2BAEDnE,KAAKQ,mBACLqB,WAAW,IAAM7B,KAAKoE,iBAAkB,MAG5CpE,KAAKqE,0BAGjB,CAEAjD,qBAAAA,GACI,MAAMkD,EAAU3C,EAAE,oBACZ4C,EAAcD,EAAQZ,KAAK,gBAC3Bc,EAAQF,EAAQZ,KAAK,cAEvB1D,KAAKO,UACL+D,EAAQG,KAAK,YAAY,GAAMC,YAAY,WAC3CH,EAAYI,KAAK,aACjBH,EAAME,YAAY,8CAA8CE,SAAS,qBAClE5E,KAAKW,WACZ2D,EAAQG,KAAK,YAAY,GAAMG,SAAS,WACxCL,EAAYI,KAAK,UACjBH,EAAME,YAAY,6CAA6CE,SAAS,sBACjE5E,KAAKM,mBACZgE,EAAQG,KAAK,YAAY,GAAOC,YAAY,WAC5CH,EAAYI,KAAK,gBACjBH,EAAME,YAAY,sCAAsCE,SAAS,8BAEjEN,EAAQG,KAAK,YAAY,GAAMC,YAAY,WAC3CH,EAAYI,KAAK,SACjBH,EAAME,YAAY,sCAAsCE,SAAS,4BAEzE,CAEA,gBAAM3C,GACF,GAAKjC,KAAKM,oBAAqBN,KAAKO,SAApC,CAEAP,KAAK6E,WAAU,GAEf,IACI,IAAIC,GAAU,EAGVA,EADA9E,KAAKD,QAAQK,QAAyC,mBAAxBJ,KAAKD,QAAQK,aAC3BJ,KAAKD,QAAQK,eAGbJ,KAAK+E,cAGrBD,GACA9E,KAAKgF,YAAY,+BAAgC,WACjDhF,KAAKiF,YAAW,GAChBjF,KAAKmB,0BACLnB,KAAKkE,mBAAkB,GAGvBrC,WAAW,IAAM7B,KAAKiF,YAAW,GAAQ,MAEzCjF,KAAKgF,YAAY,iCAAkC,QAE3D,CAAE,MAAOE,GACLC,QAAQD,MAAM,cAAeA,GAC7BlF,KAAKgF,YAAY,kCAAmC,QACxD,CAAE,QACEhF,KAAK6E,WAAU,EACnB,CA9BoD,CA+BxD,CAEA,oBAAMT,GACF,GAAKpE,KAAKM,oBAAqBN,KAAKO,SAApC,CAEA4E,QAAQC,IAAI,oCACZpF,KAAKgF,YAAY,iBAAkB,QAEnC,IACI,IAAIF,GAAU,EAGVA,EADA9E,KAAKD,QAAQK,QAAyC,mBAAxBJ,KAAKD,QAAQK,aAC3BJ,KAAKD,QAAQK,eAEbJ,KAAK+E,cAGrBD,GACA9E,KAAKgF,YAAY,sBAAuB,WACxChF,KAAKmB,0BACLnB,KAAKkE,mBAAkB,IAEvBlE,KAAKgF,YAAY,mBAAoB,QAE7C,CAAE,MAAOE,GACLC,QAAQD,MAAM,6BAA8BA,GAC5ClF,KAAKgF,YAAY,2BAA4B,QACjD,CAxBoD,CAyBxD,CAEA,iBAAMD,GACF,OAAO,IAAIM,QAASC,IAChB,MAAMvC,EAAQpB,EAAE3B,KAAKD,QAAQE,mBACvBgD,EAAWjD,KAAKgD,kBAAkBD,GAExCpB,EAAE4D,KAAK,CACHC,IAAKC,gBAAgBC,SAAW,8BAChCC,KAAM,OACNC,WAAY,SAASC,GACjBA,EAAIC,iBAAiB,aAAcL,gBAAgBM,WACvD,EACAC,KAAM,CACFC,SAAUhD,EACViD,MAAOT,gBAAgBS,OAE3BpB,QAAUqB,IACNb,GAA6B,IAArBa,EAASrB,UAErBI,MAAOA,KACHI,GAAQ,OAIxB,CAEAT,SAAAA,CAAUtE,GACNP,KAAKO,SAAWA,EAChBP,KAAKoB,uBACT,CAEA6D,UAAAA,CAAWtE,GACPX,KAAKW,UAAYA,EACjBX,KAAKoB,uBACT,CAEA4D,WAAAA,CAAYpE,EAAS+E,EAAO,QACxB3F,KAAKY,QAAUA,EACfZ,KAAKoG,qBAAqBT,GAGb,YAATA,GACA3F,KAAKmE,2BAKTtC,WAAW,KACP7B,KAAKqG,gBAFkB,UAATV,EAAmB,IAAiB,YAATA,EAAqB,IAAO,IAI7E,CAEAS,oBAAAA,CAAqBT,EAAO,QACxB,MAAMW,EAAoB3E,EAAE,iBAExB3B,KAAKY,QACL0F,EACK3B,KAAK3E,KAAKY,SACVgE,SAAS,WACTF,YAAY,sBACZE,SAASe,GAEdW,EACK5B,YAAY,8BACZC,KAAK,GAElB,CAEA0B,YAAAA,GACIrG,KAAKY,QAAU,GACfZ,KAAKoG,uBACLpG,KAAKqE,yBACT,CAEAF,wBAAAA,GACInE,KAAKqE,0BACLrE,KAAKa,YAAc,EAEnBb,KAAKc,WAAayF,YAAY,KAC1BvG,KAAKa,cACLb,KAAKwG,4BACN,IACP,CAEAnC,uBAAAA,GACQrE,KAAKc,aACL2F,cAAczG,KAAKc,YACnBd,KAAKc,WAAa,KAE1B,CAEA0F,wBAAAA,GACI,GAAIxG,KAAKa,YAAc,EAAG,CACtB,MAAM6F,EAAW1G,KAAK2G,kBAAkB3G,KAAKa,aAC7Cc,EAAE,iBAAiBgD,KAAK+B,EAC5B,CACJ,CAEAC,iBAAAA,CAAkBC,GACd,OAAIA,EAAU,GAAW,GAAGA,SACxBA,EAAU,KAAa,GAAGC,KAAKC,MAAMF,EAAU,WAC5C,GAAGC,KAAKC,MAAMF,EAAU,YACnC,CAEA1E,cAAAA,GACI,MAAM6E,EAAUpF,EAAE,qBAClB3B,KAAKQ,kBAAoBuG,EAAQlD,GAAG,YAEhC7D,KAAKQ,kBACLR,KAAKgF,YAAY,0DAA2D,WAE5EhF,KAAKgF,YAAY,4CAA6C,QAIlEvE,aAAauG,QAAQ,8BAA+BhH,KAAKQ,kBAAoB,IAAM,IACvF,CAEAyG,OAAAA,GACIjH,KAAKqE,0BAGL1C,EAAE3B,KAAKD,QAAQE,mBAAmBiH,IAAI,gBACtCvF,EAAEN,UAAU6F,IAAI,QAAS,oBACzBvF,EAAEN,UAAU6F,IAAI,SAAU,qBAC1BvF,EAAEQ,QAAQ+E,IAAI,sBACdvF,EAAEQ,QAAQ+E,IAAI,gBAGdvF,EAAE,uBAAuBwF,SAEzBnH,KAAKK,eAAgB,CACzB,ICjYJ,SAAUsB,GAINQ,OAAOiF,qBAAuBC,EAG9B,MAAMC,EACFxH,WAAAA,GACIE,KAAKe,iBAAmB,KACxBf,KAAKgB,MACT,CAEAA,IAAAA,GACIhB,KAAKuH,WACLvH,KAAKwH,mBACLxH,KAAKyH,gBACLzH,KAAK0H,qBACL1H,KAAK2H,sBACL3H,KAAK4H,kBACL5H,KAAK6H,yBACL7H,KAAK8H,eACL9H,KAAK+H,qBACL/H,KAAKgI,qBACLhI,KAAKiI,aACT,CAGAA,WAAAA,QAE+C,IAAhC9F,OAAOiF,sBACdpH,KAAKyC,QAAU,IAAIN,OAAOiF,qBAAqB,CAC3CnH,kBAAmB,2BACnBC,mBAAoB,sBACpBC,yBAA0B,sBAC1BC,OAAQA,IAAMJ,KAAKkI,yBACnBC,iBAAiB,EACjBC,iBAAkB,OAEtBjD,QAAQC,IAAI,qCAGZD,QAAQkD,KAAK,uEAErB,CAGA,4BAAMH,GACF,IACI,MAAMpD,QAAgB9E,KAAKsI,sBAW3B,OATIxD,GAEAjD,WAAW,KAC4B,mBAAxB7B,KAAKuI,gBACZvI,KAAKuI,kBAEV,KAGAzD,CACX,CAAE,MAAOI,GAEL,OADAC,QAAQD,MAAM,sBAAuBA,IAC9B,CACX,CACJ,CAGA,yBAAMoD,GACF,OAAO,IAAIjD,QAASC,IACF3D,EAAE,4BAAhB,MACMsB,EAAWjD,KAAKgD,oBAEtBrB,EAAE4D,KAAK,CACHC,IAAKC,gBAAgBC,SAAW,8BAChCC,KAAM,OACNC,WAAY,SAASC,GACjBA,EAAIC,iBAAiB,aAAcL,gBAAgBM,WACvD,EACAC,KAAM,CACFC,SAAUhD,EACViD,MAAOT,gBAAgBS,OAE3BpB,QAAUqB,IACFA,EAASrB,SAET9E,KAAKmB,0BACLmE,GAAQ,IAERA,GAAQ,IAGhBJ,MAAOA,KACHI,GAAQ,OAIxB,CAGAiC,QAAAA,GAEI5F,EAAE,YAAYC,GAAG,QAAUG,IACvBA,EAAEC,iBACF,MAAMwG,EAAS7G,EAAEI,EAAEyG,QAAQ5E,KAAK,QAChC5D,KAAKyI,YAAYD,GAGbA,EAAOlF,WAAW,OAClBnB,OAAOuG,SAASC,KAAOH,KAK/B7G,EAAEQ,QAAQP,GAAG,aAAc,KACvB5B,KAAK4I,qBAIT5I,KAAK4I,kBACT,CAGAH,WAAAA,CAAYD,GACHA,GAAW7G,EAAE6G,GAAQK,SAK1BlH,EAAE,YAAY+C,YAAY,kBAC1B/C,EAAE,kBAAkB6G,OAAY5D,SAAS,kBAGzCjD,EAAE,uBAAuB+C,YAAY,UACrC7C,WAAW,KACPF,EAAE6G,GAAQ5D,SAAS,UAGJ,iBAAX4D,GACA3G,WAAW,KACPF,EAAE,wBAAwBmH,SAC3B,KAEH9I,KAAK+I,0BAGL/I,KAAKgJ,yBAEV,IACP,CAGAJ,gBAAAA,GACI,IAAID,EAAOxG,OAAOuG,SAASC,KAG3B,IAAKA,IAAShH,EAAEgH,GAAME,OAAQ,CAC1B,MAAMI,EAAWtH,EAAE,YAAYuH,QAAQtF,KAAK,QACxCqF,IACAN,EAAOM,EAGf,CAGIN,GAAQhH,EAAEgH,GAAME,QAChB7I,KAAKyI,YAAYE,EAEzB,CAGAnB,gBAAAA,GACI7F,EAAE,qBAAqBC,GAAG,SAAU,WAChC,MAAMuH,EAAUxH,EAAE3B,MACZoJ,EAAUD,EAAQE,SAAS,eAG7BF,EAAQtF,GAAG,YACXuF,EAAQxE,SAAS,WAEjBwE,EAAQ1E,YAAY,UAE5B,EACJ,CAGA+C,aAAAA,GACI,MAAM6B,EAA2BA,KAC7B,MAAMC,EAAY5H,EAAE,sBAAsB6H,MACpCC,EAAmB9H,EAAE,sBACrB+H,EAAwB/H,EAAE,gEAC1BgI,EAAgBhI,EAAE,wBAClBiI,EAAqBjI,EAAE,kEAEvBkI,EAAqB,WAAdN,EACbE,EAAiBK,OAAOD,GACxBF,EAAcG,OAAOD,GAEhBA,IACDH,EAAsBjF,KAAK,WAAW,GACtCmF,EAAmBnF,KAAK,WAAW,KAK3C6E,IAGA3H,EAAE,sBAAsBC,GAAG,SAAU0H,EACzC,CAGA5B,kBAAAA,GACI/F,EAAE,6BAA6BC,GAAG,QAAUG,IACxCA,EAAEC,iBACFhC,KAAKuI,mBAGT5G,EAAE,mCAAmCC,GAAG,QAAUG,IAC9CA,EAAEC,iBACFhC,KAAK+J,iBAEb,CAGAxB,cAAAA,GACI,MAAMyB,EAAOrI,EAAE,6BACTsI,EAAeD,EAAKrF,OAE1BqF,EAAKrF,KAAK,cAAcF,KAAK,YAAY,GAEzC9C,EAAE4D,KAAK,CACHC,IAAKC,gBAAgBC,SAAW,qCAChCC,KAAM,OACNC,WAAY,SAASC,GACjBA,EAAIC,iBAAiB,aAAcL,gBAAgBM,WACvD,EACAC,KAAM,CACFE,MAAOT,gBAAgBS,SAG1BgE,KAAM/D,IACCA,EAASrB,QACT9E,KAAKmK,uBAAuBhE,EAASH,MAErChG,KAAKoK,oBAAoBjE,EAASH,MAAQ,uBAGjDqE,KAAK,KACFrK,KAAKoK,oBAAoB,6BAE5BE,OAAO,KACJN,EAAKrF,KAAKsF,GAAcxF,KAAK,YAAY,IAErD,CAGAsF,aAAAA,GACI,MAAMC,EAAOrI,EAAE,mCACTsI,EAAeD,EAAKrF,OAE1BqF,EAAKrF,KAAK,cAAcF,KAAK,YAAY,GAEzC9C,EAAE4D,KAAK,CACHC,IAAKC,gBAAgBC,SAAW,qCAChCC,KAAM,OACNC,WAAY,SAASC,GACjBA,EAAIC,iBAAiB,aAAcL,gBAAgBM,WACvD,EACAC,KAAM,CACFE,MAAOT,gBAAgBS,SAG1BgE,KAAM/D,IACCA,EAASrB,QACT9E,KAAKuK,iBAEL,wCAAUpE,EAASH,KAAKwE,gBACfrE,EAASH,KAAKyE,gBACbtE,EAASH,KAAKvC,QACpB,WAGJzD,KAAKuK,iBAAiB,kBAAkBpE,EAASH,OAAQ,WAGhEqE,KAAK,KACFrK,KAAKuK,iBAAiB,4BAA6B,WAEtDD,OAAO,KACJN,EAAKrF,KAAKsF,GAAcxF,KAAK,YAAY,IAErD,CAGA0F,sBAAAA,CAAuBnE,GACnB,MAAM0E,EAAU/I,EAAE,+BACZgJ,EAAQhJ,EAAE,yBACViJ,EAAcjJ,EAAE,sBAChBkJ,EAAclJ,EAAE,sBAChBmJ,EAAenJ,EAAE,sBAEvB+I,EAAQ/F,KAAKqB,EAAK+E,QACbrG,YAAY,+BACZE,SAAS,kBAEd,IAAIoG,EAAW,GAAGhF,EAAKiF,cAAcjF,EAAKkF,cAO1C,GANIlF,EAAKmF,aACLH,GAAY,MAAMhF,EAAKmF,cAE3BR,EAAMhG,KAAKqG,GAGPhF,EAAKoF,aAAepF,EAAKqF,YAAa,CAItC,GAHAR,EAAYlG,KAAKqB,EAAKoF,aAAe,WAGjCpF,EAAKqF,aAAerF,EAAKqF,YAAYxC,OAAS,EAAG,CACjD,IAAIyC,EAAkB,+CACtBtF,EAAKqF,YAAYlI,QAAQoI,IACrBD,GAAmB,OAAOC,WAE9BD,GAAmB,QACnBR,EAAaU,KAAKF,EACtB,MACIR,EAAaU,KAAK,uEAGtBZ,EAAYa,UAAU,IAC1B,CACJ,CAGArB,mBAAAA,CAAoBxJ,GAChB,MAAM8J,EAAU/I,EAAE,+BACZgJ,EAAQhJ,EAAE,yBACViJ,EAAcjJ,EAAE,sBAEtB+I,EAAQ/F,KAAK/D,GACR8D,YAAY,iCACZE,SAAS,gBAEd+F,EAAMhG,KAAK,iBACXiG,EAAYc,QAAQ,IACxB,CAGA/D,mBAAAA,GACIhG,EAAE,8BAA8BC,GAAG,QAAUG,IACzCA,EAAEC,iBACFhC,KAAK2L,iBAEb,CAGAA,aAAAA,GACI,IAAKC,QAAQ,2EACT,OAGJ,MAAM5B,EAAOrI,EAAE,8BACTsI,EAAeD,EAAKrF,OAE1BqF,EAAKrF,KAAK,eAAeF,KAAK,YAAY,GAE1C9C,EAAE4D,KAAK,CACHC,IAAKC,gBAAgBC,SAAW,iCAChCC,KAAM,OACNC,WAAY,SAASC,GACjBA,EAAIC,iBAAiB,aAAcL,gBAAgBM,WACvD,EACAC,KAAM,CACFE,MAAOT,gBAAgBS,MACvBP,KAAM,SAGTuE,KAAM/D,IACCA,EAASrB,SACT9E,KAAKuK,iBAAiB,KAAKpE,EAASH,KAAKpF,SAAW,+BAAgC,WACpFe,EAAE,yBAAyBgD,KAAK,kBAEhC3E,KAAKuK,iBAAiB,4BAA4BpE,EAASH,OAAQ,WAG1EqE,KAAK,KACFrK,KAAKuK,iBAAiB,4BAA6B,WAEtDD,OAAO,KACJN,EAAKrF,KAAKsF,GAAcxF,KAAK,YAAY,IAErD,CAKAmD,eAAAA,GACIjG,EAAE,oCAAoCC,GAAG,QAAUG,IAC/CA,EAAEC,iBACFhC,KAAK6L,kBAEb,CAGAA,cAAAA,GACI,MAAM7B,EAAOrI,EAAE,oCACTmK,EAAWnK,EAAE,wBACbsI,EAAeD,EAAKrF,OAE1BqF,EAAKrF,KAAK,cAAcF,KAAK,YAAY,GACzCqH,EAASN,KAAK,iDAEd7J,EAAE4D,KAAK,CACHC,IAAKC,gBAAgBC,SAAW,iCAChCC,KAAM,OACNC,WAAY,SAASC,GACjBA,EAAIC,iBAAiB,aAAcL,gBAAgBM,WACvD,EACAC,KAAM,CACFE,MAAOT,gBAAgBS,SAG1BgE,KAAM/D,IACH,GAAIA,EAASrB,SAAWqB,EAASH,KAAM,CACnC,MAAM+F,EAAcC,MAAMC,QAAQ9F,EAASH,MACrCG,EAASH,KAAKkG,KAAK,MACnB/F,EAASH,KACf8F,EAASN,KAAK,QAAQxL,KAAKmM,WAAWJ,WAC1C,MACID,EAASN,KAAK,kDAAkDrF,EAASH,MAAQ,yBAGxFqE,KAAK,KACFyB,EAASN,KAAK,gEAEjBlB,OAAO,KACJN,EAAKrF,KAAKsF,GAAcxF,KAAK,YAAY,IAErD,CAGAsD,kBAAAA,GACIpG,EAAE,uBAAuBC,GAAG,QAAUG,IAClC,IAAK/B,KAAKoM,eAEN,OADArK,EAAEC,kBACK,IAKfL,EAAE,eAAeC,GAAG,OAAQ5B,KAAKqM,cACjC1K,EAAE,eAAeC,GAAG,OAAQ5B,KAAKsM,cACjC3K,EAAE,cAAcC,GAAG,OAAQ5B,KAAKuM,YACpC,CAGAH,YAAAA,GACI,IAAII,GAAU,EACd,MAAMC,EAAS,GAGF9K,EAAE,eAAe6H,MAAMkD,SAEhCD,EAAOE,KAAK,0BACZH,GAAU,GAId,MAAMI,EAAOC,SAASlL,EAAE,eAAe6H,SAClCoD,GAAQA,EAAO,GAAKA,EAAO,SAC5BH,EAAOE,KAAK,0CACZH,GAAU,GAId,MAAMM,EAAMD,SAASlL,EAAE,cAAc6H,OAUrC,QATKsD,GAAOA,EAAM,MACdL,EAAOE,KAAK,yCACZH,GAAU,GAGTA,GACDxM,KAAKuK,iBAAiB,yBAAyBkC,EAAOP,KAAK,QAAS,SAGjEM,CACX,CAGAH,YAAAA,GACI,MAAMU,EAASpL,EAAE3B,MAGjB,OAFc+M,EAAOvD,MAAMkD,QAO3BK,EAAOrI,YAAY,UACZ,IALHqI,EAAOnI,SAAS,UACT,EAKf,CAEA0H,YAAAA,GACI,MAAMS,EAASpL,EAAE3B,MACXyD,EAAQoJ,SAASE,EAAOvD,OAE9B,OAAK/F,GAASA,EAAQ,GAAKA,EAAQ,OAC/BsJ,EAAOnI,SAAS,UACT,IAGXmI,EAAOrI,YAAY,UACZ,EACX,CAEA6H,WAAAA,GACI,MAAMQ,EAASpL,EAAE3B,MACXyD,EAAQoJ,SAASE,EAAOvD,OAE9B,OAAK/F,GAASA,EAAQ,IAClBsJ,EAAOnI,SAAS,UACT,IAGXmI,EAAOrI,YAAY,UACZ,EACX,CAGA6F,gBAAAA,CAAiB3J,EAAS+E,EAAO,QAE7BqH,MAAMpM,EAIV,CAGAkH,YAAAA,GACI3C,QAAQC,IAAI,6BAGZzD,EAAE,4BAA4BC,GAAG,SAAWG,IACxCoD,QAAQC,IAAI,2BACZrD,EAAEC,iBACFD,EAAEkL,kBACFjN,KAAKkN,gBACE,IAIXvL,EAAE,uBAAuBC,GAAG,QAAUG,IAClCoD,QAAQC,IAAI,uBACZrD,EAAEC,iBACFD,EAAEkL,kBACFjN,KAAKkN,gBACE,GAEf,CAGAlF,kBAAAA,GAEInG,WAAW,KAEP,MAAMyC,EAAU3C,EAAE,uBACb2C,EAAQ0B,KAAK,kBACd1B,EAAQ0B,KAAK,gBAAiB1B,EAAQkF,OAG1CxJ,KAAKmB,0BACLnB,KAAKoB,wBAGLO,EAAE,sGAAsGC,GAAG,eAAgB,KACvHC,WAAW,IAAM7B,KAAKoB,wBAAyB,OAEpD,IACP,CAGAD,uBAAAA,GACInB,KAAKe,iBAAmBf,KAAKgD,mBACjC,CAGAmK,cAAAA,GACI,IAAKnN,KAAKe,iBAAkB,OAAO,EAEnC,MAAM+C,EAAc9D,KAAKgD,oBACzB,OAAOgB,KAAKC,UAAUjE,KAAKe,oBAAsBiD,KAAKC,UAAUH,EACpE,CAGA1C,qBAAAA,GACI,MAAMkD,EAAU3C,EAAE,uBACZoC,EAAa/D,KAAKmN,iBAExB7I,EAAQG,KAAK,YAAaV,GAErBA,EAGDO,EAAQkF,IAAIlF,EAAQ0B,KAAK,kBAAoB,gBAF7C1B,EAAQkF,IAAIlF,EAAQ0B,KAAK,kBAAoB,4BAIrD,CAGAhD,iBAAAA,GACI,MAAMD,EAAQpB,EAAE,4BACVsB,EAAW,CAAC,EAkBlB,OAhBAF,EAAMG,iBAAiBC,QAAQC,IAC3B,GAAIA,EAAMC,KAAKC,WAAW,6BAA8B,CACpD,MAAMC,EAAMH,EAAMC,KAAKG,QAAQ,4BAA6B,IAAIA,QAAQ,IAAK,IAC7EP,EAASM,GAAOH,EAAMK,KAC1B,IAIJV,EAAMW,KAAK,0BAA0BC,KAAK,WACtC,MAAMN,EAAO1B,EAAE3B,MAAM4D,KAAK,QAC1B,GAAIP,GAAQA,EAAKC,WAAW,6BAA8B,CACtD,MAAMC,EAAMF,EAAKG,QAAQ,4BAA6B,IAAIA,QAAQ,IAAK,IACvEP,EAASM,GAAO5B,EAAE3B,MAAM6D,GAAG,YAAc,IAAM,GACnD,CACJ,GAEOZ,CACX,CAGAiK,YAAAA,GAEQlN,KAAKyC,QAELzC,KAAKyC,QAAQR,aAKjBjC,KAAKoN,qBACT,CAGAA,mBAAAA,GAEI,IAAKpN,KAAKmN,iBAEN,YADAnN,KAAKgF,YAAY,yEAA0E,SAIjFrD,EAAE,4BAAhB,MACM2C,EAAU3C,EAAE,uBACZ0L,EAAY1L,EAAE,uBAEpBwD,QAAQC,IAAI,8BAGZ,MAAM6E,EAAe3F,EAAQkF,MAC7BlF,EAAQkF,IAAI,aAAa/E,KAAK,YAAY,GAC1C4I,EAAUC,OAGV,MAAMrK,EAAWjD,KAAKgD,oBAEtBmC,QAAQC,IAAI,gBAAiBnC,GAC7BkC,QAAQC,IAAI,YAAaK,gBAAgBC,SAAW,+BAEpD/D,EAAE4D,KAAK,CACHC,IAAKC,gBAAgBC,SAAW,8BAChCC,KAAM,OACNC,WAAY,SAASC,GACjBA,EAAIC,iBAAiB,aAAcL,gBAAgBM,YACnDZ,QAAQC,IAAI,kBAAmBK,gBAAgBM,WACnD,EACAC,KAAM,CACFC,SAAUhD,EACViD,MAAOT,gBAAgBS,OAE3BpB,QAAUqB,IACNhB,QAAQC,IAAI,oBAAqBe,GAC7BA,EAASrB,SACT9E,KAAKgF,YAAYmB,EAASvF,SAAW,+BAAgC,WAGrEZ,KAAKmB,0BACLnB,KAAKoB,wBAGLS,WAAW,KAC4B,mBAAxB7B,KAAKuI,gBACZvI,KAAKuI,kBAEV,MAEHvI,KAAKgF,YAAYmB,EAASvF,SAAW,0BAA2B,UAGxEsE,MAAOA,CAACW,EAAKkF,EAAQ7F,KACjBC,QAAQD,MAAM,cAAe,CACzB6F,OAAQlF,EAAIkF,OACZwC,WAAY1H,EAAI0H,WAChBC,aAAc3H,EAAI2H,aAClBtI,MAAOA,IAGX,IAAIuI,EAAe,yBAGfA,EADA5H,EAAI6H,cAAgB7H,EAAI6H,aAAa9M,QACtBiF,EAAI6H,aAAa9M,QACV,MAAfiF,EAAIkF,OACI,0EACO,MAAflF,EAAIkF,OACI,4DACO,MAAflF,EAAIkF,OACI,0EAEA,GAAG7F,cAAkBW,EAAIkF,UAG5C/K,KAAKgF,YAAY,UAAYyI,EAAc,UAE/CE,SAAUA,KAENrJ,EAAQkF,IAAIS,GAAcxF,KAAK,YAAY,KAGvD,CAGAO,WAAAA,CAAYpE,EAAS+E,EAAO,WACxB,MAAM0H,EAAY1L,EAAE,uBACdiM,EAAoB,YAATjI,EAAqB,iBAAmB,eAEzD0H,EAAU7B,KAAK,wCACUoC,8CACZ5N,KAAKmM,WAAWvL,wOAK1BiJ,OAGU,YAATlE,GACA9D,WAAW,KACPwL,EAAUQ,WACX,KAIPR,EAAU3J,KAAK,mBAAmB9B,GAAG,QAAS,WAC1CyL,EAAUQ,SACd,EACJ,CAGAhG,sBAAAA,GAEQlG,EAAE,gBAAgBmM,SAAS,WAC3BjM,WAAW,KACPF,EAAE,wBAAwBmH,SAC3B,KAIP9I,KAAK+N,kBAGLpM,EAAE,wBAAwBC,GAAG,QAAS,KAClC5B,KAAKgO,yBAEL,MAAMhE,EAAOrI,EAAE,wBACfqI,EAAKvF,KAAK,YAAY,GAAM+G,KAAK,KACjC3J,WAAW,KACPmI,EAAKvF,KAAK,YAAY,GAAO+G,KAAK,OACnC,MAEX,CAGAuC,eAAAA,GAEI/N,KAAKiO,oBAAsB,KAC3BjO,KAAKkO,kBAAoB,KACzBlO,KAAKmO,iBAAmB,EAExB,MAAMC,EAAcA,KAChB,MAAMC,EAAS1M,EAAE,kBACb3B,KAAKmO,iBAAmB,GACxBE,EAAO1J,KAAK,mBAAmB3E,KAAKmO,qBACpCnO,KAAKmO,oBAELE,EAAO1J,KAAK,KAIpB3E,KAAKsO,iBAAoB1H,IAEjB5G,KAAKiO,qBACLxH,cAAczG,KAAKiO,qBAEnBjO,KAAKkO,mBACLzH,cAAczG,KAAKkO,mBAGvB,MAAMG,EAAS1M,EAAE,kBAEbiF,EAAU,GACV5G,KAAKmO,iBAAmBvH,EAGxB5G,KAAKkO,kBAAoB3H,YAAY6H,EAAa,KAGlDpO,KAAKiO,oBAAsB1H,YAAY,KAE/B5E,EAAE,gBAAgBmM,SAAS,YAC3BnM,EAAE,wBAAwBmH,QAC1B9I,KAAKmO,iBAAmBvH,IAEnB,IAAVA,GAEHwH,KAEAC,EAAO1J,KAAK,KAKpBhD,EAAE,wBAAwBC,GAAG,SAAU,KACnC,MAAMgF,EAAUiG,SAASlL,EAAE,wBAAwB6H,OACnDxJ,KAAKsO,iBAAiB1H,KAI1B5G,KAAKsO,iBAAiB,GAC1B,CAGAtF,qBAAAA,GACQhJ,KAAKkO,mBACLzH,cAAczG,KAAKkO,mBAEvBvM,EAAE,kBAAkBgD,KAAK,GAC7B,CAGAoE,sBAAAA,GACI,MAAMwF,EAAkB1B,SAASlL,EAAE,wBAAwB6H,OACvD+E,EAAkB,GAElBvO,KAAKsO,iBAAiBC,EAE9B,CAGAP,sBAAAA,GAESrM,EAAE,gBAAgBmM,SAAS,WAIhCnM,EAAE4D,KAAK,CACHC,IAAKC,gBAAgBC,SAAW,6BAChCC,KAAM,MACNC,WAAY,SAASC,GACjBA,EAAIC,iBAAiB,aAAcL,gBAAgBM,WACvD,EACAjB,QAAUqB,IAEDxE,EAAE,gBAAgBmM,SAAS,YAI5B3H,EAASrB,SAAWqB,EAASH,MAEtBG,EAASH,OADhBhG,KAAKwO,qBAAqBrI,EAASH,OAM3Cd,MAAOA,KAEHlF,KAAKwO,qBAAqB,CACtBC,eAAgB,KAChBC,WAAY,KACZC,aAAc,KACdC,cAAe,KACfC,OAAQ,KACRC,kBAAmB,KACnBC,YAAa,SAI7B,CAGAP,oBAAAA,CAAqBQ,GAEjB7J,QAAQC,IAAI,wBAAyB,CACjC6J,KAAMD,EAAQE,oBACdC,OAAQH,EAAQI,sBAChBC,SAAUL,EAAQP,iBAGtB9M,EAAE,qCAAqCgC,KAAK,WACxC,MAAM2L,EAAQ3N,EAAE3B,MACVuP,EAASD,EAAM5L,KAAK,iBACpB8L,EAAQF,EAAM5L,KAAK,MAAMiB,OAC/B,IAAI8K,EAAW,KAEf,OAAQD,GACJ,IAAK,iBACDC,EAAWT,EAAQP,gBAAkB,KACrC,MACJ,IAAK,aACDgB,EAAWT,EAAQN,YAAc,KACjC,MACJ,IAAK,eACDe,EAAWT,EAAQL,cAAgB,KACnC,MACJ,IAAK,gBACDc,EAAWT,EAAQU,qBAAuB,KAE1C,MAAMC,EAAQL,EAAM5L,KAAK,uBACnBkM,EAAQ,GACVZ,EAAQa,oBAAoBD,EAAMjD,KAAK,QAAQqC,EAAQa,sBACvDb,EAAQc,wBAAwBF,EAAMjD,KAAK,YAAYqC,EAAQc,0BAC/Dd,EAAQe,sBAAsBH,EAAMjD,KAAK,UAAUqC,EAAQe,wBAC3Df,EAAQgB,0BAA0BJ,EAAMjD,KAAK,cAAcqC,EAAQgB,4BACnEJ,EAAM/G,QACN8G,EAAMhL,KAAKiL,EAAM1D,KAAK,QAE1B,MACJ,IAAK,gBACDuD,EAAWT,EAAQJ,eAAiB,KACpC,MACJ,IAAK,SACDa,EAAWT,EAAQH,QAAU,KAC7B,MACJ,IAAK,oBACDY,EAAWT,EAAQF,mBAAqB,KACxC,MACJ,IAAK,iBACL,IAAK,UACDW,EAAWT,EAAQD,aAAe,KAClC,MACJ,IAAK,kBACDU,EAAWT,EAAQiB,iBAAmB,KAK7BV,EAAO5K,SACP8K,EACbF,EAAO1B,QAAQ,IAAK,WAChBlM,EAAE3B,MAAM2E,KAAK8K,GAAUS,OAAO,IAClC,GAEAX,EAAO5K,KAAK8K,EAEpB,GAGA,MAAMU,GAAM,IAAIC,MAAOC,qBACvB1O,EAAE,yBAAyBgD,KAAK,iBAAiBwL,IACrD,CAGAhE,UAAAA,CAAWxH,GACP,MAAM2L,EAAMjP,SAASkP,cAAc,OAEnC,OADAD,EAAIE,YAAc7L,EACX2L,EAAIG,SACf,EAIJ9O,EAAEN,UAAUqP,MAAM,KAEd,IAAIpJ,GAEX,CAt9BD,CAs9BGqJ,O","sources":["webpack://ace-redis-cache/./assets/src/js/components/SaveBar.js","webpack://ace-redis-cache/./assets/src/js/admin.js"],"sourcesContent":["/**\n * SaveBar Component for Ace Redis Cache\n * \n * Inspired by GlossPress SaveBar - provides a fixed bottom save bar\n * with save status messages, unsaved changes tracking and immediate auto-save\n *\n * @package AceMedia\\RedisCache\n * @since 0.5.0\n */\n\nclass SaveBar {\n    constructor(options = {}) {\n        this.options = {\n            containerSelector: '#ace-redis-settings-form',\n            saveButtonSelector: '#ace-redis-save-btn',\n            messageContainerSelector: '#ace-redis-messages',\n            onSave: null,\n            ...options\n        };\n\n        this.isInitialized = false;\n        this.hasUnsavedChanges = false;\n        this.isSaving = false;\n        this.isAutoSaveEnabled = localStorage.getItem('ace_redis_auto_save_enabled') !== '0'; // Default to enabled\n        this.isSuccess = false;\n        this.message = '';\n        this.elapsedTime = 0;\n        this.intervalId = null;\n        this.originalFormData = null;\n\n        this.init();\n    }\n\n    init() {\n        if (this.isInitialized) return;\n        \n        this.createSaveBar();\n        this.setupEventListeners();\n        this.captureOriginalFormData();\n        this.updateSaveButtonState();\n        this.isInitialized = true;\n    }\n\n    createSaveBar() {\n        // Check if SaveBar already exists\n        if (document.querySelector('.ace-redis-save-bar')) {\n            return;\n        }\n\n        const autoSaveToggle = this.isAutoSaveEnabled ? 'checked' : '';\n\n        const saveBarHTML = `\n            <div class=\"ace-redis-save-bar\">\n                <div class=\"save-bar-content\">\n                    <div class=\"save-bar-left\">\n                        <span class=\"save-message\"></span>\n                    </div>\n                    <div class=\"save-bar-right\">\n                        <div class=\"auto-save-toggle-wrapper\">\n                            <label class=\"ace-switch\" for=\"auto-save-toggle\">\n                                <input type=\"checkbox\" id=\"auto-save-toggle\" ${autoSaveToggle}>\n                                <span class=\"ace-slider\"></span>\n                            </label>\n                            <span class=\"toggle-label\">Auto-save</span>\n                        </div>\n                        <button type=\"button\" id=\"save-bar-button\" class=\"button button-primary\" disabled>\n                            <span class=\"dashicons dashicons-admin-settings\"></span>\n                            <span class=\"button-text\">Saved</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Insert SaveBar into DOM\n        document.body.insertAdjacentHTML('beforeend', saveBarHTML);\n        this.updateFixedPosition();\n    }\n\n    setupEventListeners() {\n        // Watch for form changes\n        $(this.options.containerSelector).on('input change', 'input, select, textarea', () => {\n            setTimeout(() => this.checkForChanges(), 10);\n        });\n\n        // SaveBar button click\n        $(document).on('click', '#save-bar-button', (e) => {\n            e.preventDefault();\n            this.handleSave();\n        });\n\n        // Auto-save toggle click\n        $(document).on('change', '#auto-save-toggle', () => {\n            this.toggleAutoSave();\n        });\n\n        // Window events for positioning\n        $(window).on('resize scroll load', () => this.updateFixedPosition());\n\n        // Prevent unsaved changes from being lost\n        $(window).on('beforeunload', (e) => {\n            if (this.hasUnsavedChanges && !this.isSaving) {\n                const message = 'You have unsaved changes. Are you sure you want to leave?';\n                e.originalEvent.returnValue = message;\n                return message;\n            }\n        });\n\n        // WordPress admin menu resize handling\n        if (window.wp && wp.hooks) {\n            wp.hooks.addAction('wp-collapse-menu', 'ace-redis-cache', () => {\n                setTimeout(() => this.updateFixedPosition(), 300);\n            });\n        }\n    }\n\n    updateFixedPosition() {\n        const saveBar = document.querySelector('.ace-redis-save-bar');\n        if (!saveBar) return;\n\n        const adminMenuWrap = document.querySelector('#adminmenuwrap');\n        if (adminMenuWrap) {\n            const adminMenuWidth = adminMenuWrap.offsetWidth;\n            saveBar.style.left = `${adminMenuWidth}px`;\n        }\n    }\n\n    captureOriginalFormData() {\n        const $form = $(this.options.containerSelector);\n        this.originalFormData = this.getFormDataObject($form);\n    }\n\n    getFormDataObject($form) {\n        const formData = {};\n        \n        $form.serializeArray().forEach(field => {\n            if (field.name.startsWith('ace_redis_cache_settings[')) {\n                const key = field.name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                formData[key] = field.value;\n            }\n        });\n\n        // Add checkbox values (unchecked boxes don't get serialized)\n        $form.find('input[type=\"checkbox\"]').each(function() {\n            const name = $(this).attr('name');\n            if (name && name.startsWith('ace_redis_cache_settings[')) {\n                const key = name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                formData[key] = $(this).is(':checked') ? '1' : '0';\n            }\n        });\n        \n        return formData;\n    }\n\n    checkForChanges() {\n        if (!this.originalFormData) return;\n        \n        const $form = $(this.options.containerSelector);\n        const currentData = this.getFormDataObject($form);\n        const hasChanges = JSON.stringify(this.originalFormData) !== JSON.stringify(currentData);\n        \n        this.setUnsavedChanges(hasChanges);\n    }\n\n    setUnsavedChanges(hasChanges) {\n        if (this.hasUnsavedChanges !== hasChanges) {\n            this.hasUnsavedChanges = hasChanges;\n            this.updateSaveButtonState();\n            \n            if (hasChanges) {\n                this.startElapsedTimeTracking();\n                // Auto-save immediately when changes are detected (if enabled)\n                if (this.isAutoSaveEnabled) {\n                    setTimeout(() => this.handleAutoSave(), 500); // Small delay to avoid rapid saves\n                }\n            } else {\n                this.stopElapsedTimeTracking();\n            }\n        }\n    }\n\n    updateSaveButtonState() {\n        const $button = $('#save-bar-button');\n        const $buttonText = $button.find('.button-text');\n        const $icon = $button.find('.dashicons');\n\n        if (this.isSaving) {\n            $button.prop('disabled', true).removeClass('success');\n            $buttonText.text('Saving...');\n            $icon.removeClass('dashicons-admin-settings dashicons-yes-alt').addClass('dashicons-update');\n        } else if (this.isSuccess) {\n            $button.prop('disabled', true).addClass('success');\n            $buttonText.text('Saved!');\n            $icon.removeClass('dashicons-admin-settings dashicons-update').addClass('dashicons-yes-alt');\n        } else if (this.hasUnsavedChanges) {\n            $button.prop('disabled', false).removeClass('success');\n            $buttonText.text('Save Changes');\n            $icon.removeClass('dashicons-update dashicons-yes-alt').addClass('dashicons-admin-settings');\n        } else {\n            $button.prop('disabled', true).removeClass('success');\n            $buttonText.text('Saved');\n            $icon.removeClass('dashicons-update dashicons-yes-alt').addClass('dashicons-admin-settings');\n        }\n    }\n\n    async handleSave() {\n        if (!this.hasUnsavedChanges || this.isSaving) return;\n\n        this.setSaving(true);\n        \n        try {\n            let success = false;\n            \n            if (this.options.onSave && typeof this.options.onSave === 'function') {\n                success = await this.options.onSave();\n            } else {\n                // Default save logic - trigger the original form save\n                success = await this.defaultSave();\n            }\n\n            if (success) {\n                this.showMessage('Settings saved successfully!', 'success');\n                this.setSuccess(true);\n                this.captureOriginalFormData();\n                this.setUnsavedChanges(false);\n                \n                // Clear success state after 3 seconds\n                setTimeout(() => this.setSuccess(false), 3000);\n            } else {\n                this.showMessage('Save failed. Please try again.', 'error');\n            }\n        } catch (error) {\n            console.error('Save error:', error);\n            this.showMessage('An error occurred while saving.', 'error');\n        } finally {\n            this.setSaving(false);\n        }\n    }\n\n    async handleAutoSave() {\n        if (!this.hasUnsavedChanges || this.isSaving) return;\n\n        console.log('[SaveBar] Auto-saving changes...');\n        this.showMessage('Auto-saving...', 'info');\n\n        try {\n            let success = false;\n            \n            if (this.options.onSave && typeof this.options.onSave === 'function') {\n                success = await this.options.onSave();\n            } else {\n                success = await this.defaultSave();\n            }\n\n            if (success) {\n                this.showMessage('Changes auto-saved!', 'success');\n                this.captureOriginalFormData();\n                this.setUnsavedChanges(false);\n            } else {\n                this.showMessage('Auto-save failed', 'error');\n            }\n        } catch (error) {\n            console.error('[SaveBar] Auto-save error:', error);\n            this.showMessage('Auto-save error occurred', 'error');\n        }\n    }\n\n    async defaultSave() {\n        return new Promise((resolve) => {\n            const $form = $(this.options.containerSelector);\n            const formData = this.getFormDataObject($form);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    settings: formData,\n                    nonce: ace_redis_admin.nonce\n                },\n                success: (response) => {\n                    resolve(response.success === true);\n                },\n                error: () => {\n                    resolve(false);\n                }\n            });\n        });\n    }\n\n    setSaving(isSaving) {\n        this.isSaving = isSaving;\n        this.updateSaveButtonState();\n    }\n\n    setSuccess(isSuccess) {\n        this.isSuccess = isSuccess;\n        this.updateSaveButtonState();\n    }\n\n    showMessage(message, type = 'info') {\n        this.message = message;\n        this.updateMessageDisplay(type);\n\n        // Start elapsed time tracking for success messages\n        if (type === 'success') {\n            this.startElapsedTimeTracking();\n        }\n\n        // Auto-hide messages after different intervals based on type\n        const hideDelay = type === 'error' ? 8000 : (type === 'success' ? 5000 : 3000);\n        setTimeout(() => {\n            this.clearMessage();\n        }, hideDelay);\n    }\n\n    updateMessageDisplay(type = 'info') {\n        const $messageContainer = $('.save-message');\n        \n        if (this.message) {\n            $messageContainer\n                .text(this.message)\n                .addClass('visible')\n                .removeClass('error success info')\n                .addClass(type);\n        } else {\n            $messageContainer\n                .removeClass('visible error success info')\n                .text('');\n        }\n    }\n\n    clearMessage() {\n        this.message = '';\n        this.updateMessageDisplay();\n        this.stopElapsedTimeTracking();\n    }\n\n    startElapsedTimeTracking() {\n        this.stopElapsedTimeTracking();\n        this.elapsedTime = 0;\n        \n        this.intervalId = setInterval(() => {\n            this.elapsedTime++;\n            this.updateElapsedTimeDisplay();\n        }, 1000);\n    }\n\n    stopElapsedTimeTracking() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = null;\n        }\n    }\n\n    updateElapsedTimeDisplay() {\n        if (this.elapsedTime > 0) {\n            const timeText = this.formatElapsedTime(this.elapsedTime);\n            $('.save-message').text(timeText);\n        }\n    }\n\n    formatElapsedTime(seconds) {\n        if (seconds < 60) return `${seconds}s ago`;\n        if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;\n        return `${Math.floor(seconds / 3600)}h ago`;\n    }\n\n    toggleAutoSave() {\n        const $toggle = $('#auto-save-toggle');\n        this.isAutoSaveEnabled = $toggle.is(':checked');\n        \n        if (this.isAutoSaveEnabled) {\n            this.showMessage('Auto-save enabled - changes will be saved automatically', 'success');\n        } else {\n            this.showMessage('Auto-save disabled - manual save required', 'info');\n        }\n        \n        // Store the preference\n        localStorage.setItem('ace_redis_auto_save_enabled', this.isAutoSaveEnabled ? '1' : '0');\n    }\n\n    destroy() {\n        this.stopElapsedTimeTracking();\n        \n        // Remove event listeners\n        $(this.options.containerSelector).off('input change');\n        $(document).off('click', '#save-bar-button');\n        $(document).off('change', '#auto-save-toggle');\n        $(window).off('resize scroll load');\n        $(window).off('beforeunload');\n\n        // Remove SaveBar from DOM\n        $('.ace-redis-save-bar').remove();\n        \n        this.isInitialized = false;\n    }\n}\n\n// Export the SaveBar class as default for ES6 modules\nexport default SaveBar;\n","/**\n * Ace Redis Cache Admin JavaScript\n *\n * Handles admin interface interactions, AJAX requests,\n * and dynamic UI updates.\n *\n * @package AceMedia\\RedisCache\n * @since 0.5.0\n */\n\n// Import SaveBar component\nimport SaveBar from './components/SaveBar.js';\n\n(function($) {\n    'use strict';\n\n    // Make SaveBar available globally for WordPress integration\n    window.AceRedisCacheSaveBar = SaveBar;\n\n    // Main admin class\n    class AceRedisCacheAdmin {\n        constructor() {\n            this.originalFormData = null;\n            this.init();\n        }\n\n        init() {\n            this.initTabs();\n            this.initToggleSwitch();\n            this.initCacheMode();\n            this.initConnectionTest();\n            this.initCacheManagement();\n            this.initDiagnostics();\n            this.initPerformanceMetrics();\n            this.initAjaxForm();\n            this.initFormValidation();\n            this.initChangeTracking();\n            this.initSaveBar(); // Initialize the SaveBar component\n        }\n\n        // Initialize SaveBar component\n        initSaveBar() {\n            // Wait for SaveBar component to be available\n            if (typeof window.AceRedisCacheSaveBar !== 'undefined') {\n                this.saveBar = new window.AceRedisCacheSaveBar({\n                    containerSelector: '#ace-redis-settings-form',\n                    saveButtonSelector: '#ace-redis-save-btn',\n                    messageContainerSelector: '#ace-redis-messages',\n                    onSave: () => this.saveSettingsViaSaveBar(),\n                    autoSaveEnabled: false,\n                    autoSaveInterval: 15000 // 15 seconds - shorter interval for better UX\n                });\n                console.log('SaveBar initialized successfully');\n            } else {\n                // Fallback if SaveBar component isn't loaded\n                console.warn('SaveBar component not loaded, falling back to standard save handling');\n            }\n        }\n\n        // Save settings specifically for SaveBar component\n        async saveSettingsViaSaveBar() {\n            try {\n                const success = await this.performSaveSettings();\n                \n                if (success) {\n                    // Refresh connection status after successful save\n                    setTimeout(() => {\n                        if (typeof this.testConnection === 'function') {\n                            this.testConnection();\n                        }\n                    }, 1000);\n                }\n                \n                return success;\n            } catch (error) {\n                console.error('SaveBar save error:', error);\n                return false;\n            }\n        }\n\n        // Extracted save logic that can be used by both SaveBar and regular form\n        async performSaveSettings() {\n            return new Promise((resolve) => {\n                const $form = $('#ace-redis-settings-form');\n                const formData = this.getFormDataObject();\n\n                $.ajax({\n                    url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                    type: 'POST',\n                    beforeSend: function(xhr) {\n                        xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                    },\n                    data: {\n                        settings: formData,\n                        nonce: ace_redis_admin.nonce\n                    },\n                    success: (response) => {\n                        if (response.success) {\n                            // Update the original form data for change tracking\n                            this.captureOriginalFormData();\n                            resolve(true);\n                        } else {\n                            resolve(false);\n                        }\n                    },\n                    error: () => {\n                        resolve(false);\n                    }\n                });\n            });\n        }\n\n        // Initialize tab navigation\n        initTabs() {\n            // Handle tab clicks\n            $('.nav-tab').on('click', (e) => {\n                e.preventDefault();\n                const target = $(e.target).attr('href');\n                this.switchToTab(target);\n                \n                // Update URL hash\n                if (target.startsWith('#')) {\n                    window.location.hash = target;\n                }\n            });\n            \n            // Handle browser back/forward navigation\n            $(window).on('hashchange', () => {\n                this.handleHashChange();\n            });\n            \n            // Initialize tab based on URL hash on page load\n            this.handleHashChange();\n        }\n        \n        // Switch to a specific tab\n        switchToTab(target) {\n            if (!target || !$(target).length) {\n                return;\n            }\n            \n            // Update tab states\n            $('.nav-tab').removeClass('nav-tab-active');\n            $(`.nav-tab[href=\"${target}\"]`).addClass('nav-tab-active');\n\n            // Update content visibility with fade effect\n            $('.tab-content.active').removeClass('active');\n            setTimeout(() => {\n                $(target).addClass('active');\n                \n                // Load metrics when diagnostics tab is opened\n                if (target === '#diagnostics') {\n                    setTimeout(() => {\n                        $('#refresh-metrics-btn').click();\n                    }, 100);\n                    // Resume timer countdown if auto-refresh is enabled\n                    this.resumeAutoRefreshTimer();\n                } else {\n                    // Pause timer countdown when leaving diagnostics tab\n                    this.pauseAutoRefreshTimer();\n                }\n            }, 50); // Small delay to allow previous content to fade out\n        }\n        \n        // Handle URL hash changes\n        handleHashChange() {\n            let hash = window.location.hash;\n            \n            // If no hash or invalid hash, default to first tab\n            if (!hash || !$(hash).length) {\n                const firstTab = $('.nav-tab').first().attr('href');\n                if (firstTab) {\n                    hash = firstTab;\n                    // Don't update URL if we're defaulting to first tab\n                }\n            }\n            \n            // Switch to the tab if it exists\n            if (hash && $(hash).length) {\n                this.switchToTab(hash);\n            }\n        }\n\n        // Initialize toggle switches\n        initToggleSwitch() {\n            $('.ace-switch input').on('change', function() {\n                const $switch = $(this);\n                const $slider = $switch.siblings('.ace-slider');\n\n                // Add visual feedback\n                if ($switch.is(':checked')) {\n                    $slider.addClass('checked');\n                } else {\n                    $slider.removeClass('checked');\n                }\n            });\n        }\n\n        // Initialize cache mode handling\n        initCacheMode() {\n            const toggleBlockCachingOption = () => {\n                const cacheMode = $('#cache-mode-select').val();\n                const $blockCachingRow = $('#block-caching-row');\n                const $blockCachingCheckbox = $('input[name=\"ace_redis_cache_settings[enable_block_caching]\"]');\n                const $transientRow = $('#transient-cache-row');\n                const $transientCheckbox = $('input[name=\"ace_redis_cache_settings[enable_transient_cache]\"]');\n\n                const show = cacheMode === 'object';\n                $blockCachingRow.toggle(show);\n                $transientRow.toggle(show);\n                // no query cache row\n                if (!show) {\n                    $blockCachingCheckbox.prop('checked', false);\n                    $transientCheckbox.prop('checked', false);\n                }\n            };\n\n            // Initialize on page load\n            toggleBlockCachingOption();\n\n            // Handle cache mode changes\n            $('#cache-mode-select').on('change', toggleBlockCachingOption);\n        }\n\n        // Initialize connection testing\n        initConnectionTest() {\n            $('#ace-redis-cache-test-btn').on('click', (e) => {\n                e.preventDefault();\n                this.testConnection();\n            });\n\n            $('#ace-redis-cache-test-write-btn').on('click', (e) => {\n                e.preventDefault();\n                this.testWriteRead();\n            });\n        }\n\n        // Test Redis connection\n        testConnection() {\n            const $btn = $('#ace-redis-cache-test-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Testing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/test-connection\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.updateConnectionStatus(response.data);\n                    } else {\n                        this.showConnectionError(response.data || 'Connection failed');\n                    }\n                })\n                .fail(() => {\n                    this.showConnectionError('REST API request failed');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Test write/read operations\n        testWriteRead() {\n            const $btn = $('#ace-redis-cache-test-write-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Testing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/test-write-read\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(\n                            '✅ Write/Read Test Successful\\n' +\n                        `Write: ${response.data.write}\\n` +\n                        `Read: ${response.data.read}\\n` +\n                        `Value: ${response.data.value}`,\n                            'success'\n                        );\n                    } else {\n                        this.showNotification(`❌ Test failed: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ REST API request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Update connection status display\n        updateConnectionStatus(data) {\n            const $status = $('#ace-redis-cache-connection');\n            const $size = $('#ace-redis-cache-size');\n            const $serverInfo = $('#redis-server-info');\n            const $serverType = $('#redis-server-type');\n            const $suggestions = $('#redis-suggestions');\n\n            $status.text(data.status)\n                .removeClass('status-unknown status-error')\n                .addClass('status-success');\n\n            let sizeText = `${data.size} keys (${data.size_kb} KB)`;\n            if (data.debug_info) {\n                sizeText += ` - ${data.debug_info}`;\n            }\n            $size.text(sizeText);\n            \n            // Show server information if available\n            if (data.server_type || data.suggestions) {\n                $serverType.text(data.server_type || 'Unknown');\n                \n                // Display suggestions\n                if (data.suggestions && data.suggestions.length > 0) {\n                    let suggestionsHtml = '<p><strong>Recommendations:</strong></p><ul>';\n                    data.suggestions.forEach(suggestion => {\n                        suggestionsHtml += `<li>${suggestion}</li>`;\n                    });\n                    suggestionsHtml += '</ul>';\n                    $suggestions.html(suggestionsHtml);\n                } else {\n                    $suggestions.html('<p><strong>Recommendations:</strong> Configuration looks good ✅</p>');\n                }\n                \n                $serverInfo.slideDown(300);\n            }\n        }\n\n        // Show connection error\n        showConnectionError(message) {\n            const $status = $('#ace-redis-cache-connection');\n            const $size = $('#ace-redis-cache-size');\n            const $serverInfo = $('#redis-server-info');\n\n            $status.text(message)\n                .removeClass('status-unknown status-success')\n                .addClass('status-error');\n\n            $size.text('0 keys (0 KB)');\n            $serverInfo.slideUp(300);\n        }\n\n        // Initialize cache management\n        initCacheManagement() {\n            $('#ace-redis-cache-flush-btn').on('click', (e) => {\n                e.preventDefault();\n                this.clearAllCache();\n            });\n        }\n\n        // Clear all cache\n        clearAllCache() {\n            if (!confirm('Are you sure you want to clear all cache? This action cannot be undone.')) {\n                return;\n            }\n\n            const $btn = $('#ace-redis-cache-flush-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Clearing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/flush-cache\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce,\n                    type: 'all'\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(`✅ ${response.data.message || 'Cache cleared successfully'}`, 'success');\n                        $('#ace-redis-cache-size').text('0 keys (0 KB)');\n                    } else {\n                        this.showNotification(`❌ Failed to clear cache: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ REST API request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n    // Note: clearBlockCache removed; single Clear All handles all plugin-managed keys.\n\n        // Initialize diagnostics\n        initDiagnostics() {\n            $('#ace-redis-cache-diagnostics-btn').on('click', (e) => {\n                e.preventDefault();\n                this.runDiagnostics();\n            });\n        }\n\n        // Run system diagnostics\n        runDiagnostics() {\n            const $btn = $('#ace-redis-cache-diagnostics-btn');\n            const $results = $('#diagnostics-results');\n            const originalText = $btn.text();\n\n            $btn.text('Running...').prop('disabled', true);\n            $results.html('<p>⏳ Running comprehensive diagnostics...</p>');\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/diagnostics\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success && response.data) {\n                        const diagnostics = Array.isArray(response.data)\n                            ? response.data.join('\\n')\n                            : response.data;\n                        $results.html(`<pre>${this.escapeHtml(diagnostics)}</pre>`);\n                    } else {\n                        $results.html(`<p class=\"error\">❌ Failed to load diagnostics: ${response.data || 'Unknown error'}</p>`);\n                    }\n                })\n                .fail(() => {\n                    $results.html('<p class=\"error\">❌ Diagnostics REST API request failed</p>');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Initialize form validation\n        initFormValidation() {\n            $('#ace-redis-save-btn').on('click', (e) => {\n                if (!this.validateForm()) {\n                    e.preventDefault();\n                    return false;\n                }\n            });\n\n            // Real-time validation\n            $('#redis_host').on('blur', this.validateHost);\n            $('#redis_port').on('blur', this.validatePort);\n            $('#cache_ttl').on('blur', this.validateTTL);\n        }\n\n        // Validate form inputs\n        validateForm() {\n            let isValid = true;\n            const errors = [];\n\n            // Validate host\n            const host = $('#redis_host').val().trim();\n            if (!host) {\n                errors.push('Redis host is required');\n                isValid = false;\n            }\n\n            // Validate port\n            const port = parseInt($('#redis_port').val());\n            if (!port || port < 1 || port > 65535) {\n                errors.push('Redis port must be between 1 and 65535');\n                isValid = false;\n            }\n\n            // Validate TTL\n            const ttl = parseInt($('#cache_ttl').val());\n            if (!ttl || ttl < 60) {\n                errors.push('Cache TTL must be at least 60 seconds');\n                isValid = false;\n            }\n\n            if (!isValid) {\n                this.showNotification(`❌ Validation errors:\\n${errors.join('\\n')}`, 'error');\n            }\n\n            return isValid;\n        }\n\n        // Individual field validators\n        validateHost() {\n            const $field = $(this);\n            const value = $field.val().trim();\n\n            if (!value) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        validatePort() {\n            const $field = $(this);\n            const value = parseInt($field.val());\n\n            if (!value || value < 1 || value > 65535) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        validateTTL() {\n            const $field = $(this);\n            const value = parseInt($field.val());\n\n            if (!value || value < 60) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        // Show notification\n        showNotification(message, type = 'info') {\n            // Use native alert for now - can be enhanced later\n            alert(message);\n\n            // Future: Create toast notifications\n            // this.createToast(message, type);\n        }\n\n        // Initialize AJAX form submission\n        initAjaxForm() {\n            console.log('Initializing AJAX form...');\n            \n            // Handle form submission\n            $('#ace-redis-settings-form').on('submit', (e) => {\n                console.log('Form submit intercepted');\n                e.preventDefault();\n                e.stopPropagation();\n                this.saveSettings();\n                return false;\n            });\n            \n            // Also handle direct button click as backup\n            $('#ace-redis-save-btn').on('click', (e) => {\n                console.log('Save button clicked');\n                e.preventDefault();\n                e.stopPropagation();\n                this.saveSettings();\n                return false;\n            });\n        }\n\n        // Initialize change tracking for form fields\n        initChangeTracking() {\n            // Store original form data\n            setTimeout(() => {\n                // Store original button text\n                const $button = $('#ace-redis-save-btn');\n                if (!$button.data('original-text')) {\n                    $button.data('original-text', $button.val());\n                }\n                \n                this.captureOriginalFormData();\n                this.updateSaveButtonState();\n                \n                // Watch for changes\n                $('#ace-redis-settings-form input, #ace-redis-settings-form select, #ace-redis-settings-form textarea').on('input change', () => {\n                    setTimeout(() => this.updateSaveButtonState(), 10);\n                });\n            }, 100);\n        }\n        \n        // Capture original form data\n        captureOriginalFormData() {\n            this.originalFormData = this.getFormDataObject();\n        }\n        \n        // Check if form has changes\n        hasFormChanges() {\n            if (!this.originalFormData) return false;\n            \n            const currentData = this.getFormDataObject();\n            return JSON.stringify(this.originalFormData) !== JSON.stringify(currentData);\n        }\n        \n        // Update save button state based on changes\n        updateSaveButtonState() {\n            const $button = $('#ace-redis-save-btn');\n            const hasChanges = this.hasFormChanges();\n            \n            $button.prop('disabled', !hasChanges);\n            \n            if (!hasChanges) {\n                $button.val($button.data('original-text') || 'Save Changes (No Changes)');\n            } else {\n                $button.val($button.data('original-text') || 'Save Changes');\n            }\n        }\n        \n        // Get form data as object\n        getFormDataObject() {\n            const $form = $('#ace-redis-settings-form');\n            const formData = {};\n            \n            $form.serializeArray().forEach(field => {\n                if (field.name.startsWith('ace_redis_cache_settings[')) {\n                    const key = field.name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                    formData[key] = field.value;\n                }\n            });\n\n            // Add checkbox values (unchecked boxes don't get serialized)\n            $form.find('input[type=\"checkbox\"]').each(function() {\n                const name = $(this).attr('name');\n                if (name && name.startsWith('ace_redis_cache_settings[')) {\n                    const key = name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                    formData[key] = $(this).is(':checked') ? '1' : '0';\n                }\n            });\n            \n            return formData;\n        }\n\n        // Save settings via REST API\n        saveSettings() {\n            // Check if SaveBar is handling saves\n            if (this.saveBar) {\n                // Let SaveBar handle the save\n                this.saveBar.handleSave();\n                return;\n            }\n            \n            // Fallback to original save logic\n            this.performOriginalSave();\n        }\n\n        // Original save method for backward compatibility\n        performOriginalSave() {\n            // Check for changes first\n            if (!this.hasFormChanges()) {\n                this.showMessage('Error: Failed to save settings. No changes detected or database error.', 'error');\n                return;\n            }\n            \n            const $form = $('#ace-redis-settings-form');\n            const $button = $('#ace-redis-save-btn');\n            const $messages = $('#ace-redis-messages');\n            \n            console.log('REST API Save triggered...');\n            \n            // Show loading state\n            const originalText = $button.val();\n            $button.val('Saving...').prop('disabled', true);\n            $messages.hide();\n\n            // Get form data\n            const formData = this.getFormDataObject();\n\n            console.log('Sending data:', formData);\n            console.log('REST URL:', ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings');\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                    console.log('Set REST nonce:', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    settings: formData,\n                    nonce: ace_redis_admin.nonce\n                },\n                success: (response) => {\n                    console.log('Success response:', response);\n                    if (response.success) {\n                        this.showMessage(response.message || 'Settings saved successfully!', 'success');\n                        \n                        // Update original form data and button state\n                        this.captureOriginalFormData();\n                        this.updateSaveButtonState();\n                        \n                        // Refresh connection status after save\n                        setTimeout(() => {\n                            if (typeof this.testConnection === 'function') {\n                                this.testConnection();\n                            }\n                        }, 1000);\n                    } else {\n                        this.showMessage(response.message || 'Failed to save settings', 'error');\n                    }\n                },\n                error: (xhr, status, error) => {\n                    console.error('Save error:', {\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                        responseText: xhr.responseText,\n                        error: error\n                    });\n                    \n                    let errorMessage = 'Network error occurred';\n                    \n                    if (xhr.responseJSON && xhr.responseJSON.message) {\n                        errorMessage = xhr.responseJSON.message;\n                    } else if (xhr.status === 504) {\n                        errorMessage = 'Gateway timeout - settings may still be saved. Please refresh the page.';\n                    } else if (xhr.status === 403) {\n                        errorMessage = 'Permission denied. Please refresh the page and try again.';\n                    } else if (xhr.status === 404) {\n                        errorMessage = 'REST API endpoint not found. The plugin may not be properly configured.';\n                    } else {\n                        errorMessage = `${error} (Status: ${xhr.status})`;\n                    }\n                    \n                    this.showMessage('Error: ' + errorMessage, 'error');\n                },\n                complete: () => {\n                    // Reset button state\n                    $button.val(originalText).prop('disabled', false);\n                }\n            });\n        }\n\n        // Show success/error message\n        showMessage(message, type = 'success') {\n            const $messages = $('#ace-redis-messages');\n            const cssClass = type === 'success' ? 'notice-success' : 'notice-error';\n            \n            $messages.html(`\n                <div class=\"notice ${cssClass} is-dismissible\">\n                    <p>${this.escapeHtml(message)}</p>\n                    <button type=\"button\" class=\"notice-dismiss\">\n                        <span class=\"screen-reader-text\">Dismiss this notice.</span>\n                    </button>\n                </div>\n            `).show();\n\n            // Auto-hide success messages after 5 seconds\n            if (type === 'success') {\n                setTimeout(() => {\n                    $messages.fadeOut();\n                }, 5000);\n            }\n\n            // Handle dismiss button\n            $messages.find('.notice-dismiss').on('click', function() {\n                $messages.fadeOut();\n            });\n        }\n\n        // Initialize performance metrics\n        initPerformanceMetrics() {\n            // Load metrics immediately if diagnostics tab is active\n            if ($('#diagnostics').hasClass('active')) {\n                setTimeout(() => {\n                    $('#refresh-metrics-btn').click();\n                }, 100);\n            }\n            \n            // Initialize auto-refresh functionality\n            this.initAutoRefresh();\n            \n            // Manual refresh button\n            $('#refresh-metrics-btn').on('click', () => {\n                this.loadPerformanceMetrics();\n                // Visual feedback for manual refresh\n                const $btn = $('#refresh-metrics-btn');\n                $btn.prop('disabled', true).html('⏳');\n                setTimeout(() => {\n                    $btn.prop('disabled', false).html('🔄');\n                }, 1000);\n            });\n        }\n        \n        // Initialize auto-refresh functionality\n        initAutoRefresh() {\n            // Store references at class level\n            this.autoRefreshInterval = null;\n            this.countdownInterval = null;\n            this.remainingSeconds = 0;\n            \n            const updateTimer = () => {\n                const $timer = $('#refresh-timer');\n                if (this.remainingSeconds > 0) {\n                    $timer.text(`Next refresh in ${this.remainingSeconds}s`);\n                    this.remainingSeconds--;\n                } else {\n                    $timer.text('');\n                }\n            };\n            \n            this.startAutoRefresh = (seconds) => {\n                // Clear existing intervals\n                if (this.autoRefreshInterval) {\n                    clearInterval(this.autoRefreshInterval);\n                }\n                if (this.countdownInterval) {\n                    clearInterval(this.countdownInterval);\n                }\n                \n                const $timer = $('#refresh-timer');\n                \n                if (seconds > 0) {\n                    this.remainingSeconds = seconds;\n                    \n                    // Start countdown timer\n                    this.countdownInterval = setInterval(updateTimer, 1000);\n                    \n                    // Start auto-refresh timer\n                    this.autoRefreshInterval = setInterval(() => {\n                        // Only refresh if diagnostics tab is active\n                        if ($('#diagnostics').hasClass('active')) {\n                            $('#refresh-metrics-btn').click();\n                            this.remainingSeconds = seconds; // Reset countdown\n                        }\n                    }, seconds * 1000);\n                    \n                    updateTimer(); // Show initial timer\n                } else {\n                    $timer.text('');\n                }\n            };\n            \n            // Handle dropdown change\n            $('#auto-refresh-select').on('change', () => {\n                const seconds = parseInt($('#auto-refresh-select').val());\n                this.startAutoRefresh(seconds);\n            });\n            \n            // Start with default value (30 seconds)\n            this.startAutoRefresh(30);\n        }\n        \n        // Pause auto-refresh timer (when leaving diagnostics tab)\n        pauseAutoRefreshTimer() {\n            if (this.countdownInterval) {\n                clearInterval(this.countdownInterval);\n            }\n            $('#refresh-timer').text('');\n        }\n        \n        // Resume auto-refresh timer (when entering diagnostics tab)\n        resumeAutoRefreshTimer() {\n            const selectedSeconds = parseInt($('#auto-refresh-select').val());\n            if (selectedSeconds > 0) {\n                // Restart the timer to show countdown immediately\n                this.startAutoRefresh(selectedSeconds);\n            }\n        }\n\n        // Load performance metrics via REST API\n        loadPerformanceMetrics() {\n            // Safety check - only load if diagnostics tab is active\n            if (!$('#diagnostics').hasClass('active')) {\n                return;\n            }\n            \n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/metrics',\n                type: 'GET',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                success: (response) => {\n                    // Double-check we're still on the diagnostics tab when response comes back\n                    if (!$('#diagnostics').hasClass('active')) {\n                        return;\n                    }\n                    \n                    if (response.success && response.data) {\n                        this.updateMetricsDisplay(response.data);\n                    } else if (response.data) {\n                        // Even on error, use the fallback data provided\n                        this.updateMetricsDisplay(response.data);\n                    }\n                },\n                error: () => {\n                    // Use fallback metrics on error\n                    this.updateMetricsDisplay({\n                        cache_hit_rate: '--',\n                        total_keys: '--',\n                        memory_usage: '--',\n                        response_time: '--',\n                        uptime: '--',\n                        connected_clients: '--',\n                        ops_per_sec: '--'\n                    });\n                }\n            });\n        }\n\n        // Update metrics display\n        updateMetricsDisplay(metrics) {\n            // Add debug logging for keyspace stats\n            console.log('Debug keyspace stats:', {\n                hits: metrics.debug_keyspace_hits,\n                misses: metrics.debug_keyspace_misses,\n                hit_rate: metrics.cache_hit_rate\n            });\n            \n            $('#performance-metrics .metric-card').each(function() {\n                const $card = $(this);\n                const $value = $card.find('.metric-value');\n                const title = $card.find('h4').text();\n                let newValue = '--';\n                \n                switch (title) {\n                    case 'Cache Hit Rate':\n                        newValue = metrics.cache_hit_rate || '--';\n                        break;\n                    case 'Total Keys':\n                        newValue = metrics.total_keys || '--';\n                        break;\n                    case 'Memory Usage':\n                        newValue = metrics.memory_usage || '--';\n                        break;\n                    case 'Plugin Memory':\n                        newValue = metrics.plugin_memory_total || '--';\n                        // Also update description with breakdown if available\n                        const $desc = $card.find('.metric-description');\n                        const parts = [];\n                        if (metrics.plugin_memory_page) parts.push(`Page ${metrics.plugin_memory_page}`);\n                        if (metrics.plugin_memory_minified) parts.push(`Minified ${metrics.plugin_memory_minified}`);\n                        if (metrics.plugin_memory_blocks) parts.push(`Blocks ${metrics.plugin_memory_blocks}`);\n                        if (metrics.plugin_memory_transients) parts.push(`Transients ${metrics.plugin_memory_transients}`);\n                        if (parts.length) {\n                            $desc.text(parts.join(' | '));\n                        }\n                        break;\n                    case 'Response Time':\n                        newValue = metrics.response_time || '--';\n                        break;\n                    case 'Uptime':\n                        newValue = metrics.uptime || '--';\n                        break;\n                    case 'Connected Clients':\n                        newValue = metrics.connected_clients || '--';\n                        break;\n                    case 'Operations/sec':\n                    case 'Ops/sec':\n                        newValue = metrics.ops_per_sec || '--';\n                        break;\n                    case 'Connection Time':\n                        newValue = metrics.connection_time || '--';\n                        break;\n                }\n                \n                // Add visual feedback when value changes\n                const oldValue = $value.text();\n                if (oldValue !== newValue) {\n                    $value.fadeOut(100, function() {\n                        $(this).text(newValue).fadeIn(100);\n                    });\n                } else {\n                    $value.text(newValue);\n                }\n            });\n            \n            // Update last updated timestamp\n            const now = new Date().toLocaleTimeString();\n            $('.metrics-last-updated').text(`Last updated: ${now}`);\n        }\n\n        // Escape HTML for safe display\n        escapeHtml(text) {\n            const div = document.createElement('div');\n            div.textContent = text;\n            return div.innerHTML;\n        }\n    }\n\n    // Initialize when document is ready\n    $(document).ready(() => {\n        // eslint-disable-next-line no-new\n        new AceRedisCacheAdmin();\n    });\n})(jQuery);\n"],"names":["constructor","options","this","containerSelector","saveButtonSelector","messageContainerSelector","onSave","isInitialized","hasUnsavedChanges","isSaving","isAutoSaveEnabled","localStorage","getItem","isSuccess","message","elapsedTime","intervalId","originalFormData","init","createSaveBar","setupEventListeners","captureOriginalFormData","updateSaveButtonState","document","querySelector","saveBarHTML","body","insertAdjacentHTML","updateFixedPosition","$","on","setTimeout","checkForChanges","e","preventDefault","handleSave","toggleAutoSave","window","originalEvent","returnValue","wp","hooks","addAction","saveBar","adminMenuWrap","adminMenuWidth","offsetWidth","style","left","$form","getFormDataObject","formData","serializeArray","forEach","field","name","startsWith","key","replace","value","find","each","attr","is","currentData","hasChanges","JSON","stringify","setUnsavedChanges","startElapsedTimeTracking","handleAutoSave","stopElapsedTimeTracking","$button","$buttonText","$icon","prop","removeClass","text","addClass","setSaving","success","defaultSave","showMessage","setSuccess","error","console","log","Promise","resolve","ajax","url","ace_redis_admin","rest_url","type","beforeSend","xhr","setRequestHeader","rest_nonce","data","settings","nonce","response","updateMessageDisplay","clearMessage","$messageContainer","setInterval","updateElapsedTimeDisplay","clearInterval","timeText","formatElapsedTime","seconds","Math","floor","$toggle","setItem","destroy","off","remove","AceRedisCacheSaveBar","SaveBar","AceRedisCacheAdmin","initTabs","initToggleSwitch","initCacheMode","initConnectionTest","initCacheManagement","initDiagnostics","initPerformanceMetrics","initAjaxForm","initFormValidation","initChangeTracking","initSaveBar","saveSettingsViaSaveBar","autoSaveEnabled","autoSaveInterval","warn","performSaveSettings","testConnection","target","switchToTab","location","hash","handleHashChange","length","click","resumeAutoRefreshTimer","pauseAutoRefreshTimer","firstTab","first","$switch","$slider","siblings","toggleBlockCachingOption","cacheMode","val","$blockCachingRow","$blockCachingCheckbox","$transientRow","$transientCheckbox","show","toggle","testWriteRead","$btn","originalText","done","updateConnectionStatus","showConnectionError","fail","always","showNotification","write","read","$status","$size","$serverInfo","$serverType","$suggestions","status","sizeText","size","size_kb","debug_info","server_type","suggestions","suggestionsHtml","suggestion","html","slideDown","slideUp","clearAllCache","confirm","runDiagnostics","$results","diagnostics","Array","isArray","join","escapeHtml","validateForm","validateHost","validatePort","validateTTL","isValid","errors","trim","push","port","parseInt","ttl","$field","alert","stopPropagation","saveSettings","hasFormChanges","performOriginalSave","$messages","hide","statusText","responseText","errorMessage","responseJSON","complete","cssClass","fadeOut","hasClass","initAutoRefresh","loadPerformanceMetrics","autoRefreshInterval","countdownInterval","remainingSeconds","updateTimer","$timer","startAutoRefresh","selectedSeconds","updateMetricsDisplay","cache_hit_rate","total_keys","memory_usage","response_time","uptime","connected_clients","ops_per_sec","metrics","hits","debug_keyspace_hits","misses","debug_keyspace_misses","hit_rate","$card","$value","title","newValue","plugin_memory_total","$desc","parts","plugin_memory_page","plugin_memory_minified","plugin_memory_blocks","plugin_memory_transients","connection_time","fadeIn","now","Date","toLocaleTimeString","div","createElement","textContent","innerHTML","ready","jQuery"],"sourceRoot":""}