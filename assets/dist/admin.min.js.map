{"version":3,"file":"admin.min.js","mappings":"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","sources":["webpack://ace-redis-cache/./assets/src/js/admin.js"],"sourcesContent":["/**\n * Ace Redis Cache Admin JavaScript\n *\n * Handles admin interface interactions, AJAX requests,\n * and dynamic UI updates.\n *\n * @package AceMedia\\RedisCache\n * @since 0.5.0\n */\n\n(function($) {\n    'use strict';\n\n    // Main admin class\n    class AceRedisCacheAdmin {\n        constructor() {\n            this.originalFormData = null;\n            this.init();\n        }\n\n        init() {\n            this.initTabs();\n            this.initToggleSwitch();\n            this.initCacheMode();\n            this.initConnectionTest();\n            this.initCacheManagement();\n            this.initDiagnostics();\n            this.initPerformanceMetrics();\n            this.initAjaxForm();\n            this.initFormValidation();\n            this.initChangeTracking();\n        }\n\n        // Initialize tab navigation\n        initTabs() {\n            // Handle tab clicks\n            $('.nav-tab').on('click', (e) => {\n                e.preventDefault();\n                const target = $(e.target).attr('href');\n                this.switchToTab(target);\n                \n                // Update URL hash\n                if (target.startsWith('#')) {\n                    window.location.hash = target;\n                }\n            });\n            \n            // Handle browser back/forward navigation\n            $(window).on('hashchange', () => {\n                this.handleHashChange();\n            });\n            \n            // Initialize tab based on URL hash on page load\n            this.handleHashChange();\n        }\n        \n        // Switch to a specific tab\n        switchToTab(target) {\n            if (!target || !$(target).length) {\n                return;\n            }\n            \n            // Update tab states\n            $('.nav-tab').removeClass('nav-tab-active');\n            $(`.nav-tab[href=\"${target}\"]`).addClass('nav-tab-active');\n\n            // Update content visibility with fade effect\n            $('.tab-content.active').removeClass('active');\n            setTimeout(() => {\n                $(target).addClass('active');\n                \n                // Load metrics when diagnostics tab is opened\n                if (target === '#diagnostics') {\n                    setTimeout(() => {\n                        $('#refresh-metrics-btn').click();\n                    }, 100);\n                    // Resume timer countdown if auto-refresh is enabled\n                    this.resumeAutoRefreshTimer();\n                } else {\n                    // Pause timer countdown when leaving diagnostics tab\n                    this.pauseAutoRefreshTimer();\n                }\n            }, 50); // Small delay to allow previous content to fade out\n        }\n        \n        // Handle URL hash changes\n        handleHashChange() {\n            let hash = window.location.hash;\n            \n            // If no hash or invalid hash, default to first tab\n            if (!hash || !$(hash).length) {\n                const firstTab = $('.nav-tab').first().attr('href');\n                if (firstTab) {\n                    hash = firstTab;\n                    // Don't update URL if we're defaulting to first tab\n                }\n            }\n            \n            // Switch to the tab if it exists\n            if (hash && $(hash).length) {\n                this.switchToTab(hash);\n            }\n        }\n\n        // Initialize toggle switches\n        initToggleSwitch() {\n            $('.ace-switch input').on('change', function() {\n                const $switch = $(this);\n                const $slider = $switch.siblings('.ace-slider');\n\n                // Add visual feedback\n                if ($switch.is(':checked')) {\n                    $slider.addClass('checked');\n                } else {\n                    $slider.removeClass('checked');\n                }\n            });\n        }\n\n        // Initialize cache mode handling\n        initCacheMode() {\n            const toggleBlockCachingOption = () => {\n                const cacheMode = $('#cache-mode-select').val();\n                const $blockCachingRow = $('#block-caching-row');\n                const $blockCachingCheckbox = $('input[name=\"ace_redis_cache_settings[enable_block_caching]\"]');\n\n                if (cacheMode === 'object') {\n                    $blockCachingRow.show();\n                } else {\n                    $blockCachingRow.hide();\n                    $blockCachingCheckbox.prop('checked', false);\n                }\n            };\n\n            // Initialize on page load\n            toggleBlockCachingOption();\n\n            // Handle cache mode changes\n            $('#cache-mode-select').on('change', toggleBlockCachingOption);\n        }\n\n        // Initialize connection testing\n        initConnectionTest() {\n            $('#ace-redis-cache-test-btn').on('click', (e) => {\n                e.preventDefault();\n                this.testConnection();\n            });\n\n            $('#ace-redis-cache-test-write-btn').on('click', (e) => {\n                e.preventDefault();\n                this.testWriteRead();\n            });\n        }\n\n        // Test Redis connection\n        testConnection() {\n            const $btn = $('#ace-redis-cache-test-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Testing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/test-connection\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.updateConnectionStatus(response.data);\n                    } else {\n                        this.showConnectionError(response.data || 'Connection failed');\n                    }\n                })\n                .fail(() => {\n                    this.showConnectionError('REST API request failed');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Test write/read operations\n        testWriteRead() {\n            const $btn = $('#ace-redis-cache-test-write-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Testing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/test-write-read\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(\n                            '✅ Write/Read Test Successful\\n' +\n                        `Write: ${response.data.write}\\n` +\n                        `Read: ${response.data.read}\\n` +\n                        `Value: ${response.data.value}`,\n                            'success'\n                        );\n                    } else {\n                        this.showNotification(`❌ Test failed: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ REST API request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Update connection status display\n        updateConnectionStatus(data) {\n            const $status = $('#ace-redis-cache-connection');\n            const $size = $('#ace-redis-cache-size');\n            const $serverInfo = $('#redis-server-info');\n            const $serverType = $('#redis-server-type');\n            const $suggestions = $('#redis-suggestions');\n\n            $status.text(data.status)\n                .removeClass('status-unknown status-error')\n                .addClass('status-success');\n\n            let sizeText = `${data.size} keys (${data.size_kb} KB)`;\n            if (data.debug_info) {\n                sizeText += ` - ${data.debug_info}`;\n            }\n            $size.text(sizeText);\n            \n            // Show server information if available\n            if (data.server_type || data.suggestions) {\n                $serverType.text(data.server_type || 'Unknown');\n                \n                // Display suggestions\n                if (data.suggestions && data.suggestions.length > 0) {\n                    let suggestionsHtml = '<p><strong>Recommendations:</strong></p><ul>';\n                    data.suggestions.forEach(suggestion => {\n                        suggestionsHtml += `<li>${suggestion}</li>`;\n                    });\n                    suggestionsHtml += '</ul>';\n                    $suggestions.html(suggestionsHtml);\n                } else {\n                    $suggestions.html('<p><strong>Recommendations:</strong> Configuration looks good ✅</p>');\n                }\n                \n                $serverInfo.slideDown(300);\n            }\n        }\n\n        // Show connection error\n        showConnectionError(message) {\n            const $status = $('#ace-redis-cache-connection');\n            const $size = $('#ace-redis-cache-size');\n            const $serverInfo = $('#redis-server-info');\n\n            $status.text(message)\n                .removeClass('status-unknown status-success')\n                .addClass('status-error');\n\n            $size.text('0 keys (0 KB)');\n            $serverInfo.slideUp(300);\n        }\n\n        // Initialize cache management\n        initCacheManagement() {\n            $('#ace-redis-cache-flush-btn').on('click', (e) => {\n                e.preventDefault();\n                this.clearAllCache();\n            });\n\n            $('#ace-redis-cache-flush-blocks-btn').on('click', (e) => {\n                e.preventDefault();\n                this.clearBlockCache();\n            });\n        }\n\n        // Clear all cache\n        clearAllCache() {\n            if (!confirm('Are you sure you want to clear all cache? This action cannot be undone.')) {\n                return;\n            }\n\n            const $btn = $('#ace-redis-cache-flush-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Clearing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/flush-cache\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce,\n                    type: 'all'\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(`✅ ${response.data.message || 'Cache cleared successfully'}`, 'success');\n                        $('#ace-redis-cache-size').text('0 keys (0 KB)');\n                    } else {\n                        this.showNotification(`❌ Failed to clear cache: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ REST API request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Clear block cache\n        clearBlockCache() {\n            if (!confirm('Clear all block cache? This will remove cached Gutenberg blocks.')) {\n                return;\n            }\n\n            const $btn = $('#ace-redis-cache-flush-blocks-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Clearing...').prop('disabled', true);\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/flush-cache\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce,\n                    type: 'blocks'\n                }\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(`✅ ${response.data.message || 'Block cache cleared'}`, 'success');\n                        // Refresh status\n                        setTimeout(() => this.testConnection(), 500);\n                    } else {\n                        this.showNotification(`❌ Failed to clear block cache: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ REST API request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Initialize diagnostics\n        initDiagnostics() {\n            $('#ace-redis-cache-diagnostics-btn').on('click', (e) => {\n                e.preventDefault();\n                this.runDiagnostics();\n            });\n        }\n\n        // Run system diagnostics\n        runDiagnostics() {\n            const $btn = $('#ace-redis-cache-diagnostics-btn');\n            const $results = $('#diagnostics-results');\n            const originalText = $btn.text();\n\n            $btn.text('Running...').prop('disabled', true);\n            $results.html('<p>⏳ Running comprehensive diagnostics...</p>');\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + \"ace-redis-cache/v1/diagnostics\",\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    nonce: ace_redis_admin.nonce\n                }\n            })\n                .done((response) => {\n                    if (response.success && response.data) {\n                        const diagnostics = Array.isArray(response.data)\n                            ? response.data.join('\\n')\n                            : response.data;\n                        $results.html(`<pre>${this.escapeHtml(diagnostics)}</pre>`);\n                    } else {\n                        $results.html(`<p class=\"error\">❌ Failed to load diagnostics: ${response.data || 'Unknown error'}</p>`);\n                    }\n                })\n                .fail(() => {\n                    $results.html('<p class=\"error\">❌ Diagnostics REST API request failed</p>');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Initialize form validation\n        initFormValidation() {\n            $('#ace-redis-save-btn').on('click', (e) => {\n                if (!this.validateForm()) {\n                    e.preventDefault();\n                    return false;\n                }\n            });\n\n            // Real-time validation\n            $('#redis_host').on('blur', this.validateHost);\n            $('#redis_port').on('blur', this.validatePort);\n            $('#cache_ttl').on('blur', this.validateTTL);\n        }\n\n        // Validate form inputs\n        validateForm() {\n            let isValid = true;\n            const errors = [];\n\n            // Validate host\n            const host = $('#redis_host').val().trim();\n            if (!host) {\n                errors.push('Redis host is required');\n                isValid = false;\n            }\n\n            // Validate port\n            const port = parseInt($('#redis_port').val());\n            if (!port || port < 1 || port > 65535) {\n                errors.push('Redis port must be between 1 and 65535');\n                isValid = false;\n            }\n\n            // Validate TTL\n            const ttl = parseInt($('#cache_ttl').val());\n            if (!ttl || ttl < 60) {\n                errors.push('Cache TTL must be at least 60 seconds');\n                isValid = false;\n            }\n\n            if (!isValid) {\n                this.showNotification(`❌ Validation errors:\\n${errors.join('\\n')}`, 'error');\n            }\n\n            return isValid;\n        }\n\n        // Individual field validators\n        validateHost() {\n            const $field = $(this);\n            const value = $field.val().trim();\n\n            if (!value) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        validatePort() {\n            const $field = $(this);\n            const value = parseInt($field.val());\n\n            if (!value || value < 1 || value > 65535) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        validateTTL() {\n            const $field = $(this);\n            const value = parseInt($field.val());\n\n            if (!value || value < 60) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        // Show notification\n        showNotification(message, type = 'info') {\n            // Use native alert for now - can be enhanced later\n            alert(message);\n\n            // Future: Create toast notifications\n            // this.createToast(message, type);\n        }\n\n        // Initialize AJAX form submission\n        initAjaxForm() {\n            console.log('Initializing AJAX form...');\n            \n            // Handle form submission\n            $('#ace-redis-settings-form').on('submit', (e) => {\n                console.log('Form submit intercepted');\n                e.preventDefault();\n                e.stopPropagation();\n                this.saveSettings();\n                return false;\n            });\n            \n            // Also handle direct button click as backup\n            $('#ace-redis-save-btn').on('click', (e) => {\n                console.log('Save button clicked');\n                e.preventDefault();\n                e.stopPropagation();\n                this.saveSettings();\n                return false;\n            });\n        }\n\n        // Initialize change tracking for form fields\n        initChangeTracking() {\n            // Store original form data\n            setTimeout(() => {\n                // Store original button text\n                const $button = $('#ace-redis-save-btn');\n                if (!$button.data('original-text')) {\n                    $button.data('original-text', $button.val());\n                }\n                \n                this.captureOriginalFormData();\n                this.updateSaveButtonState();\n                \n                // Watch for changes\n                $('#ace-redis-settings-form input, #ace-redis-settings-form select, #ace-redis-settings-form textarea').on('input change', () => {\n                    setTimeout(() => this.updateSaveButtonState(), 10);\n                });\n            }, 100);\n        }\n        \n        // Capture original form data\n        captureOriginalFormData() {\n            this.originalFormData = this.getFormDataObject();\n        }\n        \n        // Check if form has changes\n        hasFormChanges() {\n            if (!this.originalFormData) return false;\n            \n            const currentData = this.getFormDataObject();\n            return JSON.stringify(this.originalFormData) !== JSON.stringify(currentData);\n        }\n        \n        // Update save button state based on changes\n        updateSaveButtonState() {\n            const $button = $('#ace-redis-save-btn');\n            const hasChanges = this.hasFormChanges();\n            \n            $button.prop('disabled', !hasChanges);\n            \n            if (!hasChanges) {\n                $button.val($button.data('original-text') || 'Save Changes (No Changes)');\n            } else {\n                $button.val($button.data('original-text') || 'Save Changes');\n            }\n        }\n        \n        // Get form data as object\n        getFormDataObject() {\n            const $form = $('#ace-redis-settings-form');\n            const formData = {};\n            \n            $form.serializeArray().forEach(field => {\n                if (field.name.startsWith('ace_redis_cache_settings[')) {\n                    const key = field.name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                    formData[key] = field.value;\n                }\n            });\n\n            // Add checkbox values (unchecked boxes don't get serialized)\n            $form.find('input[type=\"checkbox\"]').each(function() {\n                const name = $(this).attr('name');\n                if (name && name.startsWith('ace_redis_cache_settings[')) {\n                    const key = name.replace('ace_redis_cache_settings[', '').replace(']', '');\n                    formData[key] = $(this).is(':checked') ? '1' : '0';\n                }\n            });\n            \n            return formData;\n        }\n\n        // Save settings via REST API\n        saveSettings() {\n            // Check for changes first\n            if (!this.hasFormChanges()) {\n                this.showMessage('Error: Failed to save settings. No changes detected or database error.', 'error');\n                return;\n            }\n            \n            const $form = $('#ace-redis-settings-form');\n            const $button = $('#ace-redis-save-btn');\n            const $messages = $('#ace-redis-messages');\n            \n            console.log('REST API Save triggered...');\n            \n            // Show loading state\n            const originalText = $button.val();\n            $button.val('Saving...').prop('disabled', true);\n            $messages.hide();\n\n            // Get form data\n            const formData = this.getFormDataObject();\n\n            console.log('Sending data:', formData);\n            console.log('REST URL:', ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings');\n\n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/settings',\n                type: 'POST',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                    console.log('Set REST nonce:', ace_redis_admin.rest_nonce);\n                },\n                data: {\n                    settings: formData,\n                    nonce: ace_redis_admin.nonce\n                },\n                success: (response) => {\n                    console.log('Success response:', response);\n                    if (response.success) {\n                        this.showMessage(response.message || 'Settings saved successfully!', 'success');\n                        \n                        // Update original form data and button state\n                        this.captureOriginalFormData();\n                        this.updateSaveButtonState();\n                        \n                        // Refresh connection status after save\n                        setTimeout(() => {\n                            if (typeof this.testConnection === 'function') {\n                                this.testConnection();\n                            }\n                        }, 1000);\n                    } else {\n                        this.showMessage(response.message || 'Failed to save settings', 'error');\n                    }\n                },\n                error: (xhr, status, error) => {\n                    console.error('Save error:', {\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                        responseText: xhr.responseText,\n                        error: error\n                    });\n                    \n                    let errorMessage = 'Network error occurred';\n                    \n                    if (xhr.responseJSON && xhr.responseJSON.message) {\n                        errorMessage = xhr.responseJSON.message;\n                    } else if (xhr.status === 504) {\n                        errorMessage = 'Gateway timeout - settings may still be saved. Please refresh the page.';\n                    } else if (xhr.status === 403) {\n                        errorMessage = 'Permission denied. Please refresh the page and try again.';\n                    } else if (xhr.status === 404) {\n                        errorMessage = 'REST API endpoint not found. The plugin may not be properly configured.';\n                    } else {\n                        errorMessage = `${error} (Status: ${xhr.status})`;\n                    }\n                    \n                    this.showMessage('Error: ' + errorMessage, 'error');\n                },\n                complete: () => {\n                    // Reset button state\n                    $button.val(originalText).prop('disabled', false);\n                }\n            });\n        }\n\n        // Show success/error message\n        showMessage(message, type = 'success') {\n            const $messages = $('#ace-redis-messages');\n            const cssClass = type === 'success' ? 'notice-success' : 'notice-error';\n            \n            $messages.html(`\n                <div class=\"notice ${cssClass} is-dismissible\">\n                    <p>${this.escapeHtml(message)}</p>\n                    <button type=\"button\" class=\"notice-dismiss\">\n                        <span class=\"screen-reader-text\">Dismiss this notice.</span>\n                    </button>\n                </div>\n            `).show();\n\n            // Auto-hide success messages after 5 seconds\n            if (type === 'success') {\n                setTimeout(() => {\n                    $messages.fadeOut();\n                }, 5000);\n            }\n\n            // Handle dismiss button\n            $messages.find('.notice-dismiss').on('click', function() {\n                $messages.fadeOut();\n            });\n        }\n\n        // Initialize performance metrics\n        initPerformanceMetrics() {\n            // Load metrics immediately if diagnostics tab is active\n            if ($('#diagnostics').hasClass('active')) {\n                setTimeout(() => {\n                    $('#refresh-metrics-btn').click();\n                }, 100);\n            }\n            \n            // Initialize auto-refresh functionality\n            this.initAutoRefresh();\n            \n            // Manual refresh button\n            $('#refresh-metrics-btn').on('click', () => {\n                this.loadPerformanceMetrics();\n                // Visual feedback for manual refresh\n                const $btn = $('#refresh-metrics-btn');\n                $btn.prop('disabled', true).html('⏳');\n                setTimeout(() => {\n                    $btn.prop('disabled', false).html('🔄');\n                }, 1000);\n            });\n        }\n        \n        // Initialize auto-refresh functionality\n        initAutoRefresh() {\n            // Store references at class level\n            this.autoRefreshInterval = null;\n            this.countdownInterval = null;\n            this.remainingSeconds = 0;\n            \n            const updateTimer = () => {\n                const $timer = $('#refresh-timer');\n                if (this.remainingSeconds > 0) {\n                    $timer.text(`Next refresh in ${this.remainingSeconds}s`);\n                    this.remainingSeconds--;\n                } else {\n                    $timer.text('');\n                }\n            };\n            \n            this.startAutoRefresh = (seconds) => {\n                // Clear existing intervals\n                if (this.autoRefreshInterval) {\n                    clearInterval(this.autoRefreshInterval);\n                }\n                if (this.countdownInterval) {\n                    clearInterval(this.countdownInterval);\n                }\n                \n                const $timer = $('#refresh-timer');\n                \n                if (seconds > 0) {\n                    this.remainingSeconds = seconds;\n                    \n                    // Start countdown timer\n                    this.countdownInterval = setInterval(updateTimer, 1000);\n                    \n                    // Start auto-refresh timer\n                    this.autoRefreshInterval = setInterval(() => {\n                        // Only refresh if diagnostics tab is active\n                        if ($('#diagnostics').hasClass('active')) {\n                            $('#refresh-metrics-btn').click();\n                            this.remainingSeconds = seconds; // Reset countdown\n                        }\n                    }, seconds * 1000);\n                    \n                    updateTimer(); // Show initial timer\n                } else {\n                    $timer.text('');\n                }\n            };\n            \n            // Handle dropdown change\n            $('#auto-refresh-select').on('change', () => {\n                const seconds = parseInt($('#auto-refresh-select').val());\n                this.startAutoRefresh(seconds);\n            });\n            \n            // Start with default value (30 seconds)\n            this.startAutoRefresh(30);\n        }\n        \n        // Pause auto-refresh timer (when leaving diagnostics tab)\n        pauseAutoRefreshTimer() {\n            if (this.countdownInterval) {\n                clearInterval(this.countdownInterval);\n            }\n            $('#refresh-timer').text('');\n        }\n        \n        // Resume auto-refresh timer (when entering diagnostics tab)\n        resumeAutoRefreshTimer() {\n            const selectedSeconds = parseInt($('#auto-refresh-select').val());\n            if (selectedSeconds > 0) {\n                // Restart the timer to show countdown immediately\n                this.startAutoRefresh(selectedSeconds);\n            }\n        }\n\n        // Load performance metrics via REST API\n        loadPerformanceMetrics() {\n            // Safety check - only load if diagnostics tab is active\n            if (!$('#diagnostics').hasClass('active')) {\n                return;\n            }\n            \n            $.ajax({\n                url: ace_redis_admin.rest_url + 'ace-redis-cache/v1/metrics',\n                type: 'GET',\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader('X-WP-Nonce', ace_redis_admin.rest_nonce);\n                },\n                success: (response) => {\n                    // Double-check we're still on the diagnostics tab when response comes back\n                    if (!$('#diagnostics').hasClass('active')) {\n                        return;\n                    }\n                    \n                    if (response.success && response.data) {\n                        this.updateMetricsDisplay(response.data);\n                    } else if (response.data) {\n                        // Even on error, use the fallback data provided\n                        this.updateMetricsDisplay(response.data);\n                    }\n                },\n                error: () => {\n                    // Use fallback metrics on error\n                    this.updateMetricsDisplay({\n                        cache_hit_rate: '--',\n                        total_keys: '--',\n                        memory_usage: '--',\n                        response_time: '--',\n                        uptime: '--',\n                        connected_clients: '--',\n                        ops_per_sec: '--'\n                    });\n                }\n            });\n        }\n\n        // Update metrics display\n        updateMetricsDisplay(metrics) {\n            $('#performance-metrics .metric-card').each(function() {\n                const $card = $(this);\n                const $value = $card.find('.metric-value');\n                const title = $card.find('h4').text();\n                let newValue = '--';\n                \n                switch (title) {\n                    case 'Cache Hit Rate':\n                        newValue = metrics.cache_hit_rate || '--';\n                        break;\n                    case 'Total Keys':\n                        newValue = metrics.total_keys || '--';\n                        break;\n                    case 'Memory Usage':\n                        newValue = metrics.memory_usage || '--';\n                        break;\n                    case 'Response Time':\n                        newValue = metrics.response_time || '--';\n                        break;\n                    case 'Uptime':\n                        newValue = metrics.uptime || '--';\n                        break;\n                    case 'Connected Clients':\n                        newValue = metrics.connected_clients || '--';\n                        break;\n                    case 'Operations/sec':\n                    case 'Ops/sec':\n                        newValue = metrics.ops_per_sec || '--';\n                        break;\n                    case 'Connection Time':\n                        newValue = metrics.connection_time || '--';\n                        break;\n                }\n                \n                // Add visual feedback when value changes\n                const oldValue = $value.text();\n                if (oldValue !== newValue) {\n                    $value.fadeOut(100, function() {\n                        $(this).text(newValue).fadeIn(100);\n                    });\n                } else {\n                    $value.text(newValue);\n                }\n            });\n            \n            // Update last updated timestamp\n            const now = new Date().toLocaleTimeString();\n            $('.metrics-last-updated').text(`Last updated: ${now}`);\n        }\n\n        // Escape HTML for safe display\n        escapeHtml(text) {\n            const div = document.createElement('div');\n            div.textContent = text;\n            return div.innerHTML;\n        }\n    }\n\n    // Initialize when document is ready\n    $(document).ready(() => {\n        // eslint-disable-next-line no-new\n        new AceRedisCacheAdmin();\n    });\n})(jQuery);\n"],"names":["$","AceRedisCacheAdmin","constructor","this","originalFormData","init","initTabs","initToggleSwitch","initCacheMode","initConnectionTest","initCacheManagement","initDiagnostics","initPerformanceMetrics","initAjaxForm","initFormValidation","initChangeTracking","on","e","preventDefault","target","attr","switchToTab","startsWith","window","location","hash","handleHashChange","length","removeClass","addClass","setTimeout","click","resumeAutoRefreshTimer","pauseAutoRefreshTimer","firstTab","first","$switch","$slider","siblings","is","toggleBlockCachingOption","cacheMode","val","$blockCachingRow","$blockCachingCheckbox","show","hide","prop","testConnection","testWriteRead","$btn","originalText","text","ajax","url","ace_redis_admin","rest_url","type","beforeSend","xhr","setRequestHeader","rest_nonce","data","nonce","done","response","success","updateConnectionStatus","showConnectionError","fail","always","showNotification","write","read","value","$status","$size","$serverInfo","$serverType","$suggestions","status","sizeText","size","size_kb","debug_info","server_type","suggestions","suggestionsHtml","forEach","suggestion","html","slideDown","message","slideUp","clearAllCache","clearBlockCache","confirm","runDiagnostics","$results","diagnostics","Array","isArray","join","escapeHtml","validateForm","validateHost","validatePort","validateTTL","isValid","errors","trim","push","port","parseInt","ttl","$field","alert","console","log","stopPropagation","saveSettings","$button","captureOriginalFormData","updateSaveButtonState","getFormDataObject","hasFormChanges","currentData","JSON","stringify","hasChanges","$form","formData","serializeArray","field","name","key","replace","find","each","showMessage","$messages","settings","error","statusText","responseText","errorMessage","responseJSON","complete","cssClass","fadeOut","hasClass","initAutoRefresh","loadPerformanceMetrics","autoRefreshInterval","countdownInterval","remainingSeconds","updateTimer","$timer","startAutoRefresh","seconds","clearInterval","setInterval","selectedSeconds","updateMetricsDisplay","cache_hit_rate","total_keys","memory_usage","response_time","uptime","connected_clients","ops_per_sec","metrics","$card","$value","title","newValue","connection_time","fadeIn","now","Date","toLocaleTimeString","div","document","createElement","textContent","innerHTML","ready","jQuery"],"sourceRoot":""}