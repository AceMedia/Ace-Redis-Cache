{"version":3,"file":"admin.min.js","mappings":"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","sources":["webpack://ace-redis-cache/./assets/src/js/admin.js"],"sourcesContent":["/**\n * Ace Redis Cache Admin JavaScript\n *\n * Handles admin interface interactions, AJAX requests,\n * and dynamic UI updates.\n *\n * @package AceMedia\\RedisCache\n * @since 0.5.0\n */\n\n(function($) {\n    'use strict';\n\n    // Main admin class\n    class AceRedisCacheAdmin {\n        constructor() {\n            this.init();\n        }\n\n        init() {\n            this.initTabs();\n            this.initToggleSwitch();\n            this.initCacheMode();\n            this.initConnectionTest();\n            this.initCacheManagement();\n            this.initDiagnostics();\n            this.initPerformanceMetrics();\n            this.initAjaxForm();\n            this.initFormValidation();\n        }\n\n        // Initialize tab navigation\n        initTabs() {\n            // Handle tab clicks\n            $('.nav-tab').on('click', (e) => {\n                e.preventDefault();\n                const target = $(e.target).attr('href');\n                this.switchToTab(target);\n                \n                // Update URL hash\n                if (target.startsWith('#')) {\n                    window.location.hash = target;\n                }\n            });\n            \n            // Handle browser back/forward navigation\n            $(window).on('hashchange', () => {\n                this.handleHashChange();\n            });\n            \n            // Initialize tab based on URL hash on page load\n            this.handleHashChange();\n        }\n        \n        // Switch to a specific tab\n        switchToTab(target) {\n            if (!target || !$(target).length) {\n                return;\n            }\n            \n            // Update tab states\n            $('.nav-tab').removeClass('nav-tab-active');\n            $(`.nav-tab[href=\"${target}\"]`).addClass('nav-tab-active');\n\n            // Update content visibility with fade effect\n            $('.tab-content.active').removeClass('active');\n            setTimeout(() => {\n                $(target).addClass('active');\n            }, 50); // Small delay to allow previous content to fade out\n        }\n        \n        // Handle URL hash changes\n        handleHashChange() {\n            let hash = window.location.hash;\n            \n            // If no hash or invalid hash, default to first tab\n            if (!hash || !$(hash).length) {\n                const firstTab = $('.nav-tab').first().attr('href');\n                if (firstTab) {\n                    hash = firstTab;\n                    // Don't update URL if we're defaulting to first tab\n                }\n            }\n            \n            // Switch to the tab if it exists\n            if (hash && $(hash).length) {\n                this.switchToTab(hash);\n            }\n        }\n\n        // Initialize toggle switches\n        initToggleSwitch() {\n            $('.ace-switch input').on('change', function() {\n                const $switch = $(this);\n                const $slider = $switch.siblings('.ace-slider');\n\n                // Add visual feedback\n                if ($switch.is(':checked')) {\n                    $slider.addClass('checked');\n                } else {\n                    $slider.removeClass('checked');\n                }\n            });\n        }\n\n        // Initialize cache mode handling\n        initCacheMode() {\n            const toggleBlockCachingOption = () => {\n                const cacheMode = $('#cache-mode-select').val();\n                const $blockCachingRow = $('#block-caching-row');\n                const $blockCachingCheckbox = $('input[name=\"ace_redis_cache_settings[enable_block_caching]\"]');\n\n                if (cacheMode === 'object') {\n                    $blockCachingRow.show();\n                } else {\n                    $blockCachingRow.hide();\n                    $blockCachingCheckbox.prop('checked', false);\n                }\n            };\n\n            // Initialize on page load\n            toggleBlockCachingOption();\n\n            // Handle cache mode changes\n            $('#cache-mode-select').on('change', toggleBlockCachingOption);\n        }\n\n        // Initialize connection testing\n        initConnectionTest() {\n            $('#ace-redis-cache-test-btn').on('click', (e) => {\n                e.preventDefault();\n                this.testConnection();\n            });\n\n            $('#ace-redis-cache-test-write-btn').on('click', (e) => {\n                e.preventDefault();\n                this.testWriteRead();\n            });\n        }\n\n        // Test Redis connection\n        testConnection() {\n            const $btn = $('#ace-redis-cache-test-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Testing...').prop('disabled', true);\n\n            $.post(ace_redis_admin.ajax_url, {\n                action: 'ace_redis_cache_status',\n                nonce: ace_redis_admin.nonce\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.updateConnectionStatus(response.data);\n                    } else {\n                        this.showConnectionError(response.data || 'Connection failed');\n                    }\n                })\n                .fail(() => {\n                    this.showConnectionError('AJAX request failed');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Test write/read operations\n        testWriteRead() {\n            const $btn = $('#ace-redis-cache-test-write-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Testing...').prop('disabled', true);\n\n            $.post(ace_redis_admin.ajax_url, {\n                action: 'ace_redis_cache_test_write',\n                nonce: ace_redis_admin.nonce\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(\n                            '✅ Write/Read Test Successful\\n' +\n                        `Write: ${response.data.write}\\n` +\n                        `Read: ${response.data.read}\\n` +\n                        `Value: ${response.data.value}`,\n                            'success'\n                        );\n                    } else {\n                        this.showNotification(`❌ Test failed: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ AJAX request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Update connection status display\n        updateConnectionStatus(data) {\n            const $status = $('#ace-redis-cache-connection');\n            const $size = $('#ace-redis-cache-size');\n\n            $status.text(data.status)\n                .removeClass('status-unknown status-error')\n                .addClass('status-success');\n\n            let sizeText = `${data.size} keys (${data.size_kb} KB)`;\n            if (data.debug_info) {\n                sizeText += ` - ${data.debug_info}`;\n            }\n            $size.text(sizeText);\n        }\n\n        // Show connection error\n        showConnectionError(message) {\n            const $status = $('#ace-redis-cache-connection');\n            const $size = $('#ace-redis-cache-size');\n\n            $status.text(message)\n                .removeClass('status-unknown status-success')\n                .addClass('status-error');\n\n            $size.text('0 keys (0 KB)');\n        }\n\n        // Initialize cache management\n        initCacheManagement() {\n            $('#ace-redis-cache-flush-btn').on('click', (e) => {\n                e.preventDefault();\n                this.clearAllCache();\n            });\n\n            $('#ace-redis-cache-flush-blocks-btn').on('click', (e) => {\n                e.preventDefault();\n                this.clearBlockCache();\n            });\n        }\n\n        // Clear all cache\n        clearAllCache() {\n            if (!confirm('Are you sure you want to clear all cache? This action cannot be undone.')) {\n                return;\n            }\n\n            const $btn = $('#ace-redis-cache-flush-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Clearing...').prop('disabled', true);\n\n            $.post(ace_redis_admin.ajax_url, {\n                action: 'ace_redis_cache_flush',\n                nonce: ace_redis_admin.nonce\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(`✅ ${response.data.message || 'Cache cleared successfully'}`, 'success');\n                        $('#ace-redis-cache-size').text('0 keys (0 KB)');\n                    } else {\n                        this.showNotification(`❌ Failed to clear cache: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ AJAX request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Clear block cache\n        clearBlockCache() {\n            if (!confirm('Clear all block cache? This will remove cached Gutenberg blocks.')) {\n                return;\n            }\n\n            const $btn = $('#ace-redis-cache-flush-blocks-btn');\n            const originalText = $btn.text();\n\n            $btn.text('Clearing...').prop('disabled', true);\n\n            $.post(ace_redis_admin.ajax_url, {\n                action: 'ace_redis_cache_flush_blocks',\n                nonce: ace_redis_admin.nonce\n            })\n                .done((response) => {\n                    if (response.success) {\n                        this.showNotification(`✅ ${response.data.message || 'Block cache cleared'}`, 'success');\n                        // Refresh status\n                        setTimeout(() => this.testConnection(), 500);\n                    } else {\n                        this.showNotification(`❌ Failed to clear block cache: ${response.data}`, 'error');\n                    }\n                })\n                .fail(() => {\n                    this.showNotification('❌ AJAX request failed', 'error');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Initialize diagnostics\n        initDiagnostics() {\n            $('#ace-redis-cache-diagnostics-btn').on('click', (e) => {\n                e.preventDefault();\n                this.runDiagnostics();\n            });\n        }\n\n        // Run system diagnostics\n        runDiagnostics() {\n            const $btn = $('#ace-redis-cache-diagnostics-btn');\n            const $results = $('#diagnostics-results');\n            const originalText = $btn.text();\n\n            $btn.text('Running...').prop('disabled', true);\n            $results.html('<p>⏳ Running comprehensive diagnostics...</p>');\n\n            $.post(ace_redis_admin.ajax_url, {\n                action: 'ace_redis_cache_diagnostics',\n                nonce: ace_redis_admin.nonce\n            })\n                .done((response) => {\n                    if (response.success && response.data) {\n                        const diagnostics = Array.isArray(response.data)\n                            ? response.data.join('\\n')\n                            : response.data;\n                        $results.html(`<pre>${this.escapeHtml(diagnostics)}</pre>`);\n                    } else {\n                        $results.html(`<p class=\"error\">❌ Failed to load diagnostics: ${response.data || 'Unknown error'}</p>`);\n                    }\n                })\n                .fail(() => {\n                    $results.html('<p class=\"error\">❌ Diagnostics request failed</p>');\n                })\n                .always(() => {\n                    $btn.text(originalText).prop('disabled', false);\n                });\n        }\n\n        // Initialize form validation\n        initFormValidation() {\n            $('#ace-redis-save-btn').on('click', (e) => {\n                if (!this.validateForm()) {\n                    e.preventDefault();\n                    return false;\n                }\n            });\n\n            // Real-time validation\n            $('#redis_host').on('blur', this.validateHost);\n            $('#redis_port').on('blur', this.validatePort);\n            $('#cache_ttl').on('blur', this.validateTTL);\n        }\n\n        // Validate form inputs\n        validateForm() {\n            let isValid = true;\n            const errors = [];\n\n            // Validate host\n            const host = $('#redis_host').val().trim();\n            if (!host) {\n                errors.push('Redis host is required');\n                isValid = false;\n            }\n\n            // Validate port\n            const port = parseInt($('#redis_port').val());\n            if (!port || port < 1 || port > 65535) {\n                errors.push('Redis port must be between 1 and 65535');\n                isValid = false;\n            }\n\n            // Validate TTL\n            const ttl = parseInt($('#cache_ttl').val());\n            if (!ttl || ttl < 60) {\n                errors.push('Cache TTL must be at least 60 seconds');\n                isValid = false;\n            }\n\n            if (!isValid) {\n                this.showNotification(`❌ Validation errors:\\n${errors.join('\\n')}`, 'error');\n            }\n\n            return isValid;\n        }\n\n        // Individual field validators\n        validateHost() {\n            const $field = $(this);\n            const value = $field.val().trim();\n\n            if (!value) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        validatePort() {\n            const $field = $(this);\n            const value = parseInt($field.val());\n\n            if (!value || value < 1 || value > 65535) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        validateTTL() {\n            const $field = $(this);\n            const value = parseInt($field.val());\n\n            if (!value || value < 60) {\n                $field.addClass('error');\n                return false;\n            }\n\n            $field.removeClass('error');\n            return true;\n        }\n\n        // Show notification\n        showNotification(message, type = 'info') {\n            // Use native alert for now - can be enhanced later\n            alert(message);\n\n            // Future: Create toast notifications\n            // this.createToast(message, type);\n        }\n\n        // Initialize AJAX form submission\n        initAjaxForm() {\n            console.log('Initializing AJAX form...');\n            \n            // Handle form submission\n            $('#ace-redis-settings-form').on('submit', (e) => {\n                console.log('Form submit intercepted');\n                e.preventDefault();\n                e.stopPropagation();\n                this.saveSettings();\n                return false;\n            });\n            \n            // Also handle direct button click as backup\n            $('#ace-redis-save-btn').on('click', (e) => {\n                console.log('Save button clicked');\n                e.preventDefault();\n                e.stopPropagation();\n                this.saveSettings();\n                return false;\n            });\n        }\n\n        // Save settings via AJAX\n        saveSettings() {\n            const $form = $('#ace-redis-settings-form');\n            const $button = $('#ace-redis-save-btn');\n            const $messages = $('#ace-redis-messages');\n            \n            // Show loading state\n            const originalText = $button.val();\n            $button.val('Saving...').prop('disabled', true);\n            $messages.hide();\n\n            $.ajax({\n                url: ace_redis_admin.ajax_url,\n                type: 'POST',\n                data: {\n                    action: 'ace_redis_cache_save_settings',\n                    nonce: ace_redis_admin.nonce,\n                    form_data: $form.serialize()\n                },\n                success: (response) => {\n                    if (response.success) {\n                        this.showMessage(response.data.message, 'success');\n                        \n                        // Refresh metrics if settings changed\n                        if (response.data.settings_changed) {\n                            setTimeout(() => {\n                                this.loadPerformanceMetrics();\n                            }, 1000);\n                        }\n                    } else {\n                        this.showMessage(response.data || 'Failed to save settings', 'error');\n                    }\n                },\n                error: (xhr, status, error) => {\n                    this.showMessage('Network error: ' + error, 'error');\n                },\n                complete: () => {\n                    // Reset button state\n                    $button.val(originalText).prop('disabled', false);\n                }\n            });\n        }\n\n        // Show success/error message\n        showMessage(message, type = 'success') {\n            const $messages = $('#ace-redis-messages');\n            const cssClass = type === 'success' ? 'notice-success' : 'notice-error';\n            \n            $messages.html(`\n                <div class=\"notice ${cssClass} is-dismissible\">\n                    <p>${this.escapeHtml(message)}</p>\n                    <button type=\"button\" class=\"notice-dismiss\">\n                        <span class=\"screen-reader-text\">Dismiss this notice.</span>\n                    </button>\n                </div>\n            `).show();\n\n            // Auto-hide success messages after 5 seconds\n            if (type === 'success') {\n                setTimeout(() => {\n                    $messages.fadeOut();\n                }, 5000);\n            }\n\n            // Handle dismiss button\n            $messages.find('.notice-dismiss').on('click', function() {\n                $messages.fadeOut();\n            });\n        }\n\n        // Initialize performance metrics\n        initPerformanceMetrics() {\n            // Load metrics on page load\n            this.loadPerformanceMetrics();\n            \n            // Refresh metrics every 30 seconds\n            setInterval(() => {\n                this.loadPerformanceMetrics();\n            }, 30000);\n        }\n\n        // Load performance metrics via AJAX\n        loadPerformanceMetrics() {\n            $.ajax({\n                url: ace_redis_admin.ajax_url,\n                type: 'POST',\n                data: {\n                    action: 'ace_redis_cache_metrics',\n                    nonce: ace_redis_admin.nonce\n                },\n                success: (response) => {\n                    if (response.success) {\n                        this.updateMetricsDisplay(response.data);\n                    }\n                },\n                error: () => {\n                    // Keep showing \"--\" on error\n                }\n            });\n        }\n\n        // Update metrics display\n        updateMetricsDisplay(metrics) {\n            $('#performance-metrics .metric-card').each(function() {\n                const $card = $(this);\n                const $value = $card.find('.metric-value');\n                const title = $card.find('h4').text();\n                \n                switch (title) {\n                    case 'Cache Hit Rate':\n                        $value.text(metrics.cache_hit_rate || '--');\n                        break;\n                    case 'Memory Usage':\n                        $value.text(metrics.memory_usage || '--');\n                        break;\n                    case 'Total Keys':\n                        $value.text(metrics.total_keys || '--');\n                        break;\n                    case 'Connection Time':\n                        $value.text(metrics.connection_time || '--');\n                        break;\n                }\n            });\n        }\n\n        // Escape HTML for safe display\n        escapeHtml(text) {\n            const div = document.createElement('div');\n            div.textContent = text;\n            return div.innerHTML;\n        }\n    }\n\n    // Initialize when document is ready\n    $(document).ready(() => {\n        // eslint-disable-next-line no-new\n        new AceRedisCacheAdmin();\n    });\n})(jQuery);\n"],"names":["$","AceRedisCacheAdmin","constructor","this","init","initTabs","initToggleSwitch","initCacheMode","initConnectionTest","initCacheManagement","initDiagnostics","initPerformanceMetrics","initAjaxForm","initFormValidation","on","e","preventDefault","target","attr","switchToTab","startsWith","window","location","hash","handleHashChange","length","removeClass","addClass","setTimeout","firstTab","first","$switch","$slider","siblings","is","toggleBlockCachingOption","cacheMode","val","$blockCachingRow","$blockCachingCheckbox","show","hide","prop","testConnection","testWriteRead","$btn","originalText","text","post","ace_redis_admin","ajax_url","action","nonce","done","response","success","updateConnectionStatus","data","showConnectionError","fail","always","showNotification","write","read","value","$status","$size","status","sizeText","size","size_kb","debug_info","message","clearAllCache","clearBlockCache","confirm","runDiagnostics","$results","html","diagnostics","Array","isArray","join","escapeHtml","validateForm","validateHost","validatePort","validateTTL","isValid","errors","trim","push","port","parseInt","ttl","$field","type","alert","console","log","stopPropagation","saveSettings","$form","$button","$messages","ajax","url","form_data","serialize","showMessage","settings_changed","loadPerformanceMetrics","error","xhr","complete","cssClass","fadeOut","find","setInterval","updateMetricsDisplay","metrics","each","$card","$value","cache_hit_rate","memory_usage","total_keys","connection_time","div","document","createElement","textContent","innerHTML","ready","jQuery"],"sourceRoot":""}